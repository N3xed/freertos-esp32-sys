/* automatically generated by rust-bindgen 0.58.1 */

pub const portNUM_PROCESSORS: u32 = 2;
pub const XT_USE_THREAD_SAFE_CLIB: u32 = 0;
pub const configASSERT_2: u32 = 0;
pub const portUSING_MPU_WRAPPERS: u32 = 0;
pub const configUSE_MUTEX: u32 = 1;
pub const XT_TIMER_INDEX: u32 = 0;
pub const configNUM_THREAD_LOCAL_STORAGE_POINTERS: u32 = 1;
pub const configTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS: u32 = 1;
pub const XTHAL_RELEASE_MAJOR: u32 = 12000;
pub const XTHAL_RELEASE_MINOR: u32 = 9;
pub const XTHAL_RELEASE_NAME: &'static [u8; 7usize] = b"12.0.9\0";
pub const XTHAL_REL_12: u32 = 1;
pub const XTHAL_REL_12_0: u32 = 1;
pub const XTHAL_REL_12_0_9: u32 = 1;
pub const XTHAL_MAJOR_REV: u32 = 12000;
pub const XTHAL_MINOR_REV: u32 = 9;
pub const XTHAL_MAYBE: i32 = -1;
pub const XTHAL_MAX_CPS: u32 = 8;
pub const XTHAL_LITTLEENDIAN: u32 = 0;
pub const XTHAL_BIGENDIAN: u32 = 1;
pub const XTHAL_PREFETCH_ENABLE: i32 = -1;
pub const XTHAL_PREFETCH_DISABLE: u32 = 4294901760;
pub const XTHAL_DCACHE_PREFETCH_L1_OFF: u32 = 2415919104;
pub const XTHAL_DCACHE_PREFETCH_L1: u32 = 2415923200;
pub const XTHAL_ICACHE_PREFETCH_L1_OFF: u32 = 2684354560;
pub const XTHAL_ICACHE_PREFETCH_L1: u32 = 2684362752;
pub const XTHAL_DISASM_BUFSIZE: u32 = 80;
pub const XTHAL_DISASM_OPT_ADDR: u32 = 1;
pub const XTHAL_DISASM_OPT_OPHEX: u32 = 2;
pub const XTHAL_DISASM_OPT_OPCODE: u32 = 4;
pub const XTHAL_DISASM_OPT_PARMS: u32 = 8;
pub const XTHAL_DISASM_OPT_ALL: u32 = 4095;
pub const XTHAL_MAX_INTERRUPTS: u32 = 32;
pub const XTHAL_MAX_INTLEVELS: u32 = 16;
pub const XTHAL_MAX_TIMERS: u32 = 4;
pub const XTHAL_INTTYPE_UNCONFIGURED: u32 = 0;
pub const XTHAL_INTTYPE_SOFTWARE: u32 = 1;
pub const XTHAL_INTTYPE_EXTERN_EDGE: u32 = 2;
pub const XTHAL_INTTYPE_EXTERN_LEVEL: u32 = 3;
pub const XTHAL_INTTYPE_TIMER: u32 = 4;
pub const XTHAL_INTTYPE_NMI: u32 = 5;
pub const XTHAL_INTTYPE_WRITE_ERROR: u32 = 6;
pub const XTHAL_INTTYPE_PROFILING: u32 = 7;
pub const XTHAL_INTTYPE_IDMA_DONE: u32 = 8;
pub const XTHAL_INTTYPE_IDMA_ERR: u32 = 9;
pub const XTHAL_INTTYPE_GS_ERR: u32 = 10;
pub const XTHAL_INTTYPE_SG_ERR: u32 = 10;
pub const XTHAL_MAX_INTTYPES: u32 = 11;
pub const XTHAL_TIMER_UNCONFIGURED: i32 = -1;
pub const XTHAL_TIMER_UNASSIGNED: i32 = -1;
pub const XTHAL_MEMEP_PARITY: u32 = 1;
pub const XTHAL_MEMEP_ECC: u32 = 2;
pub const XTHAL_MEMEP_F_LOCAL: u32 = 0;
pub const XTHAL_MEMEP_F_DCACHE_DATA: u32 = 4;
pub const XTHAL_MEMEP_F_DCACHE_TAG: u32 = 5;
pub const XTHAL_MEMEP_F_ICACHE_DATA: u32 = 6;
pub const XTHAL_MEMEP_F_ICACHE_TAG: u32 = 7;
pub const XTHAL_MEMEP_F_CORRECTABLE: u32 = 16;
pub const XTHAL_AMB_EXCEPTION: u32 = 0;
pub const XTHAL_AMB_HITCACHE: u32 = 1;
pub const XTHAL_AMB_ALLOCATE: u32 = 2;
pub const XTHAL_AMB_WRITETHRU: u32 = 3;
pub const XTHAL_AMB_ISOLATE: u32 = 4;
pub const XTHAL_AMB_GUARD: u32 = 5;
pub const XTHAL_AMB_COHERENT: u32 = 6;
pub const XTHAL_AM_EXCEPTION: u32 = 1;
pub const XTHAL_AM_HITCACHE: u32 = 2;
pub const XTHAL_AM_ALLOCATE: u32 = 4;
pub const XTHAL_AM_WRITETHRU: u32 = 8;
pub const XTHAL_AM_ISOLATE: u32 = 16;
pub const XTHAL_AM_GUARD: u32 = 32;
pub const XTHAL_AM_COHERENT: u32 = 64;
pub const XTHAL_FAM_EXCEPTION: u32 = 1;
pub const XTHAL_FAM_BYPASS: u32 = 0;
pub const XTHAL_FAM_CACHED: u32 = 6;
pub const XTHAL_LAM_EXCEPTION: u32 = 1;
pub const XTHAL_LAM_ISOLATE: u32 = 18;
pub const XTHAL_LAM_BYPASS: u32 = 0;
pub const XTHAL_LAM_BYPASSG: u32 = 32;
pub const XTHAL_LAM_CACHED_NOALLOC: u32 = 2;
pub const XTHAL_LAM_NACACHED: u32 = 2;
pub const XTHAL_LAM_NACACHEDG: u32 = 34;
pub const XTHAL_LAM_CACHED: u32 = 6;
pub const XTHAL_LAM_COHCACHED: u32 = 70;
pub const XTHAL_SAM_EXCEPTION: u32 = 1;
pub const XTHAL_SAM_ISOLATE: u32 = 50;
pub const XTHAL_SAM_BYPASS: u32 = 40;
pub const XTHAL_SAM_WRITETHRU: u32 = 42;
pub const XTHAL_SAM_WRITEBACK: u32 = 38;
pub const XTHAL_SAM_WRITEBACK_NOALLOC: u32 = 34;
pub const XTHAL_SAM_COHWRITEBACK: u32 = 102;
pub const XTHAL_PAM_BYPASS: u32 = 0;
pub const XTHAL_PAM_BYPASS_BUF: u32 = 16;
pub const XTHAL_PAM_CACHED_NOALLOC: u32 = 48;
pub const XTHAL_PAM_WRITETHRU: u32 = 176;
pub const XTHAL_PAM_WRITEBACK_NOALLOC: u32 = 240;
pub const XTHAL_PAM_WRITEBACK: u32 = 496;
pub const XTHAL_CAFLAG_EXPAND: u32 = 256;
pub const XTHAL_CAFLAG_EXACT: u32 = 512;
pub const XTHAL_CAFLAG_NO_PARTIAL: u32 = 1024;
pub const XTHAL_CAFLAG_NO_AUTO_WB: u32 = 2048;
pub const XTHAL_CAFLAG_NO_AUTO_INV: u32 = 4096;
pub const XTHAL_SUCCESS: u32 = 0;
pub const XTHAL_NO_REGIONS_COVERED: i32 = -1;
pub const XTHAL_INEXACT: i32 = -2;
pub const XTHAL_INVALID_ADDRESS: i32 = -3;
pub const XTHAL_UNSUPPORTED: i32 = -4;
pub const XTHAL_ADDRESS_MISALIGNED: i32 = -5;
pub const XTHAL_NO_MAPPING: i32 = -6;
pub const XTHAL_BAD_ACCESS_RIGHTS: i32 = -7;
pub const XTHAL_BAD_MEMORY_TYPE: i32 = -8;
pub const XTHAL_MAP_NOT_ALIGNED: i32 = -9;
pub const XTHAL_OUT_OF_ENTRIES: i32 = -10;
pub const XTHAL_OUT_OF_ORDER_MAP: i32 = -11;
pub const XTHAL_INVALID: i32 = -12;
pub const XTHAL_ZERO_SIZED_REGION: i32 = -13;
pub const XTHAL_INVALID_ADDRESS_RANGE: i32 = -14;
pub const XCHAL_SUCCESS: u32 = 0;
pub const XCHAL_ADDRESS_MISALIGNED: i32 = -5;
pub const XCHAL_INEXACT: i32 = -2;
pub const XCHAL_INVALID_ADDRESS: i32 = -3;
pub const XCHAL_UNSUPPORTED_ON_THIS_ARCH: i32 = -4;
pub const XCHAL_NO_PAGES_MAPPED: i32 = -1;
pub const XTHAL_AR_NONE: u32 = 0;
pub const XTHAL_AR_R: u32 = 4;
pub const XTHAL_AR_RX: u32 = 5;
pub const XTHAL_AR_RW: u32 = 6;
pub const XTHAL_AR_RWX: u32 = 7;
pub const XTHAL_AR_Ww: u32 = 8;
pub const XTHAL_AR_RWrwx: u32 = 9;
pub const XTHAL_AR_RWr: u32 = 10;
pub const XTHAL_AR_RWXrx: u32 = 11;
pub const XTHAL_AR_Rr: u32 = 12;
pub const XTHAL_AR_RXrx: u32 = 13;
pub const XTHAL_AR_RWrw: u32 = 14;
pub const XTHAL_AR_RWXrwx: u32 = 15;
pub const XTHAL_AR_WIDTH: u32 = 4;
pub const XTHAL_MPU_USE_EXISTING_ACCESS_RIGHTS: u32 = 8192;
pub const XTHAL_MPU_USE_EXISTING_MEMORY_TYPE: u32 = 16384;
pub const XTHAL_MEM_DEVICE: u32 = 32768;
pub const XTHAL_MEM_NON_CACHEABLE: u32 = 589824;
pub const XTHAL_MEM_WRITETHRU_NOALLOC: u32 = 524288;
pub const XTHAL_MEM_WRITETHRU: u32 = 262144;
pub const XTHAL_MEM_WRITETHRU_WRITEALLOC: u32 = 393216;
pub const XTHAL_MEM_WRITEBACK_NOALLOC: u32 = 327680;
pub const XTHAL_MEM_WRITEBACK: u32 = 458752;
pub const XTHAL_MEM_INTERRUPTIBLE: u32 = 134217728;
pub const XTHAL_MEM_BUFFERABLE: u32 = 16777216;
pub const XTHAL_MEM_NON_SHAREABLE: u32 = 0;
pub const XTHAL_MEM_INNER_SHAREABLE: u32 = 33554432;
pub const XTHAL_MEM_OUTER_SHAREABLE: u32 = 67108864;
pub const XTHAL_MEM_SYSTEM_SHAREABLE: u32 = 100663296;
pub const _XTHAL_SYSTEM_CACHE_BITS: u32 = 983040;
pub const _XTHAL_LOCAL_CACHE_BITS: u32 = 15728640;
pub const _XTHAL_MEM_SYSTEM_RWC_MASK: u32 = 458752;
pub const _XTHAL_MEM_LOCAL_RWC_MASK: u32 = 7340032;
pub const _XTHAL_SHIFT_RWC: u32 = 16;
pub const XTHAL_MEM_NON_CACHED: u32 = 589824;
pub const XTHAL_MEM_NON_SHARED: u32 = 0;
pub const XTHAL_MEM_INNER_SHARED: u32 = 33554432;
pub const XTHAL_MEM_OUTER_SHARED: u32 = 67108864;
pub const XTHAL_MEM_SYSTEM_SHARED: u32 = 100663296;
pub const XTHAL_MEM_SW_SHAREABLE: u32 = 0;
pub const XTENSA_HWVERSION_T1020_0: u32 = 102000;
pub const XTENSA_HWCIDSCHEME_T1020_0: u32 = 10;
pub const XTENSA_HWCIDVERS_T1020_0: u32 = 2;
pub const XTENSA_HWVERSION_T1020_1: u32 = 102001;
pub const XTENSA_HWCIDSCHEME_T1020_1: u32 = 10;
pub const XTENSA_HWCIDVERS_T1020_1: u32 = 3;
pub const XTENSA_HWVERSION_T1020_2: u32 = 102002;
pub const XTENSA_HWCIDSCHEME_T1020_2: u32 = 10;
pub const XTENSA_HWCIDVERS_T1020_2: u32 = 4;
pub const XTENSA_HWVERSION_T1020_2B: u32 = 102002;
pub const XTENSA_HWCIDSCHEME_T1020_2B: u32 = 10;
pub const XTENSA_HWCIDVERS_T1020_2B: u32 = 5;
pub const XTENSA_HWVERSION_T1020_3: u32 = 102003;
pub const XTENSA_HWCIDSCHEME_T1020_3: u32 = 10;
pub const XTENSA_HWCIDVERS_T1020_3: u32 = 6;
pub const XTENSA_HWVERSION_T1020_4: u32 = 102004;
pub const XTENSA_HWCIDSCHEME_T1020_4: u32 = 10;
pub const XTENSA_HWCIDVERS_T1020_4: u32 = 7;
pub const XTENSA_HWVERSION_T1030_0: u32 = 103000;
pub const XTENSA_HWCIDSCHEME_T1030_0: u32 = 10;
pub const XTENSA_HWCIDVERS_T1030_0: u32 = 9;
pub const XTENSA_HWVERSION_T1030_1: u32 = 103001;
pub const XTENSA_HWCIDSCHEME_T1030_1: u32 = 10;
pub const XTENSA_HWCIDVERS_T1030_1: u32 = 10;
pub const XTENSA_HWVERSION_T1030_2: u32 = 103002;
pub const XTENSA_HWCIDSCHEME_T1030_2: u32 = 10;
pub const XTENSA_HWCIDVERS_T1030_2: u32 = 11;
pub const XTENSA_HWVERSION_T1030_3: u32 = 103003;
pub const XTENSA_HWCIDSCHEME_T1030_3: u32 = 10;
pub const XTENSA_HWCIDVERS_T1030_3: u32 = 12;
pub const XTENSA_HWVERSION_T1040_0: u32 = 104000;
pub const XTENSA_HWCIDSCHEME_T1040_0: u32 = 10;
pub const XTENSA_HWCIDVERS_T1040_0: u32 = 15;
pub const XTENSA_HWVERSION_T1040_1: u32 = 104001;
pub const XTENSA_HWCIDSCHEME_T1040_1: u32 = 1;
pub const XTENSA_HWCIDVERS_T1040_1: u32 = 32;
pub const XTENSA_HWVERSION_T1040_1P: u32 = 104001;
pub const XTENSA_HWCIDSCHEME_T1040_1P: u32 = 10;
pub const XTENSA_HWCIDVERS_T1040_1P: u32 = 16;
pub const XTENSA_HWVERSION_T1040_2: u32 = 104002;
pub const XTENSA_HWCIDSCHEME_T1040_2: u32 = 1;
pub const XTENSA_HWCIDVERS_T1040_2: u32 = 33;
pub const XTENSA_HWVERSION_T1040_3: u32 = 104003;
pub const XTENSA_HWCIDSCHEME_T1040_3: u32 = 1;
pub const XTENSA_HWCIDVERS_T1040_3: u32 = 34;
pub const XTENSA_HWVERSION_T1050_0: u32 = 105000;
pub const XTENSA_HWCIDSCHEME_T1050_0: u32 = 1100;
pub const XTENSA_HWCIDVERS_T1050_0: u32 = 1;
pub const XTENSA_HWVERSION_T1050_1: u32 = 105001;
pub const XTENSA_HWCIDSCHEME_T1050_1: u32 = 1100;
pub const XTENSA_HWCIDVERS_T1050_1: u32 = 2;
pub const XTENSA_HWVERSION_T1050_2: u32 = 105002;
pub const XTENSA_HWCIDSCHEME_T1050_2: u32 = 1100;
pub const XTENSA_HWCIDVERS_T1050_2: u32 = 4;
pub const XTENSA_HWVERSION_T1050_3: u32 = 105003;
pub const XTENSA_HWCIDSCHEME_T1050_3: u32 = 1100;
pub const XTENSA_HWCIDVERS_T1050_3: u32 = 6;
pub const XTENSA_HWVERSION_T1050_4: u32 = 105004;
pub const XTENSA_HWCIDSCHEME_T1050_4: u32 = 1100;
pub const XTENSA_HWCIDVERS_T1050_4: u32 = 7;
pub const XTENSA_HWVERSION_T1050_5: u32 = 105005;
pub const XTENSA_HWCIDSCHEME_T1050_5: u32 = 1100;
pub const XTENSA_HWCIDVERS_T1050_5: u32 = 8;
pub const XTENSA_HWVERSION_RA_2004_1: u32 = 210000;
pub const XTENSA_HWCIDSCHEME_RA_2004_1: u32 = 1100;
pub const XTENSA_HWCIDVERS_RA_2004_1: u32 = 3;
pub const XTENSA_HWVERSION_RA_2005_1: u32 = 210001;
pub const XTENSA_HWCIDSCHEME_RA_2005_1: u32 = 1100;
pub const XTENSA_HWCIDVERS_RA_2005_1: u32 = 20;
pub const XTENSA_HWVERSION_RA_2005_2: u32 = 210002;
pub const XTENSA_HWCIDSCHEME_RA_2005_2: u32 = 1100;
pub const XTENSA_HWCIDVERS_RA_2005_2: u32 = 21;
pub const XTENSA_HWVERSION_RA_2005_3: u32 = 210003;
pub const XTENSA_HWCIDSCHEME_RA_2005_3: u32 = 1100;
pub const XTENSA_HWCIDVERS_RA_2005_3: u32 = 22;
pub const XTENSA_HWVERSION_RA_2006_4: u32 = 210004;
pub const XTENSA_HWCIDSCHEME_RA_2006_4: u32 = 1100;
pub const XTENSA_HWCIDVERS_RA_2006_4: u32 = 23;
pub const XTENSA_HWVERSION_RA_2006_5: u32 = 210005;
pub const XTENSA_HWCIDSCHEME_RA_2006_5: u32 = 1100;
pub const XTENSA_HWCIDVERS_RA_2006_5: u32 = 24;
pub const XTENSA_HWVERSION_RA_2006_6: u32 = 210006;
pub const XTENSA_HWCIDSCHEME_RA_2006_6: u32 = 1100;
pub const XTENSA_HWCIDVERS_RA_2006_6: u32 = 25;
pub const XTENSA_HWVERSION_RA_2007_7: u32 = 210007;
pub const XTENSA_HWCIDSCHEME_RA_2007_7: u32 = 1100;
pub const XTENSA_HWCIDVERS_RA_2007_7: u32 = 26;
pub const XTENSA_HWVERSION_RA_2008_8: u32 = 210008;
pub const XTENSA_HWCIDSCHEME_RA_2008_8: u32 = 1100;
pub const XTENSA_HWCIDVERS_RA_2008_8: u32 = 27;
pub const XTENSA_HWVERSION_RB_2006_0: u32 = 220000;
pub const XTENSA_HWCIDSCHEME_RB_2006_0: u32 = 1100;
pub const XTENSA_HWCIDVERS_RB_2006_0: u32 = 48;
pub const XTENSA_HWVERSION_RB_2007_1: u32 = 220001;
pub const XTENSA_HWCIDSCHEME_RB_2007_1: u32 = 1100;
pub const XTENSA_HWCIDVERS_RB_2007_1: u32 = 49;
pub const XTENSA_HWVERSION_RB_2007_2: u32 = 221000;
pub const XTENSA_HWCIDSCHEME_RB_2007_2: u32 = 1100;
pub const XTENSA_HWCIDVERS_RB_2007_2: u32 = 52;
pub const XTENSA_HWVERSION_RB_2008_3: u32 = 221001;
pub const XTENSA_HWCIDSCHEME_RB_2008_3: u32 = 1100;
pub const XTENSA_HWCIDVERS_RB_2008_3: u32 = 53;
pub const XTENSA_HWVERSION_RB_2008_4: u32 = 221002;
pub const XTENSA_HWCIDSCHEME_RB_2008_4: u32 = 1100;
pub const XTENSA_HWCIDVERS_RB_2008_4: u32 = 54;
pub const XTENSA_HWVERSION_RB_2009_5: u32 = 221003;
pub const XTENSA_HWCIDSCHEME_RB_2009_5: u32 = 1100;
pub const XTENSA_HWCIDVERS_RB_2009_5: u32 = 55;
pub const XTENSA_HWVERSION_RB_2007_2_MP: u32 = 221100;
pub const XTENSA_HWCIDSCHEME_RB_2007_2_MP: u32 = 1100;
pub const XTENSA_HWCIDVERS_RB_2007_2_MP: u32 = 64;
pub const XTENSA_HWVERSION_RC_2009_0: u32 = 230000;
pub const XTENSA_HWCIDSCHEME_RC_2009_0: u32 = 1100;
pub const XTENSA_HWCIDVERS_RC_2009_0: u32 = 65;
pub const XTENSA_HWVERSION_RC_2010_1: u32 = 230001;
pub const XTENSA_HWCIDSCHEME_RC_2010_1: u32 = 1100;
pub const XTENSA_HWCIDVERS_RC_2010_1: u32 = 66;
pub const XTENSA_HWVERSION_RC_2010_2: u32 = 230002;
pub const XTENSA_HWCIDSCHEME_RC_2010_2: u32 = 1100;
pub const XTENSA_HWCIDVERS_RC_2010_2: u32 = 67;
pub const XTENSA_HWVERSION_RC_2011_3: u32 = 230003;
pub const XTENSA_HWCIDSCHEME_RC_2011_3: u32 = 1100;
pub const XTENSA_HWCIDVERS_RC_2011_3: u32 = 68;
pub const XTENSA_HWVERSION_RD_2010_0: u32 = 240000;
pub const XTENSA_HWCIDSCHEME_RD_2010_0: u32 = 1100;
pub const XTENSA_HWCIDVERS_RD_2010_0: u32 = 80;
pub const XTENSA_HWVERSION_RD_2011_1: u32 = 240001;
pub const XTENSA_HWCIDSCHEME_RD_2011_1: u32 = 1100;
pub const XTENSA_HWCIDVERS_RD_2011_1: u32 = 81;
pub const XTENSA_HWVERSION_RD_2011_2: u32 = 240002;
pub const XTENSA_HWCIDSCHEME_RD_2011_2: u32 = 1100;
pub const XTENSA_HWCIDVERS_RD_2011_2: u32 = 82;
pub const XTENSA_HWVERSION_RD_2011_3: u32 = 240003;
pub const XTENSA_HWCIDSCHEME_RD_2011_3: u32 = 1100;
pub const XTENSA_HWCIDVERS_RD_2011_3: u32 = 83;
pub const XTENSA_HWVERSION_RD_2012_4: u32 = 240004;
pub const XTENSA_HWCIDSCHEME_RD_2012_4: u32 = 1100;
pub const XTENSA_HWCIDVERS_RD_2012_4: u32 = 84;
pub const XTENSA_HWVERSION_RD_2012_5: u32 = 240005;
pub const XTENSA_HWCIDSCHEME_RD_2012_5: u32 = 1100;
pub const XTENSA_HWCIDVERS_RD_2012_5: u32 = 85;
pub const XTENSA_HWVERSION_RE_2012_0: u32 = 250000;
pub const XTENSA_HWCIDSCHEME_RE_2012_0: u32 = 1100;
pub const XTENSA_HWCIDVERS_RE_2012_0: u32 = 96;
pub const XTENSA_HWVERSION_RE_2012_1: u32 = 250001;
pub const XTENSA_HWCIDSCHEME_RE_2012_1: u32 = 1100;
pub const XTENSA_HWCIDVERS_RE_2012_1: u32 = 97;
pub const XTENSA_HWVERSION_RE_2013_2: u32 = 250002;
pub const XTENSA_HWCIDSCHEME_RE_2013_2: u32 = 1100;
pub const XTENSA_HWCIDVERS_RE_2013_2: u32 = 98;
pub const XTENSA_HWVERSION_RE_2013_3: u32 = 250003;
pub const XTENSA_HWCIDSCHEME_RE_2013_3: u32 = 1100;
pub const XTENSA_HWCIDVERS_RE_2013_3: u32 = 99;
pub const XTENSA_HWVERSION_RE_2013_4: u32 = 250004;
pub const XTENSA_HWCIDSCHEME_RE_2013_4: u32 = 1100;
pub const XTENSA_HWCIDVERS_RE_2013_4: u32 = 100;
pub const XTENSA_HWVERSION_RE_2014_5: u32 = 250005;
pub const XTENSA_HWCIDSCHEME_RE_2014_5: u32 = 1100;
pub const XTENSA_HWCIDVERS_RE_2014_5: u32 = 101;
pub const XTENSA_HWVERSION_RE_2015_6: u32 = 250006;
pub const XTENSA_HWCIDSCHEME_RE_2015_6: u32 = 1100;
pub const XTENSA_HWCIDVERS_RE_2015_6: u32 = 102;
pub const XTENSA_HWVERSION_RF_2014_0: u32 = 260000;
pub const XTENSA_HWCIDSCHEME_RF_2014_0: u32 = 1100;
pub const XTENSA_HWCIDVERS_RF_2014_0: u32 = 112;
pub const XTENSA_HWVERSION_RF_2014_1: u32 = 260001;
pub const XTENSA_HWCIDSCHEME_RF_2014_1: u32 = 1100;
pub const XTENSA_HWCIDVERS_RF_2014_1: u32 = 113;
pub const XTENSA_HWVERSION_RF_2015_2: u32 = 260002;
pub const XTENSA_HWCIDSCHEME_RF_2015_2: u32 = 1100;
pub const XTENSA_HWCIDVERS_RF_2015_2: u32 = 114;
pub const XTENSA_HWVERSION_RF_2015_3: u32 = 260003;
pub const XTENSA_HWCIDSCHEME_RF_2015_3: u32 = 1100;
pub const XTENSA_HWCIDVERS_RF_2015_3: u32 = 115;
pub const XTENSA_HWVERSION_RF_2016_4: u32 = 260004;
pub const XTENSA_HWCIDSCHEME_RF_2016_4: u32 = 1100;
pub const XTENSA_HWCIDVERS_RF_2016_4: u32 = 116;
pub const XTENSA_HWVERSION_RG_2015_0: u32 = 270000;
pub const XTENSA_HWCIDSCHEME_RG_2015_0: u32 = 1100;
pub const XTENSA_HWCIDVERS_RG_2015_0: u32 = 128;
pub const XTENSA_HWVERSION_RG_2015_1: u32 = 270001;
pub const XTENSA_HWCIDSCHEME_RG_2015_1: u32 = 1100;
pub const XTENSA_HWCIDVERS_RG_2015_1: u32 = 129;
pub const XTENSA_HWVERSION_RG_2015_2: u32 = 270002;
pub const XTENSA_HWCIDSCHEME_RG_2015_2: u32 = 1100;
pub const XTENSA_HWCIDVERS_RG_2015_2: u32 = 130;
pub const XTENSA_HWVERSION_RG_2016_3: u32 = 270003;
pub const XTENSA_HWCIDSCHEME_RG_2016_3: u32 = 1100;
pub const XTENSA_HWCIDVERS_RG_2016_3: u32 = 131;
pub const XTENSA_HWVERSION_RG_2016_4: u32 = 270004;
pub const XTENSA_HWCIDSCHEME_RG_2016_4: u32 = 1100;
pub const XTENSA_HWCIDVERS_RG_2016_4: u32 = 132;
pub const XTENSA_HWVERSION_RG_2017_5: u32 = 270005;
pub const XTENSA_HWCIDSCHEME_RG_2017_5: u32 = 1100;
pub const XTENSA_HWCIDVERS_RG_2017_5: u32 = 133;
pub const XTENSA_HWVERSION_RG_2017_6: u32 = 270006;
pub const XTENSA_HWCIDSCHEME_RG_2017_6: u32 = 1100;
pub const XTENSA_HWCIDVERS_RG_2017_6: u32 = 134;
pub const XTENSA_HWVERSION_RG_2017_7: u32 = 270007;
pub const XTENSA_HWCIDSCHEME_RG_2017_7: u32 = 1100;
pub const XTENSA_HWCIDVERS_RG_2017_7: u32 = 135;
pub const XTENSA_HWVERSION_RG_2017_8: u32 = 270008;
pub const XTENSA_HWCIDSCHEME_RG_2017_8: u32 = 1100;
pub const XTENSA_HWCIDVERS_RG_2017_8: u32 = 136;
pub const XTENSA_HWVERSION_RG_2018_9: u32 = 270009;
pub const XTENSA_HWCIDSCHEME_RG_2018_9: u32 = 1100;
pub const XTENSA_HWCIDVERS_RG_2018_9: u32 = 137;
pub const XTENSA_HWVERSION_RH_2016_0: u32 = 280000;
pub const XTENSA_HWCIDSCHEME_RH_2016_0: u32 = 1100;
pub const XTENSA_HWCIDVERS_RH_2016_0: u32 = 144;
pub const XTENSA_SWVERSION_T1020_0: u32 = 102000;
pub const XTENSA_SWVERSION_T1020_1: u32 = 102001;
pub const XTENSA_SWVERSION_T1020_2: u32 = 102002;
pub const XTENSA_SWVERSION_T1020_2B: u32 = 102002;
pub const XTENSA_SWVERSION_T1020_3: u32 = 102003;
pub const XTENSA_SWVERSION_T1020_4: u32 = 102004;
pub const XTENSA_SWVERSION_T1030_0: u32 = 103000;
pub const XTENSA_SWVERSION_T1030_1: u32 = 103001;
pub const XTENSA_SWVERSION_T1030_2: u32 = 103002;
pub const XTENSA_SWVERSION_T1030_3: u32 = 103003;
pub const XTENSA_SWVERSION_T1040_0: u32 = 104000;
pub const XTENSA_SWVERSION_T1040_1: u32 = 104001;
pub const XTENSA_SWVERSION_T1040_1P: u32 = 104001;
pub const XTENSA_SWVERSION_T1040_2: u32 = 104002;
pub const XTENSA_SWVERSION_T1040_3: u32 = 104003;
pub const XTENSA_SWVERSION_T1050_0: u32 = 105000;
pub const XTENSA_SWVERSION_T1050_1: u32 = 105001;
pub const XTENSA_SWVERSION_T1050_2: u32 = 105002;
pub const XTENSA_SWVERSION_T1050_3: u32 = 105003;
pub const XTENSA_SWVERSION_T1050_4: u32 = 105004;
pub const XTENSA_SWVERSION_T1050_5: u32 = 105005;
pub const XTENSA_SWVERSION_RA_2004_1: u32 = 600000;
pub const XTENSA_SWVERSION_RA_2005_1: u32 = 600001;
pub const XTENSA_SWVERSION_RA_2005_2: u32 = 600002;
pub const XTENSA_SWVERSION_RA_2005_3: u32 = 600003;
pub const XTENSA_SWVERSION_RA_2006_4: u32 = 600004;
pub const XTENSA_SWVERSION_RA_2006_5: u32 = 600005;
pub const XTENSA_SWVERSION_RA_2006_6: u32 = 600006;
pub const XTENSA_SWVERSION_RA_2007_7: u32 = 600007;
pub const XTENSA_SWVERSION_RA_2008_8: u32 = 600008;
pub const XTENSA_SWVERSION_RB_2006_0: u32 = 700000;
pub const XTENSA_SWVERSION_RB_2007_1: u32 = 700001;
pub const XTENSA_SWVERSION_RB_2007_2: u32 = 701000;
pub const XTENSA_SWVERSION_RB_2008_3: u32 = 701001;
pub const XTENSA_SWVERSION_RB_2008_4: u32 = 701002;
pub const XTENSA_SWVERSION_RB_2009_5: u32 = 701003;
pub const XTENSA_SWVERSION_RB_2007_2_MP: u32 = 701100;
pub const XTENSA_SWVERSION_RC_2009_0: u32 = 800000;
pub const XTENSA_SWVERSION_RC_2010_1: u32 = 800001;
pub const XTENSA_SWVERSION_RC_2010_2: u32 = 800002;
pub const XTENSA_SWVERSION_RC_2011_3: u32 = 800003;
pub const XTENSA_SWVERSION_RD_2010_0: u32 = 900000;
pub const XTENSA_SWVERSION_RD_2011_1: u32 = 900001;
pub const XTENSA_SWVERSION_RD_2011_2: u32 = 900002;
pub const XTENSA_SWVERSION_RD_2011_3: u32 = 900003;
pub const XTENSA_SWVERSION_RD_2012_4: u32 = 900004;
pub const XTENSA_SWVERSION_RD_2012_5: u32 = 900005;
pub const XTENSA_SWVERSION_RE_2012_0: u32 = 1000000;
pub const XTENSA_SWVERSION_RE_2012_1: u32 = 1000001;
pub const XTENSA_SWVERSION_RE_2013_2: u32 = 1000002;
pub const XTENSA_SWVERSION_RE_2013_3: u32 = 1000003;
pub const XTENSA_SWVERSION_RE_2013_4: u32 = 1000004;
pub const XTENSA_SWVERSION_RE_2014_5: u32 = 1000005;
pub const XTENSA_SWVERSION_RE_2015_6: u32 = 1000006;
pub const XTENSA_SWVERSION_RF_2014_0: u32 = 1100000;
pub const XTENSA_SWVERSION_RF_2014_1: u32 = 1100001;
pub const XTENSA_SWVERSION_RF_2015_2: u32 = 1100002;
pub const XTENSA_SWVERSION_RF_2015_3: u32 = 1100003;
pub const XTENSA_SWVERSION_RF_2016_4: u32 = 1100004;
pub const XTENSA_SWVERSION_RG_2015_0: u32 = 1200000;
pub const XTENSA_SWVERSION_RG_2015_1: u32 = 1200001;
pub const XTENSA_SWVERSION_RG_2015_2: u32 = 1200002;
pub const XTENSA_SWVERSION_RG_2016_3: u32 = 1200003;
pub const XTENSA_SWVERSION_RG_2016_4: u32 = 1200004;
pub const XTENSA_SWVERSION_RG_2017_5: u32 = 1200005;
pub const XTENSA_SWVERSION_RG_2017_6: u32 = 1200006;
pub const XTENSA_SWVERSION_RG_2017_7: u32 = 1200007;
pub const XTENSA_SWVERSION_RG_2017_8: u32 = 1200008;
pub const XTENSA_SWVERSION_RG_2018_9: u32 = 1200009;
pub const XTENSA_SWVERSION_RH_2016_0: u32 = 1300000;
pub const XTENSA_SWVERSION_T1040_1_PREHOTFIX: u32 = 104001;
pub const XTENSA_SWVERSION_6_0_0: u32 = 600000;
pub const XTENSA_SWVERSION_6_0_1: u32 = 600001;
pub const XTENSA_SWVERSION_6_0_2: u32 = 600002;
pub const XTENSA_SWVERSION_6_0_3: u32 = 600003;
pub const XTENSA_SWVERSION_6_0_4: u32 = 600004;
pub const XTENSA_SWVERSION_6_0_5: u32 = 600005;
pub const XTENSA_SWVERSION_6_0_6: u32 = 600006;
pub const XTENSA_SWVERSION_6_0_7: u32 = 600007;
pub const XTENSA_SWVERSION_6_0_8: u32 = 600008;
pub const XTENSA_SWVERSION_7_0_0: u32 = 700000;
pub const XTENSA_SWVERSION_7_0_1: u32 = 700001;
pub const XTENSA_SWVERSION_7_1_0: u32 = 701000;
pub const XTENSA_SWVERSION_7_1_1: u32 = 701001;
pub const XTENSA_SWVERSION_7_1_2: u32 = 701002;
pub const XTENSA_SWVERSION_7_1_3: u32 = 701003;
pub const XTENSA_SWVERSION_7_1_8_MP: u32 = 701100;
pub const XTENSA_SWVERSION_8_0_0: u32 = 800000;
pub const XTENSA_SWVERSION_8_0_1: u32 = 800001;
pub const XTENSA_SWVERSION_8_0_2: u32 = 800002;
pub const XTENSA_SWVERSION_8_0_3: u32 = 800003;
pub const XTENSA_SWVERSION_9_0_0: u32 = 900000;
pub const XTENSA_SWVERSION_9_0_1: u32 = 900001;
pub const XTENSA_SWVERSION_9_0_2: u32 = 900002;
pub const XTENSA_SWVERSION_9_0_3: u32 = 900003;
pub const XTENSA_SWVERSION_9_0_4: u32 = 900004;
pub const XTENSA_SWVERSION_9_0_5: u32 = 900005;
pub const XTENSA_SWVERSION_10_0_0: u32 = 1000000;
pub const XTENSA_SWVERSION_10_0_1: u32 = 1000001;
pub const XTENSA_SWVERSION_10_0_2: u32 = 1000002;
pub const XTENSA_SWVERSION_10_0_3: u32 = 1000003;
pub const XTENSA_SWVERSION_10_0_4: u32 = 1000004;
pub const XTENSA_SWVERSION_10_0_5: u32 = 1000005;
pub const XTENSA_SWVERSION_10_0_6: u32 = 1000006;
pub const XTENSA_SWVERSION_11_0_0: u32 = 1100000;
pub const XTENSA_SWVERSION_11_0_1: u32 = 1100001;
pub const XTENSA_SWVERSION_11_0_2: u32 = 1100002;
pub const XTENSA_SWVERSION_11_0_3: u32 = 1100003;
pub const XTENSA_SWVERSION_11_0_4: u32 = 1100004;
pub const XTENSA_SWVERSION_12_0_0: u32 = 1200000;
pub const XTENSA_SWVERSION_12_0_1: u32 = 1200001;
pub const XTENSA_SWVERSION_12_0_2: u32 = 1200002;
pub const XTENSA_SWVERSION_12_0_3: u32 = 1200003;
pub const XTENSA_SWVERSION_12_0_4: u32 = 1200004;
pub const XTENSA_SWVERSION_12_0_5: u32 = 1200005;
pub const XTENSA_SWVERSION_12_0_6: u32 = 1200006;
pub const XTENSA_SWVERSION_12_0_7: u32 = 1200007;
pub const XTENSA_SWVERSION_12_0_8: u32 = 1200008;
pub const XTENSA_SWVERSION_12_0_9: u32 = 1200009;
pub const XTENSA_SWVERSION_13_0_0: u32 = 1300000;
pub const XTENSA_RELEASE_NAME: &'static [u8; 10usize] = b"RG-2018.9\0";
pub const XTENSA_RELEASE_CANONICAL_NAME: &'static [u8; 10usize] = b"RG-2018.9\0";
pub const XTENSA_SWVERSION: u32 = 1200009;
pub const XTENSA_SWVERSION_NAME: &'static [u8; 7usize] = b"12.0.9\0";
pub const XTENSA_SWVERSION_CANONICAL_NAME: &'static [u8; 7usize] = b"12.0.9\0";
pub const XTENSA_SWVERSION_MAJORMID_NAME: &'static [u8; 5usize] = b"12.0\0";
pub const XTENSA_SWVERSION_MAJOR_NAME: &'static [u8; 3usize] = b"12\0";
pub const XTENSA_SWVERSION_LICENSE_NAME: &'static [u8; 5usize] = b"12.0\0";
pub const XCHAL_HAVE_BE: u32 = 0;
pub const XCHAL_HAVE_WINDOWED: u32 = 1;
pub const XCHAL_NUM_AREGS: u32 = 64;
pub const XCHAL_NUM_AREGS_LOG2: u32 = 6;
pub const XCHAL_MAX_INSTRUCTION_SIZE: u32 = 3;
pub const XCHAL_HAVE_DEBUG: u32 = 1;
pub const XCHAL_HAVE_DENSITY: u32 = 1;
pub const XCHAL_HAVE_LOOPS: u32 = 1;
pub const XCHAL_LOOP_BUFFER_SIZE: u32 = 256;
pub const XCHAL_HAVE_NSA: u32 = 1;
pub const XCHAL_HAVE_MINMAX: u32 = 1;
pub const XCHAL_HAVE_SEXT: u32 = 1;
pub const XCHAL_HAVE_DEPBITS: u32 = 0;
pub const XCHAL_HAVE_CLAMPS: u32 = 1;
pub const XCHAL_HAVE_MUL16: u32 = 1;
pub const XCHAL_HAVE_MUL32: u32 = 1;
pub const XCHAL_HAVE_MUL32_HIGH: u32 = 1;
pub const XCHAL_HAVE_DIV32: u32 = 1;
pub const XCHAL_HAVE_L32R: u32 = 1;
pub const XCHAL_HAVE_ABSOLUTE_LITERALS: u32 = 0;
pub const XCHAL_HAVE_CONST16: u32 = 0;
pub const XCHAL_HAVE_ADDX: u32 = 1;
pub const XCHAL_HAVE_WIDE_BRANCHES: u32 = 0;
pub const XCHAL_HAVE_PREDICTED_BRANCHES: u32 = 0;
pub const XCHAL_HAVE_CALL4AND12: u32 = 1;
pub const XCHAL_HAVE_ABS: u32 = 1;
pub const XCHAL_HAVE_RELEASE_SYNC: u32 = 1;
pub const XCHAL_HAVE_S32C1I: u32 = 1;
pub const XCHAL_HAVE_SPECULATION: u32 = 0;
pub const XCHAL_HAVE_FULL_RESET: u32 = 1;
pub const XCHAL_NUM_CONTEXTS: u32 = 1;
pub const XCHAL_NUM_MISC_REGS: u32 = 4;
pub const XCHAL_HAVE_TAP_MASTER: u32 = 0;
pub const XCHAL_HAVE_PRID: u32 = 1;
pub const XCHAL_HAVE_EXTERN_REGS: u32 = 1;
pub const XCHAL_HAVE_MX: u32 = 0;
pub const XCHAL_HAVE_MP_INTERRUPTS: u32 = 0;
pub const XCHAL_HAVE_MP_RUNSTALL: u32 = 0;
pub const XCHAL_HAVE_PSO: u32 = 0;
pub const XCHAL_HAVE_PSO_CDM: u32 = 0;
pub const XCHAL_HAVE_PSO_FULL_RETENTION: u32 = 0;
pub const XCHAL_HAVE_THREADPTR: u32 = 1;
pub const XCHAL_HAVE_BOOLEANS: u32 = 1;
pub const XCHAL_HAVE_CP: u32 = 1;
pub const XCHAL_CP_MAXCFG: u32 = 8;
pub const XCHAL_HAVE_MAC16: u32 = 1;
pub const XCHAL_HAVE_FUSION: u32 = 0;
pub const XCHAL_HAVE_FUSION_FP: u32 = 0;
pub const XCHAL_HAVE_FUSION_LOW_POWER: u32 = 0;
pub const XCHAL_HAVE_FUSION_AES: u32 = 0;
pub const XCHAL_HAVE_FUSION_CONVENC: u32 = 0;
pub const XCHAL_HAVE_FUSION_LFSR_CRC: u32 = 0;
pub const XCHAL_HAVE_FUSION_BITOPS: u32 = 0;
pub const XCHAL_HAVE_FUSION_AVS: u32 = 0;
pub const XCHAL_HAVE_FUSION_16BIT_BASEBAND: u32 = 0;
pub const XCHAL_HAVE_FUSION_VITERBI: u32 = 0;
pub const XCHAL_HAVE_FUSION_SOFTDEMAP: u32 = 0;
pub const XCHAL_HAVE_HIFIPRO: u32 = 0;
pub const XCHAL_HAVE_HIFI4: u32 = 0;
pub const XCHAL_HAVE_HIFI4_VFPU: u32 = 0;
pub const XCHAL_HAVE_HIFI3: u32 = 0;
pub const XCHAL_HAVE_HIFI3_VFPU: u32 = 0;
pub const XCHAL_HAVE_HIFI2: u32 = 0;
pub const XCHAL_HAVE_HIFI2EP: u32 = 0;
pub const XCHAL_HAVE_HIFI_MINI: u32 = 0;
pub const XCHAL_HAVE_VECTORFPU2005: u32 = 0;
pub const XCHAL_HAVE_USER_DPFPU: u32 = 0;
pub const XCHAL_HAVE_USER_SPFPU: u32 = 0;
pub const XCHAL_HAVE_FP: u32 = 1;
pub const XCHAL_HAVE_FP_DIV: u32 = 1;
pub const XCHAL_HAVE_FP_RECIP: u32 = 1;
pub const XCHAL_HAVE_FP_SQRT: u32 = 1;
pub const XCHAL_HAVE_FP_RSQRT: u32 = 1;
pub const XCHAL_HAVE_DFP: u32 = 0;
pub const XCHAL_HAVE_DFP_DIV: u32 = 0;
pub const XCHAL_HAVE_DFP_RECIP: u32 = 0;
pub const XCHAL_HAVE_DFP_SQRT: u32 = 0;
pub const XCHAL_HAVE_DFP_RSQRT: u32 = 0;
pub const XCHAL_HAVE_DFP_ACCEL: u32 = 1;
pub const XCHAL_HAVE_DFP_accel: u32 = 1;
pub const XCHAL_HAVE_DFPU_SINGLE_ONLY: u32 = 1;
pub const XCHAL_HAVE_DFPU_SINGLE_DOUBLE: u32 = 0;
pub const XCHAL_HAVE_VECTRA1: u32 = 0;
pub const XCHAL_HAVE_VECTRALX: u32 = 0;
pub const XCHAL_HAVE_PDX4: u32 = 0;
pub const XCHAL_HAVE_CONNXD2: u32 = 0;
pub const XCHAL_HAVE_CONNXD2_DUALLSFLIX: u32 = 0;
pub const XCHAL_HAVE_BBE16: u32 = 0;
pub const XCHAL_HAVE_BBE16_RSQRT: u32 = 0;
pub const XCHAL_HAVE_BBE16_VECDIV: u32 = 0;
pub const XCHAL_HAVE_BBE16_DESPREAD: u32 = 0;
pub const XCHAL_HAVE_BBENEP: u32 = 0;
pub const XCHAL_HAVE_BSP3: u32 = 0;
pub const XCHAL_HAVE_BSP3_TRANSPOSE: u32 = 0;
pub const XCHAL_HAVE_SSP16: u32 = 0;
pub const XCHAL_HAVE_SSP16_VITERBI: u32 = 0;
pub const XCHAL_HAVE_TURBO16: u32 = 0;
pub const XCHAL_HAVE_BBP16: u32 = 0;
pub const XCHAL_HAVE_FLIX3: u32 = 0;
pub const XCHAL_HAVE_GRIVPEP: u32 = 0;
pub const XCHAL_HAVE_GRIVPEP_HISTOGRAM: u32 = 0;
pub const XCHAL_NUM_LOADSTORE_UNITS: u32 = 1;
pub const XCHAL_NUM_WRITEBUFFER_ENTRIES: u32 = 4;
pub const XCHAL_INST_FETCH_WIDTH: u32 = 4;
pub const XCHAL_DATA_WIDTH: u32 = 4;
pub const XCHAL_DATA_PIPE_DELAY: u32 = 2;
pub const XCHAL_CLOCK_GATING_GLOBAL: u32 = 1;
pub const XCHAL_CLOCK_GATING_FUNCUNIT: u32 = 1;
pub const XCHAL_UNALIGNED_LOAD_EXCEPTION: u32 = 0;
pub const XCHAL_UNALIGNED_STORE_EXCEPTION: u32 = 0;
pub const XCHAL_UNALIGNED_LOAD_HW: u32 = 1;
pub const XCHAL_UNALIGNED_STORE_HW: u32 = 1;
pub const XCHAL_SW_VERSION: u32 = 1100003;
pub const XCHAL_CORE_ID: &'static [u8; 17usize] = b"esp32_v3_49_prod\0";
pub const XCHAL_BUILD_UNIQUE_ID: u32 = 392854;
pub const XCHAL_HW_CONFIGID0: u32 = 3267166206;
pub const XCHAL_HW_CONFIGID1: u32 = 482737814;
pub const XCHAL_HW_VERSION_NAME: &'static [u8; 8usize] = b"LX6.0.3\0";
pub const XCHAL_HW_VERSION_MAJOR: u32 = 2600;
pub const XCHAL_HW_VERSION_MINOR: u32 = 3;
pub const XCHAL_HW_VERSION: u32 = 260003;
pub const XCHAL_HW_REL_LX6: u32 = 1;
pub const XCHAL_HW_REL_LX6_0: u32 = 1;
pub const XCHAL_HW_REL_LX6_0_3: u32 = 1;
pub const XCHAL_HW_CONFIGID_RELIABLE: u32 = 1;
pub const XCHAL_HW_MIN_VERSION_MAJOR: u32 = 2600;
pub const XCHAL_HW_MIN_VERSION_MINOR: u32 = 3;
pub const XCHAL_HW_MIN_VERSION: u32 = 260003;
pub const XCHAL_HW_MAX_VERSION_MAJOR: u32 = 2600;
pub const XCHAL_HW_MAX_VERSION_MINOR: u32 = 3;
pub const XCHAL_HW_MAX_VERSION: u32 = 260003;
pub const XCHAL_ICACHE_LINESIZE: u32 = 4;
pub const XCHAL_DCACHE_LINESIZE: u32 = 4;
pub const XCHAL_ICACHE_LINEWIDTH: u32 = 2;
pub const XCHAL_DCACHE_LINEWIDTH: u32 = 2;
pub const XCHAL_ICACHE_SIZE: u32 = 0;
pub const XCHAL_DCACHE_SIZE: u32 = 0;
pub const XCHAL_DCACHE_IS_WRITEBACK: u32 = 0;
pub const XCHAL_DCACHE_IS_COHERENT: u32 = 0;
pub const XCHAL_HAVE_PREFETCH: u32 = 0;
pub const XCHAL_HAVE_PREFETCH_L1: u32 = 0;
pub const XCHAL_PREFETCH_CASTOUT_LINES: u32 = 0;
pub const XCHAL_PREFETCH_ENTRIES: u32 = 0;
pub const XCHAL_PREFETCH_BLOCK_ENTRIES: u32 = 0;
pub const XCHAL_HAVE_CACHE_BLOCKOPS: u32 = 0;
pub const XCHAL_HAVE_ICACHE_TEST: u32 = 0;
pub const XCHAL_HAVE_DCACHE_TEST: u32 = 0;
pub const XCHAL_HAVE_ICACHE_DYN_WAYS: u32 = 0;
pub const XCHAL_HAVE_DCACHE_DYN_WAYS: u32 = 0;
pub const XCHAL_HAVE_PIF: u32 = 1;
pub const XCHAL_HAVE_AXI: u32 = 0;
pub const XCHAL_HAVE_PIF_WR_RESP: u32 = 0;
pub const XCHAL_HAVE_PIF_REQ_ATTR: u32 = 0;
pub const XCHAL_ICACHE_SETWIDTH: u32 = 0;
pub const XCHAL_DCACHE_SETWIDTH: u32 = 0;
pub const XCHAL_ICACHE_WAYS: u32 = 1;
pub const XCHAL_DCACHE_WAYS: u32 = 1;
pub const XCHAL_ICACHE_LINE_LOCKABLE: u32 = 0;
pub const XCHAL_DCACHE_LINE_LOCKABLE: u32 = 0;
pub const XCHAL_ICACHE_ECC_PARITY: u32 = 0;
pub const XCHAL_DCACHE_ECC_PARITY: u32 = 0;
pub const XCHAL_ICACHE_ACCESS_SIZE: u32 = 1;
pub const XCHAL_DCACHE_ACCESS_SIZE: u32 = 1;
pub const XCHAL_DCACHE_BANKS: u32 = 0;
pub const XCHAL_CA_BITS: u32 = 4;
pub const XCHAL_NUM_INSTROM: u32 = 1;
pub const XCHAL_NUM_INSTRAM: u32 = 2;
pub const XCHAL_NUM_DATAROM: u32 = 1;
pub const XCHAL_NUM_DATARAM: u32 = 2;
pub const XCHAL_NUM_URAM: u32 = 0;
pub const XCHAL_NUM_XLMI: u32 = 1;
pub const XCHAL_INSTROM0_VADDR: u32 = 1082130432;
pub const XCHAL_INSTROM0_PADDR: u32 = 1082130432;
pub const XCHAL_INSTROM0_SIZE: u32 = 4194304;
pub const XCHAL_INSTROM0_ECC_PARITY: u32 = 0;
pub const XCHAL_INSTRAM0_VADDR: u32 = 1073741824;
pub const XCHAL_INSTRAM0_PADDR: u32 = 1073741824;
pub const XCHAL_INSTRAM0_SIZE: u32 = 4194304;
pub const XCHAL_INSTRAM0_ECC_PARITY: u32 = 0;
pub const XCHAL_INSTRAM1_VADDR: u32 = 1077936128;
pub const XCHAL_INSTRAM1_PADDR: u32 = 1077936128;
pub const XCHAL_INSTRAM1_SIZE: u32 = 4194304;
pub const XCHAL_INSTRAM1_ECC_PARITY: u32 = 0;
pub const XCHAL_DATAROM0_VADDR: u32 = 1061158912;
pub const XCHAL_DATAROM0_PADDR: u32 = 1061158912;
pub const XCHAL_DATAROM0_SIZE: u32 = 4194304;
pub const XCHAL_DATAROM0_ECC_PARITY: u32 = 0;
pub const XCHAL_DATAROM0_BANKS: u32 = 1;
pub const XCHAL_DATARAM0_VADDR: u32 = 1073217536;
pub const XCHAL_DATARAM0_PADDR: u32 = 1073217536;
pub const XCHAL_DATARAM0_SIZE: u32 = 524288;
pub const XCHAL_DATARAM0_ECC_PARITY: u32 = 0;
pub const XCHAL_DATARAM0_BANKS: u32 = 1;
pub const XCHAL_DATARAM1_VADDR: u32 = 1065353216;
pub const XCHAL_DATARAM1_PADDR: u32 = 1065353216;
pub const XCHAL_DATARAM1_SIZE: u32 = 4194304;
pub const XCHAL_DATARAM1_ECC_PARITY: u32 = 0;
pub const XCHAL_DATARAM1_BANKS: u32 = 1;
pub const XCHAL_XLMI0_VADDR: u32 = 1072693248;
pub const XCHAL_XLMI0_PADDR: u32 = 1072693248;
pub const XCHAL_XLMI0_SIZE: u32 = 524288;
pub const XCHAL_XLMI0_ECC_PARITY: u32 = 0;
pub const XCHAL_HAVE_IMEM_LOADSTORE: u32 = 1;
pub const XCHAL_HAVE_INTERRUPTS: u32 = 1;
pub const XCHAL_HAVE_HIGHPRI_INTERRUPTS: u32 = 1;
pub const XCHAL_HAVE_NMI: u32 = 1;
pub const XCHAL_HAVE_CCOUNT: u32 = 1;
pub const XCHAL_NUM_TIMERS: u32 = 3;
pub const XCHAL_NUM_INTERRUPTS: u32 = 32;
pub const XCHAL_NUM_INTERRUPTS_LOG2: u32 = 5;
pub const XCHAL_NUM_EXTINTERRUPTS: u32 = 26;
pub const XCHAL_NUM_INTLEVELS: u32 = 6;
pub const XCHAL_EXCM_LEVEL: u32 = 3;
pub const XCHAL_INTLEVEL1_MASK: u32 = 407551;
pub const XCHAL_INTLEVEL2_MASK: u32 = 3670016;
pub const XCHAL_INTLEVEL3_MASK: u32 = 683706368;
pub const XCHAL_INTLEVEL4_MASK: u32 = 1392508928;
pub const XCHAL_INTLEVEL5_MASK: u32 = 2214658048;
pub const XCHAL_INTLEVEL6_MASK: u32 = 0;
pub const XCHAL_INTLEVEL7_MASK: u32 = 16384;
pub const XCHAL_INTLEVEL1_ANDBELOW_MASK: u32 = 407551;
pub const XCHAL_INTLEVEL2_ANDBELOW_MASK: u32 = 4077567;
pub const XCHAL_INTLEVEL3_ANDBELOW_MASK: u32 = 687783935;
pub const XCHAL_INTLEVEL4_ANDBELOW_MASK: u32 = 2080292863;
pub const XCHAL_INTLEVEL5_ANDBELOW_MASK: u32 = 4294950911;
pub const XCHAL_INTLEVEL6_ANDBELOW_MASK: u32 = 4294950911;
pub const XCHAL_INTLEVEL7_ANDBELOW_MASK: u32 = 4294967295;
pub const XCHAL_INT0_LEVEL: u32 = 1;
pub const XCHAL_INT1_LEVEL: u32 = 1;
pub const XCHAL_INT2_LEVEL: u32 = 1;
pub const XCHAL_INT3_LEVEL: u32 = 1;
pub const XCHAL_INT4_LEVEL: u32 = 1;
pub const XCHAL_INT5_LEVEL: u32 = 1;
pub const XCHAL_INT6_LEVEL: u32 = 1;
pub const XCHAL_INT7_LEVEL: u32 = 1;
pub const XCHAL_INT8_LEVEL: u32 = 1;
pub const XCHAL_INT9_LEVEL: u32 = 1;
pub const XCHAL_INT10_LEVEL: u32 = 1;
pub const XCHAL_INT11_LEVEL: u32 = 3;
pub const XCHAL_INT12_LEVEL: u32 = 1;
pub const XCHAL_INT13_LEVEL: u32 = 1;
pub const XCHAL_INT14_LEVEL: u32 = 7;
pub const XCHAL_INT15_LEVEL: u32 = 3;
pub const XCHAL_INT16_LEVEL: u32 = 5;
pub const XCHAL_INT17_LEVEL: u32 = 1;
pub const XCHAL_INT18_LEVEL: u32 = 1;
pub const XCHAL_INT19_LEVEL: u32 = 2;
pub const XCHAL_INT20_LEVEL: u32 = 2;
pub const XCHAL_INT21_LEVEL: u32 = 2;
pub const XCHAL_INT22_LEVEL: u32 = 3;
pub const XCHAL_INT23_LEVEL: u32 = 3;
pub const XCHAL_INT24_LEVEL: u32 = 4;
pub const XCHAL_INT25_LEVEL: u32 = 4;
pub const XCHAL_INT26_LEVEL: u32 = 5;
pub const XCHAL_INT27_LEVEL: u32 = 3;
pub const XCHAL_INT28_LEVEL: u32 = 4;
pub const XCHAL_INT29_LEVEL: u32 = 3;
pub const XCHAL_INT30_LEVEL: u32 = 4;
pub const XCHAL_INT31_LEVEL: u32 = 5;
pub const XCHAL_DEBUGLEVEL: u32 = 6;
pub const XCHAL_HAVE_DEBUG_EXTERN_INT: u32 = 1;
pub const XCHAL_NMILEVEL: u32 = 7;
pub const XCHAL_INT0_TYPE: u32 = 3;
pub const XCHAL_INT1_TYPE: u32 = 3;
pub const XCHAL_INT2_TYPE: u32 = 3;
pub const XCHAL_INT3_TYPE: u32 = 3;
pub const XCHAL_INT4_TYPE: u32 = 3;
pub const XCHAL_INT5_TYPE: u32 = 3;
pub const XCHAL_INT6_TYPE: u32 = 4;
pub const XCHAL_INT7_TYPE: u32 = 1;
pub const XCHAL_INT8_TYPE: u32 = 3;
pub const XCHAL_INT9_TYPE: u32 = 3;
pub const XCHAL_INT10_TYPE: u32 = 2;
pub const XCHAL_INT11_TYPE: u32 = 7;
pub const XCHAL_INT12_TYPE: u32 = 3;
pub const XCHAL_INT13_TYPE: u32 = 3;
pub const XCHAL_INT14_TYPE: u32 = 5;
pub const XCHAL_INT15_TYPE: u32 = 4;
pub const XCHAL_INT16_TYPE: u32 = 4;
pub const XCHAL_INT17_TYPE: u32 = 3;
pub const XCHAL_INT18_TYPE: u32 = 3;
pub const XCHAL_INT19_TYPE: u32 = 3;
pub const XCHAL_INT20_TYPE: u32 = 3;
pub const XCHAL_INT21_TYPE: u32 = 3;
pub const XCHAL_INT22_TYPE: u32 = 2;
pub const XCHAL_INT23_TYPE: u32 = 3;
pub const XCHAL_INT24_TYPE: u32 = 3;
pub const XCHAL_INT25_TYPE: u32 = 3;
pub const XCHAL_INT26_TYPE: u32 = 3;
pub const XCHAL_INT27_TYPE: u32 = 3;
pub const XCHAL_INT28_TYPE: u32 = 2;
pub const XCHAL_INT29_TYPE: u32 = 1;
pub const XCHAL_INT30_TYPE: u32 = 2;
pub const XCHAL_INT31_TYPE: u32 = 3;
pub const XCHAL_INTTYPE_MASK_UNCONFIGURED: u32 = 0;
pub const XCHAL_INTTYPE_MASK_SOFTWARE: u32 = 536871040;
pub const XCHAL_INTTYPE_MASK_EXTERN_EDGE: u32 = 1346372608;
pub const XCHAL_INTTYPE_MASK_EXTERN_LEVEL: u32 = 2411606847;
pub const XCHAL_INTTYPE_MASK_TIMER: u32 = 98368;
pub const XCHAL_INTTYPE_MASK_NMI: u32 = 16384;
pub const XCHAL_INTTYPE_MASK_WRITE_ERROR: u32 = 0;
pub const XCHAL_INTTYPE_MASK_PROFILING: u32 = 2048;
pub const XCHAL_TIMER0_INTERRUPT: u32 = 6;
pub const XCHAL_TIMER1_INTERRUPT: u32 = 15;
pub const XCHAL_TIMER2_INTERRUPT: u32 = 16;
pub const XCHAL_TIMER3_INTERRUPT: i32 = -1;
pub const XCHAL_NMI_INTERRUPT: u32 = 14;
pub const XCHAL_PROFILING_INTERRUPT: u32 = 11;
pub const XCHAL_INTLEVEL7_NUM: u32 = 14;
pub const XCHAL_EXTINT0_NUM: u32 = 0;
pub const XCHAL_EXTINT1_NUM: u32 = 1;
pub const XCHAL_EXTINT2_NUM: u32 = 2;
pub const XCHAL_EXTINT3_NUM: u32 = 3;
pub const XCHAL_EXTINT4_NUM: u32 = 4;
pub const XCHAL_EXTINT5_NUM: u32 = 5;
pub const XCHAL_EXTINT6_NUM: u32 = 8;
pub const XCHAL_EXTINT7_NUM: u32 = 9;
pub const XCHAL_EXTINT8_NUM: u32 = 10;
pub const XCHAL_EXTINT9_NUM: u32 = 12;
pub const XCHAL_EXTINT10_NUM: u32 = 13;
pub const XCHAL_EXTINT11_NUM: u32 = 14;
pub const XCHAL_EXTINT12_NUM: u32 = 17;
pub const XCHAL_EXTINT13_NUM: u32 = 18;
pub const XCHAL_EXTINT14_NUM: u32 = 19;
pub const XCHAL_EXTINT15_NUM: u32 = 20;
pub const XCHAL_EXTINT16_NUM: u32 = 21;
pub const XCHAL_EXTINT17_NUM: u32 = 22;
pub const XCHAL_EXTINT18_NUM: u32 = 23;
pub const XCHAL_EXTINT19_NUM: u32 = 24;
pub const XCHAL_EXTINT20_NUM: u32 = 25;
pub const XCHAL_EXTINT21_NUM: u32 = 26;
pub const XCHAL_EXTINT22_NUM: u32 = 27;
pub const XCHAL_EXTINT23_NUM: u32 = 28;
pub const XCHAL_EXTINT24_NUM: u32 = 30;
pub const XCHAL_EXTINT25_NUM: u32 = 31;
pub const XCHAL_INT0_EXTNUM: u32 = 0;
pub const XCHAL_INT1_EXTNUM: u32 = 1;
pub const XCHAL_INT2_EXTNUM: u32 = 2;
pub const XCHAL_INT3_EXTNUM: u32 = 3;
pub const XCHAL_INT4_EXTNUM: u32 = 4;
pub const XCHAL_INT5_EXTNUM: u32 = 5;
pub const XCHAL_INT8_EXTNUM: u32 = 6;
pub const XCHAL_INT9_EXTNUM: u32 = 7;
pub const XCHAL_INT10_EXTNUM: u32 = 8;
pub const XCHAL_INT12_EXTNUM: u32 = 9;
pub const XCHAL_INT13_EXTNUM: u32 = 10;
pub const XCHAL_INT14_EXTNUM: u32 = 11;
pub const XCHAL_INT17_EXTNUM: u32 = 12;
pub const XCHAL_INT18_EXTNUM: u32 = 13;
pub const XCHAL_INT19_EXTNUM: u32 = 14;
pub const XCHAL_INT20_EXTNUM: u32 = 15;
pub const XCHAL_INT21_EXTNUM: u32 = 16;
pub const XCHAL_INT22_EXTNUM: u32 = 17;
pub const XCHAL_INT23_EXTNUM: u32 = 18;
pub const XCHAL_INT24_EXTNUM: u32 = 19;
pub const XCHAL_INT25_EXTNUM: u32 = 20;
pub const XCHAL_INT26_EXTNUM: u32 = 21;
pub const XCHAL_INT27_EXTNUM: u32 = 22;
pub const XCHAL_INT28_EXTNUM: u32 = 23;
pub const XCHAL_INT30_EXTNUM: u32 = 24;
pub const XCHAL_INT31_EXTNUM: u32 = 25;
pub const XCHAL_XEA_VERSION: u32 = 2;
pub const XCHAL_HAVE_XEA1: u32 = 0;
pub const XCHAL_HAVE_XEA2: u32 = 1;
pub const XCHAL_HAVE_XEAX: u32 = 0;
pub const XCHAL_HAVE_EXCEPTIONS: u32 = 1;
pub const XCHAL_HAVE_HALT: u32 = 0;
pub const XCHAL_HAVE_BOOTLOADER: u32 = 0;
pub const XCHAL_HAVE_MEM_ECC_PARITY: u32 = 0;
pub const XCHAL_HAVE_VECTOR_SELECT: u32 = 1;
pub const XCHAL_HAVE_VECBASE: u32 = 1;
pub const XCHAL_VECBASE_RESET_VADDR: u32 = 1073741824;
pub const XCHAL_VECBASE_RESET_PADDR: u32 = 1073741824;
pub const XCHAL_RESET_VECBASE_OVERLAP: u32 = 0;
pub const XCHAL_RESET_VECTOR0_VADDR: u32 = 1342177280;
pub const XCHAL_RESET_VECTOR0_PADDR: u32 = 1342177280;
pub const XCHAL_RESET_VECTOR1_VADDR: u32 = 1073742848;
pub const XCHAL_RESET_VECTOR1_PADDR: u32 = 1073742848;
pub const XCHAL_RESET_VECTOR_VADDR: u32 = 1073742848;
pub const XCHAL_RESET_VECTOR_PADDR: u32 = 1073742848;
pub const XCHAL_USER_VECOFS: u32 = 832;
pub const XCHAL_USER_VECTOR_VADDR: u32 = 1073742656;
pub const XCHAL_USER_VECTOR_PADDR: u32 = 1073742656;
pub const XCHAL_KERNEL_VECOFS: u32 = 768;
pub const XCHAL_KERNEL_VECTOR_VADDR: u32 = 1073742592;
pub const XCHAL_KERNEL_VECTOR_PADDR: u32 = 1073742592;
pub const XCHAL_DOUBLEEXC_VECOFS: u32 = 960;
pub const XCHAL_DOUBLEEXC_VECTOR_VADDR: u32 = 1073742784;
pub const XCHAL_DOUBLEEXC_VECTOR_PADDR: u32 = 1073742784;
pub const XCHAL_WINDOW_OF4_VECOFS: u32 = 0;
pub const XCHAL_WINDOW_UF4_VECOFS: u32 = 64;
pub const XCHAL_WINDOW_OF8_VECOFS: u32 = 128;
pub const XCHAL_WINDOW_UF8_VECOFS: u32 = 192;
pub const XCHAL_WINDOW_OF12_VECOFS: u32 = 256;
pub const XCHAL_WINDOW_UF12_VECOFS: u32 = 320;
pub const XCHAL_WINDOW_VECTORS_VADDR: u32 = 1073741824;
pub const XCHAL_WINDOW_VECTORS_PADDR: u32 = 1073741824;
pub const XCHAL_INTLEVEL2_VECOFS: u32 = 384;
pub const XCHAL_INTLEVEL2_VECTOR_VADDR: u32 = 1073742208;
pub const XCHAL_INTLEVEL2_VECTOR_PADDR: u32 = 1073742208;
pub const XCHAL_INTLEVEL3_VECOFS: u32 = 448;
pub const XCHAL_INTLEVEL3_VECTOR_VADDR: u32 = 1073742272;
pub const XCHAL_INTLEVEL3_VECTOR_PADDR: u32 = 1073742272;
pub const XCHAL_INTLEVEL4_VECOFS: u32 = 512;
pub const XCHAL_INTLEVEL4_VECTOR_VADDR: u32 = 1073742336;
pub const XCHAL_INTLEVEL4_VECTOR_PADDR: u32 = 1073742336;
pub const XCHAL_INTLEVEL5_VECOFS: u32 = 576;
pub const XCHAL_INTLEVEL5_VECTOR_VADDR: u32 = 1073742400;
pub const XCHAL_INTLEVEL5_VECTOR_PADDR: u32 = 1073742400;
pub const XCHAL_INTLEVEL6_VECOFS: u32 = 640;
pub const XCHAL_INTLEVEL6_VECTOR_VADDR: u32 = 1073742464;
pub const XCHAL_INTLEVEL6_VECTOR_PADDR: u32 = 1073742464;
pub const XCHAL_DEBUG_VECOFS: u32 = 640;
pub const XCHAL_DEBUG_VECTOR_VADDR: u32 = 1073742464;
pub const XCHAL_DEBUG_VECTOR_PADDR: u32 = 1073742464;
pub const XCHAL_NMI_VECOFS: u32 = 704;
pub const XCHAL_NMI_VECTOR_VADDR: u32 = 1073742528;
pub const XCHAL_NMI_VECTOR_PADDR: u32 = 1073742528;
pub const XCHAL_INTLEVEL7_VECOFS: u32 = 704;
pub const XCHAL_INTLEVEL7_VECTOR_VADDR: u32 = 1073742528;
pub const XCHAL_INTLEVEL7_VECTOR_PADDR: u32 = 1073742528;
pub const XCHAL_HAVE_DEBUG_ERI: u32 = 1;
pub const XCHAL_HAVE_DEBUG_APB: u32 = 1;
pub const XCHAL_HAVE_DEBUG_JTAG: u32 = 1;
pub const XCHAL_HAVE_OCD: u32 = 1;
pub const XCHAL_NUM_IBREAK: u32 = 2;
pub const XCHAL_NUM_DBREAK: u32 = 2;
pub const XCHAL_HAVE_OCD_DIR_ARRAY: u32 = 0;
pub const XCHAL_HAVE_OCD_LS32DDR: u32 = 1;
pub const XCHAL_HAVE_TRAX: u32 = 1;
pub const XCHAL_TRAX_MEM_SIZE: u32 = 16384;
pub const XCHAL_TRAX_MEM_SHAREABLE: u32 = 1;
pub const XCHAL_TRAX_ATB_WIDTH: u32 = 32;
pub const XCHAL_TRAX_TIME_WIDTH: u32 = 0;
pub const XCHAL_NUM_PERF_COUNTERS: u32 = 2;
pub const XCHAL_HAVE_TLBS: u32 = 1;
pub const XCHAL_HAVE_SPANNING_WAY: u32 = 1;
pub const XCHAL_SPANNING_WAY: u32 = 0;
pub const XCHAL_HAVE_IDENTITY_MAP: u32 = 1;
pub const XCHAL_HAVE_CACHEATTR: u32 = 0;
pub const XCHAL_HAVE_MIMIC_CACHEATTR: u32 = 1;
pub const XCHAL_HAVE_XLT_CACHEATTR: u32 = 0;
pub const XCHAL_HAVE_PTP_MMU: u32 = 0;
pub const XCHAL_MMU_ASID_BITS: u32 = 0;
pub const XCHAL_MMU_RINGS: u32 = 1;
pub const XCHAL_MMU_RING_BITS: u32 = 0;
pub const XCHAL_CA_BYPASS: u32 = 2;
pub const XCHAL_CA_BYPASSBUF: u32 = 6;
pub const XCHAL_CA_WRITETHRU: u32 = 2;
pub const XCHAL_CA_WRITEBACK: u32 = 2;
pub const XCHAL_HAVE_CA_WRITEBACK_NOALLOC: u32 = 0;
pub const XCHAL_CA_WRITEBACK_NOALLOC: u32 = 2;
pub const XCHAL_CA_BYPASS_RW: u32 = 0;
pub const XCHAL_CA_WRITETHRU_RW: u32 = 0;
pub const XCHAL_CA_WRITEBACK_RW: u32 = 0;
pub const XCHAL_CA_WRITEBACK_NOALLOC_RW: u32 = 0;
pub const XCHAL_CA_ILLEGAL: u32 = 15;
pub const XCHAL_CA_ISOLATE: u32 = 0;
pub const XCHAL_MMU_ASID_INVALID: u32 = 0;
pub const XCHAL_MMU_ASID_KERNEL: u32 = 0;
pub const XCHAL_MMU_SR_BITS: u32 = 0;
pub const XCHAL_MMU_CA_BITS: u32 = 4;
pub const XCHAL_MMU_MAX_PTE_PAGE_SIZE: u32 = 29;
pub const XCHAL_MMU_MIN_PTE_PAGE_SIZE: u32 = 29;
pub const XCHAL_ITLB_WAY_BITS: u32 = 0;
pub const XCHAL_ITLB_WAYS: u32 = 1;
pub const XCHAL_ITLB_ARF_WAYS: u32 = 0;
pub const XCHAL_ITLB_SETS: u32 = 1;
pub const XCHAL_ITLB_WAY0_SET: u32 = 0;
pub const XCHAL_ITLB_ARF_SETS: u32 = 0;
pub const XCHAL_ITLB_MINWIRED_SETS: u32 = 0;
pub const XCHAL_ITLB_SET0_WAY: u32 = 0;
pub const XCHAL_ITLB_SET0_WAYS: u32 = 1;
pub const XCHAL_ITLB_SET0_ENTRIES_LOG2: u32 = 3;
pub const XCHAL_ITLB_SET0_ENTRIES: u32 = 8;
pub const XCHAL_ITLB_SET0_ARF: u32 = 0;
pub const XCHAL_ITLB_SET0_PAGESIZES: u32 = 1;
pub const XCHAL_ITLB_SET0_PAGESZ_BITS: u32 = 0;
pub const XCHAL_ITLB_SET0_PAGESZ_LOG2_MIN: u32 = 29;
pub const XCHAL_ITLB_SET0_PAGESZ_LOG2_MAX: u32 = 29;
pub const XCHAL_ITLB_SET0_PAGESZ_LOG2_LIST: u32 = 29;
pub const XCHAL_ITLB_SET0_ASID_CONSTMASK: u32 = 0;
pub const XCHAL_ITLB_SET0_VPN_CONSTMASK: u32 = 0;
pub const XCHAL_ITLB_SET0_PPN_CONSTMASK: u32 = 3758096384;
pub const XCHAL_ITLB_SET0_CA_CONSTMASK: u32 = 0;
pub const XCHAL_ITLB_SET0_ASID_RESET: u32 = 0;
pub const XCHAL_ITLB_SET0_VPN_RESET: u32 = 0;
pub const XCHAL_ITLB_SET0_PPN_RESET: u32 = 0;
pub const XCHAL_ITLB_SET0_CA_RESET: u32 = 1;
pub const XCHAL_ITLB_SET0_E0_VPN_CONST: u32 = 0;
pub const XCHAL_ITLB_SET0_E1_VPN_CONST: u32 = 536870912;
pub const XCHAL_ITLB_SET0_E2_VPN_CONST: u32 = 1073741824;
pub const XCHAL_ITLB_SET0_E3_VPN_CONST: u32 = 1610612736;
pub const XCHAL_ITLB_SET0_E4_VPN_CONST: u32 = 2147483648;
pub const XCHAL_ITLB_SET0_E5_VPN_CONST: u32 = 2684354560;
pub const XCHAL_ITLB_SET0_E6_VPN_CONST: u32 = 3221225472;
pub const XCHAL_ITLB_SET0_E7_VPN_CONST: u32 = 3758096384;
pub const XCHAL_ITLB_SET0_E0_PPN_CONST: u32 = 0;
pub const XCHAL_ITLB_SET0_E1_PPN_CONST: u32 = 536870912;
pub const XCHAL_ITLB_SET0_E2_PPN_CONST: u32 = 1073741824;
pub const XCHAL_ITLB_SET0_E3_PPN_CONST: u32 = 1610612736;
pub const XCHAL_ITLB_SET0_E4_PPN_CONST: u32 = 2147483648;
pub const XCHAL_ITLB_SET0_E5_PPN_CONST: u32 = 2684354560;
pub const XCHAL_ITLB_SET0_E6_PPN_CONST: u32 = 3221225472;
pub const XCHAL_ITLB_SET0_E7_PPN_CONST: u32 = 3758096384;
pub const XCHAL_ITLB_SET0_E0_CA_RESET: u32 = 2;
pub const XCHAL_ITLB_SET0_E1_CA_RESET: u32 = 2;
pub const XCHAL_ITLB_SET0_E2_CA_RESET: u32 = 2;
pub const XCHAL_ITLB_SET0_E3_CA_RESET: u32 = 2;
pub const XCHAL_ITLB_SET0_E4_CA_RESET: u32 = 2;
pub const XCHAL_ITLB_SET0_E5_CA_RESET: u32 = 2;
pub const XCHAL_ITLB_SET0_E6_CA_RESET: u32 = 2;
pub const XCHAL_ITLB_SET0_E7_CA_RESET: u32 = 2;
pub const XCHAL_DTLB_WAY_BITS: u32 = 0;
pub const XCHAL_DTLB_WAYS: u32 = 1;
pub const XCHAL_DTLB_ARF_WAYS: u32 = 0;
pub const XCHAL_DTLB_SETS: u32 = 1;
pub const XCHAL_DTLB_WAY0_SET: u32 = 0;
pub const XCHAL_DTLB_ARF_SETS: u32 = 0;
pub const XCHAL_DTLB_MINWIRED_SETS: u32 = 0;
pub const XCHAL_DTLB_SET0_WAY: u32 = 0;
pub const XCHAL_DTLB_SET0_WAYS: u32 = 1;
pub const XCHAL_DTLB_SET0_ENTRIES_LOG2: u32 = 3;
pub const XCHAL_DTLB_SET0_ENTRIES: u32 = 8;
pub const XCHAL_DTLB_SET0_ARF: u32 = 0;
pub const XCHAL_DTLB_SET0_PAGESIZES: u32 = 1;
pub const XCHAL_DTLB_SET0_PAGESZ_BITS: u32 = 0;
pub const XCHAL_DTLB_SET0_PAGESZ_LOG2_MIN: u32 = 29;
pub const XCHAL_DTLB_SET0_PAGESZ_LOG2_MAX: u32 = 29;
pub const XCHAL_DTLB_SET0_PAGESZ_LOG2_LIST: u32 = 29;
pub const XCHAL_DTLB_SET0_ASID_CONSTMASK: u32 = 0;
pub const XCHAL_DTLB_SET0_VPN_CONSTMASK: u32 = 0;
pub const XCHAL_DTLB_SET0_PPN_CONSTMASK: u32 = 3758096384;
pub const XCHAL_DTLB_SET0_CA_CONSTMASK: u32 = 0;
pub const XCHAL_DTLB_SET0_ASID_RESET: u32 = 0;
pub const XCHAL_DTLB_SET0_VPN_RESET: u32 = 0;
pub const XCHAL_DTLB_SET0_PPN_RESET: u32 = 0;
pub const XCHAL_DTLB_SET0_CA_RESET: u32 = 1;
pub const XCHAL_DTLB_SET0_E0_VPN_CONST: u32 = 0;
pub const XCHAL_DTLB_SET0_E1_VPN_CONST: u32 = 536870912;
pub const XCHAL_DTLB_SET0_E2_VPN_CONST: u32 = 1073741824;
pub const XCHAL_DTLB_SET0_E3_VPN_CONST: u32 = 1610612736;
pub const XCHAL_DTLB_SET0_E4_VPN_CONST: u32 = 2147483648;
pub const XCHAL_DTLB_SET0_E5_VPN_CONST: u32 = 2684354560;
pub const XCHAL_DTLB_SET0_E6_VPN_CONST: u32 = 3221225472;
pub const XCHAL_DTLB_SET0_E7_VPN_CONST: u32 = 3758096384;
pub const XCHAL_DTLB_SET0_E0_PPN_CONST: u32 = 0;
pub const XCHAL_DTLB_SET0_E1_PPN_CONST: u32 = 536870912;
pub const XCHAL_DTLB_SET0_E2_PPN_CONST: u32 = 1073741824;
pub const XCHAL_DTLB_SET0_E3_PPN_CONST: u32 = 1610612736;
pub const XCHAL_DTLB_SET0_E4_PPN_CONST: u32 = 2147483648;
pub const XCHAL_DTLB_SET0_E5_PPN_CONST: u32 = 2684354560;
pub const XCHAL_DTLB_SET0_E6_PPN_CONST: u32 = 3221225472;
pub const XCHAL_DTLB_SET0_E7_PPN_CONST: u32 = 3758096384;
pub const XCHAL_DTLB_SET0_E0_CA_RESET: u32 = 2;
pub const XCHAL_DTLB_SET0_E1_CA_RESET: u32 = 2;
pub const XCHAL_DTLB_SET0_E2_CA_RESET: u32 = 2;
pub const XCHAL_DTLB_SET0_E3_CA_RESET: u32 = 2;
pub const XCHAL_DTLB_SET0_E4_CA_RESET: u32 = 2;
pub const XCHAL_DTLB_SET0_E5_CA_RESET: u32 = 2;
pub const XCHAL_DTLB_SET0_E6_CA_RESET: u32 = 2;
pub const XCHAL_DTLB_SET0_E7_CA_RESET: u32 = 2;
pub const XCHAL_CP_NUM: u32 = 1;
pub const XCHAL_CP_MAX: u32 = 1;
pub const XCHAL_CP_MASK: u32 = 1;
pub const XCHAL_CP_PORT_MASK: u32 = 0;
pub const XCHAL_CP0_NAME: &'static [u8; 4usize] = b"FPU\0";
pub const XCHAL_CP0_SA_SIZE: u32 = 72;
pub const XCHAL_CP0_SA_ALIGN: u32 = 4;
pub const XCHAL_CP_ID_FPU: u32 = 0;
pub const XCHAL_CP1_SA_SIZE: u32 = 0;
pub const XCHAL_CP1_SA_ALIGN: u32 = 1;
pub const XCHAL_CP2_SA_SIZE: u32 = 0;
pub const XCHAL_CP2_SA_ALIGN: u32 = 1;
pub const XCHAL_CP3_SA_SIZE: u32 = 0;
pub const XCHAL_CP3_SA_ALIGN: u32 = 1;
pub const XCHAL_CP4_SA_SIZE: u32 = 0;
pub const XCHAL_CP4_SA_ALIGN: u32 = 1;
pub const XCHAL_CP5_SA_SIZE: u32 = 0;
pub const XCHAL_CP5_SA_ALIGN: u32 = 1;
pub const XCHAL_CP6_SA_SIZE: u32 = 0;
pub const XCHAL_CP6_SA_ALIGN: u32 = 1;
pub const XCHAL_CP7_SA_SIZE: u32 = 0;
pub const XCHAL_CP7_SA_ALIGN: u32 = 1;
pub const XCHAL_NCP_SA_SIZE: u32 = 48;
pub const XCHAL_NCP_SA_ALIGN: u32 = 4;
pub const XCHAL_TOTAL_SA_SIZE: u32 = 128;
pub const XCHAL_TOTAL_SA_ALIGN: u32 = 4;
pub const XCHAL_NCP_SA_NUM: u32 = 12;
pub const XCHAL_CP0_SA_NUM: u32 = 18;
pub const XCHAL_CP1_SA_NUM: u32 = 0;
pub const XCHAL_CP2_SA_NUM: u32 = 0;
pub const XCHAL_CP3_SA_NUM: u32 = 0;
pub const XCHAL_CP4_SA_NUM: u32 = 0;
pub const XCHAL_CP5_SA_NUM: u32 = 0;
pub const XCHAL_CP6_SA_NUM: u32 = 0;
pub const XCHAL_CP7_SA_NUM: u32 = 0;
pub const XCHAL_HAVE_LE: u32 = 1;
pub const XCHAL_MEMORY_ORDER: u32 = 0;
pub const XCHAL_HAVE_HIGHLEVEL_INTERRUPTS: u32 = 1;
pub const XCHAL_NUM_LOWPRI_LEVELS: u32 = 1;
pub const XCHAL_FIRST_HIGHPRI_LEVEL: u32 = 2;
pub const XCHAL_INTLEVEL0_MASK: u32 = 0;
pub const XCHAL_INTLEVEL8_MASK: u32 = 0;
pub const XCHAL_INTLEVEL9_MASK: u32 = 0;
pub const XCHAL_INTLEVEL10_MASK: u32 = 0;
pub const XCHAL_INTLEVEL11_MASK: u32 = 0;
pub const XCHAL_INTLEVEL12_MASK: u32 = 0;
pub const XCHAL_INTLEVEL13_MASK: u32 = 0;
pub const XCHAL_INTLEVEL14_MASK: u32 = 0;
pub const XCHAL_INTLEVEL15_MASK: u32 = 0;
pub const XCHAL_INTLEVEL0_ANDBELOW_MASK: u32 = 0;
pub const XCHAL_INTLEVEL8_ANDBELOW_MASK: u32 = 4294967295;
pub const XCHAL_INTLEVEL9_ANDBELOW_MASK: u32 = 4294967295;
pub const XCHAL_INTLEVEL10_ANDBELOW_MASK: u32 = 4294967295;
pub const XCHAL_INTLEVEL11_ANDBELOW_MASK: u32 = 4294967295;
pub const XCHAL_INTLEVEL12_ANDBELOW_MASK: u32 = 4294967295;
pub const XCHAL_INTLEVEL13_ANDBELOW_MASK: u32 = 4294967295;
pub const XCHAL_INTLEVEL14_ANDBELOW_MASK: u32 = 4294967295;
pub const XCHAL_INTLEVEL15_ANDBELOW_MASK: u32 = 4294967295;
pub const XCHAL_LOWPRI_MASK: u32 = 407551;
pub const XCHAL_INTCLEARABLE_MASK: u32 = 1883243648;
pub const XCHAL_INTSETTABLE_MASK: u32 = 536871040;
pub const XCHAL_EXTINT0_MASK: u32 = 1;
pub const XCHAL_EXTINT1_MASK: u32 = 2;
pub const XCHAL_EXTINT2_MASK: u32 = 4;
pub const XCHAL_EXTINT3_MASK: u32 = 8;
pub const XCHAL_EXTINT4_MASK: u32 = 16;
pub const XCHAL_EXTINT5_MASK: u32 = 32;
pub const XCHAL_EXTINT6_MASK: u32 = 256;
pub const XCHAL_EXTINT7_MASK: u32 = 512;
pub const XCHAL_EXTINT8_MASK: u32 = 1024;
pub const XCHAL_EXTINT9_MASK: u32 = 4096;
pub const XCHAL_EXTINT10_MASK: u32 = 8192;
pub const XCHAL_EXTINT11_MASK: u32 = 16384;
pub const XCHAL_EXTINT12_MASK: u32 = 131072;
pub const XCHAL_EXTINT13_MASK: u32 = 262144;
pub const XCHAL_EXTINT14_MASK: u32 = 524288;
pub const XCHAL_EXTINT15_MASK: u32 = 1048576;
pub const XCHAL_EXTINT16_MASK: u32 = 2097152;
pub const XCHAL_EXTINT17_MASK: u32 = 4194304;
pub const XCHAL_EXTINT18_MASK: u32 = 8388608;
pub const XCHAL_EXTINT19_MASK: u32 = 16777216;
pub const XCHAL_EXTINT20_MASK: u32 = 33554432;
pub const XCHAL_EXTINT21_MASK: u32 = 67108864;
pub const XCHAL_EXTINT22_MASK: u32 = 134217728;
pub const XCHAL_EXTINT23_MASK: u32 = 268435456;
pub const XCHAL_EXTINT24_MASK: u32 = 1073741824;
pub const XCHAL_EXTINT25_MASK: u32 = 2147483648;
pub const XCHAL_HAVE_OLD_EXC_ARCH: u32 = 0;
pub const XCHAL_HAVE_EXCM: u32 = 1;
pub const XCHAL_PROGRAMEXC_VECTOR_VADDR: u32 = 1073742656;
pub const XCHAL_USEREXC_VECTOR_VADDR: u32 = 1073742656;
pub const XCHAL_PROGRAMEXC_VECTOR_PADDR: u32 = 1073742656;
pub const XCHAL_USEREXC_VECTOR_PADDR: u32 = 1073742656;
pub const XCHAL_STACKEDEXC_VECTOR_VADDR: u32 = 1073742592;
pub const XCHAL_KERNELEXC_VECTOR_VADDR: u32 = 1073742592;
pub const XCHAL_STACKEDEXC_VECTOR_PADDR: u32 = 1073742592;
pub const XCHAL_KERNELEXC_VECTOR_PADDR: u32 = 1073742592;
pub const XCHAL_EXCCAUSE_ILLEGAL_INSTRUCTION: u32 = 0;
pub const XCHAL_EXCCAUSE_SYSTEM_CALL: u32 = 1;
pub const XCHAL_EXCCAUSE_INSTRUCTION_FETCH_ERROR: u32 = 2;
pub const XCHAL_EXCCAUSE_LOAD_STORE_ERROR: u32 = 3;
pub const XCHAL_EXCCAUSE_LEVEL1_INTERRUPT: u32 = 4;
pub const XCHAL_EXCCAUSE_ALLOCA: u32 = 5;
pub const XCHAL_EXCCAUSE_INTEGER_DIVIDE_BY_ZERO: u32 = 6;
pub const XCHAL_EXCCAUSE_SPECULATION: u32 = 7;
pub const XCHAL_EXCCAUSE_PRIVILEGED: u32 = 8;
pub const XCHAL_EXCCAUSE_UNALIGNED: u32 = 9;
pub const XCHAL_EXCCAUSE_ITLB_MISS: u32 = 16;
pub const XCHAL_EXCCAUSE_ITLB_MULTIHIT: u32 = 17;
pub const XCHAL_EXCCAUSE_ITLB_PRIVILEGE: u32 = 18;
pub const XCHAL_EXCCAUSE_ITLB_SIZE_RESTRICTION: u32 = 19;
pub const XCHAL_EXCCAUSE_FETCH_CACHE_ATTRIBUTE: u32 = 20;
pub const XCHAL_EXCCAUSE_DTLB_MISS: u32 = 24;
pub const XCHAL_EXCCAUSE_DTLB_MULTIHIT: u32 = 25;
pub const XCHAL_EXCCAUSE_DTLB_PRIVILEGE: u32 = 26;
pub const XCHAL_EXCCAUSE_DTLB_SIZE_RESTRICTION: u32 = 27;
pub const XCHAL_EXCCAUSE_LOAD_CACHE_ATTRIBUTE: u32 = 28;
pub const XCHAL_EXCCAUSE_STORE_CACHE_ATTRIBUTE: u32 = 29;
pub const XCHAL_EXCCAUSE_COPROCESSOR0_DISABLED: u32 = 32;
pub const XCHAL_EXCCAUSE_COPROCESSOR1_DISABLED: u32 = 33;
pub const XCHAL_EXCCAUSE_COPROCESSOR2_DISABLED: u32 = 34;
pub const XCHAL_EXCCAUSE_COPROCESSOR3_DISABLED: u32 = 35;
pub const XCHAL_EXCCAUSE_COPROCESSOR4_DISABLED: u32 = 36;
pub const XCHAL_EXCCAUSE_COPROCESSOR5_DISABLED: u32 = 37;
pub const XCHAL_EXCCAUSE_COPROCESSOR6_DISABLED: u32 = 38;
pub const XCHAL_EXCCAUSE_COPROCESSOR7_DISABLED: u32 = 39;
pub const XCHAL_DBREAKC_VALIDMASK: u32 = 3221225535;
pub const XCHAL_DBREAKC_MASK_BITS: u32 = 6;
pub const XCHAL_DBREAKC_MASK_NUM: u32 = 64;
pub const XCHAL_DBREAKC_MASK_SHIFT: u32 = 0;
pub const XCHAL_DBREAKC_MASK_MASK: u32 = 63;
pub const XCHAL_DBREAKC_LOADBREAK_BITS: u32 = 1;
pub const XCHAL_DBREAKC_LOADBREAK_NUM: u32 = 2;
pub const XCHAL_DBREAKC_LOADBREAK_SHIFT: u32 = 30;
pub const XCHAL_DBREAKC_LOADBREAK_MASK: u32 = 1073741824;
pub const XCHAL_DBREAKC_STOREBREAK_BITS: u32 = 1;
pub const XCHAL_DBREAKC_STOREBREAK_NUM: u32 = 2;
pub const XCHAL_DBREAKC_STOREBREAK_SHIFT: u32 = 31;
pub const XCHAL_DBREAKC_STOREBREAK_MASK: u32 = 2147483648;
pub const XCHAL_PS_VALIDMASK: u32 = 462655;
pub const XCHAL_PS_INTLEVEL_BITS: u32 = 4;
pub const XCHAL_PS_INTLEVEL_NUM: u32 = 16;
pub const XCHAL_PS_INTLEVEL_SHIFT: u32 = 0;
pub const XCHAL_PS_INTLEVEL_MASK: u32 = 15;
pub const XCHAL_PS_EXCM_BITS: u32 = 1;
pub const XCHAL_PS_EXCM_NUM: u32 = 2;
pub const XCHAL_PS_EXCM_SHIFT: u32 = 4;
pub const XCHAL_PS_EXCM_MASK: u32 = 16;
pub const XCHAL_PS_UM_BITS: u32 = 1;
pub const XCHAL_PS_UM_NUM: u32 = 2;
pub const XCHAL_PS_UM_SHIFT: u32 = 5;
pub const XCHAL_PS_UM_MASK: u32 = 32;
pub const XCHAL_PS_RING_BITS: u32 = 2;
pub const XCHAL_PS_RING_NUM: u32 = 4;
pub const XCHAL_PS_RING_SHIFT: u32 = 6;
pub const XCHAL_PS_RING_MASK: u32 = 192;
pub const XCHAL_PS_OWB_BITS: u32 = 4;
pub const XCHAL_PS_OWB_NUM: u32 = 16;
pub const XCHAL_PS_OWB_SHIFT: u32 = 8;
pub const XCHAL_PS_OWB_MASK: u32 = 3840;
pub const XCHAL_PS_CALLINC_BITS: u32 = 2;
pub const XCHAL_PS_CALLINC_NUM: u32 = 4;
pub const XCHAL_PS_CALLINC_SHIFT: u32 = 16;
pub const XCHAL_PS_CALLINC_MASK: u32 = 196608;
pub const XCHAL_PS_WOE_BITS: u32 = 1;
pub const XCHAL_PS_WOE_NUM: u32 = 2;
pub const XCHAL_PS_WOE_SHIFT: u32 = 18;
pub const XCHAL_PS_WOE_MASK: u32 = 262144;
pub const XCHAL_EXCCAUSE_VALIDMASK: u32 = 63;
pub const XCHAL_EXCCAUSE_BITS: u32 = 6;
pub const XCHAL_EXCCAUSE_NUM: u32 = 64;
pub const XCHAL_EXCCAUSE_SHIFT: u32 = 0;
pub const XCHAL_EXCCAUSE_MASK: u32 = 63;
pub const XCHAL_DEBUGCAUSE_VALIDMASK: u32 = 63;
pub const XCHAL_DEBUGCAUSE_ICOUNT_BITS: u32 = 1;
pub const XCHAL_DEBUGCAUSE_ICOUNT_NUM: u32 = 2;
pub const XCHAL_DEBUGCAUSE_ICOUNT_SHIFT: u32 = 0;
pub const XCHAL_DEBUGCAUSE_ICOUNT_MASK: u32 = 1;
pub const XCHAL_DEBUGCAUSE_IBREAK_BITS: u32 = 1;
pub const XCHAL_DEBUGCAUSE_IBREAK_NUM: u32 = 2;
pub const XCHAL_DEBUGCAUSE_IBREAK_SHIFT: u32 = 1;
pub const XCHAL_DEBUGCAUSE_IBREAK_MASK: u32 = 2;
pub const XCHAL_DEBUGCAUSE_DBREAK_BITS: u32 = 1;
pub const XCHAL_DEBUGCAUSE_DBREAK_NUM: u32 = 2;
pub const XCHAL_DEBUGCAUSE_DBREAK_SHIFT: u32 = 2;
pub const XCHAL_DEBUGCAUSE_DBREAK_MASK: u32 = 4;
pub const XCHAL_DEBUGCAUSE_BREAK_BITS: u32 = 1;
pub const XCHAL_DEBUGCAUSE_BREAK_NUM: u32 = 2;
pub const XCHAL_DEBUGCAUSE_BREAK_SHIFT: u32 = 3;
pub const XCHAL_DEBUGCAUSE_BREAK_MASK: u32 = 8;
pub const XCHAL_DEBUGCAUSE_BREAKN_BITS: u32 = 1;
pub const XCHAL_DEBUGCAUSE_BREAKN_NUM: u32 = 2;
pub const XCHAL_DEBUGCAUSE_BREAKN_SHIFT: u32 = 4;
pub const XCHAL_DEBUGCAUSE_BREAKN_MASK: u32 = 16;
pub const XCHAL_DEBUGCAUSE_DEBUGINT_BITS: u32 = 1;
pub const XCHAL_DEBUGCAUSE_DEBUGINT_NUM: u32 = 2;
pub const XCHAL_DEBUGCAUSE_DEBUGINT_SHIFT: u32 = 5;
pub const XCHAL_DEBUGCAUSE_DEBUGINT_MASK: u32 = 32;
pub const XCHAL_NUM_IROM: u32 = 1;
pub const XCHAL_NUM_IRAM: u32 = 2;
pub const XCHAL_NUM_DROM: u32 = 1;
pub const XCHAL_NUM_DRAM: u32 = 2;
pub const XCHAL_IROM0_VADDR: u32 = 1082130432;
pub const XCHAL_IROM0_PADDR: u32 = 1082130432;
pub const XCHAL_IROM0_SIZE: u32 = 4194304;
pub const XCHAL_IRAM0_VADDR: u32 = 1073741824;
pub const XCHAL_IRAM0_PADDR: u32 = 1073741824;
pub const XCHAL_IRAM0_SIZE: u32 = 4194304;
pub const XCHAL_IRAM1_VADDR: u32 = 1077936128;
pub const XCHAL_IRAM1_PADDR: u32 = 1077936128;
pub const XCHAL_IRAM1_SIZE: u32 = 4194304;
pub const XCHAL_DROM0_VADDR: u32 = 1061158912;
pub const XCHAL_DROM0_PADDR: u32 = 1061158912;
pub const XCHAL_DROM0_SIZE: u32 = 4194304;
pub const XCHAL_DRAM0_VADDR: u32 = 1073217536;
pub const XCHAL_DRAM0_PADDR: u32 = 1073217536;
pub const XCHAL_DRAM0_SIZE: u32 = 524288;
pub const XCHAL_DRAM1_VADDR: u32 = 1065353216;
pub const XCHAL_DRAM1_PADDR: u32 = 1065353216;
pub const XCHAL_DRAM1_SIZE: u32 = 4194304;
pub const XCHAL_CACHE_PREFCTL_DEFAULT: u32 = 4164;
pub const XCHAL_CACHE_LINEWIDTH_MAX: u32 = 2;
pub const XCHAL_CACHE_LINESIZE_MAX: u32 = 4;
pub const XCHAL_ICACHE_SETSIZE: u32 = 1;
pub const XCHAL_DCACHE_SETSIZE: u32 = 1;
pub const XCHAL_CACHE_SETWIDTH_MAX: u32 = 0;
pub const XCHAL_CACHE_SETSIZE_MAX: u32 = 1;
pub const XCHAL_ICACHE_TAG_V_SHIFT: u32 = 0;
pub const XCHAL_ICACHE_TAG_V: u32 = 1;
pub const XCHAL_ICACHE_TAG_F_SHIFT: u32 = 0;
pub const XCHAL_ICACHE_TAG_F: u32 = 0;
pub const XCHAL_ICACHE_TAG_L_SHIFT: u32 = 0;
pub const XCHAL_ICACHE_TAG_L: u32 = 0;
pub const XCHAL_DCACHE_TAG_V_SHIFT: u32 = 0;
pub const XCHAL_DCACHE_TAG_V: u32 = 1;
pub const XCHAL_DCACHE_TAG_F_SHIFT: u32 = 0;
pub const XCHAL_DCACHE_TAG_F: u32 = 0;
pub const XCHAL_DCACHE_TAG_D_SHIFT: u32 = 0;
pub const XCHAL_DCACHE_TAG_D: u32 = 0;
pub const XCHAL_DCACHE_TAG_L_SHIFT: u32 = 0;
pub const XCHAL_DCACHE_TAG_L: u32 = 0;
pub const XCHAL_CACHE_MEMCTL_DEFAULT: u32 = 0;
pub const _MEMCTL_SNOOP_EN: u32 = 0;
pub const _MEMCTL_L0IBUF_EN: u32 = 1;
pub const XCHAL_SNOOP_LB_MEMCTL_DEFAULT: u32 = 1;
pub const XCHAL_ALIGN_MAX: u32 = 4;
pub const XCHAL_HW_RELEASE_MAJOR: u32 = 2600;
pub const XCHAL_HW_RELEASE_MINOR: u32 = 3;
pub const XCHAL_HW_RELEASE_NAME: &'static [u8; 8usize] = b"LX6.0.3\0";
pub const XCHAL_EXTRA_SA_SIZE: u32 = 48;
pub const XCHAL_EXTRA_SA_ALIGN: u32 = 4;
pub const XCHAL_CPEXTRA_SA_SIZE: u32 = 128;
pub const XCHAL_CPEXTRA_SA_ALIGN: u32 = 4;
pub const XCHAL_CP1_NAME: u32 = 0;
pub const XCHAL_CP1_SA_CONTENTS_LIBDB_NUM: u32 = 0;
pub const XCHAL_CP2_NAME: u32 = 0;
pub const XCHAL_CP2_SA_CONTENTS_LIBDB_NUM: u32 = 0;
pub const XCHAL_CP3_NAME: u32 = 0;
pub const XCHAL_CP3_SA_CONTENTS_LIBDB_NUM: u32 = 0;
pub const XCHAL_CP4_NAME: u32 = 0;
pub const XCHAL_CP4_SA_CONTENTS_LIBDB_NUM: u32 = 0;
pub const XCHAL_CP5_NAME: u32 = 0;
pub const XCHAL_CP5_SA_CONTENTS_LIBDB_NUM: u32 = 0;
pub const XCHAL_CP6_NAME: u32 = 0;
pub const XCHAL_CP6_SA_CONTENTS_LIBDB_NUM: u32 = 0;
pub const XCHAL_CP7_NAME: u32 = 0;
pub const XCHAL_CP7_SA_CONTENTS_LIBDB_NUM: u32 = 0;
pub const XCHAL_CPEXTRA_SA_SIZE_TOR2: u32 = 128;
pub const XCHAL_INST_ILLN: u32 = 61549;
pub const XCHAL_INST_ILLN_BYTE0: u32 = 109;
pub const XCHAL_INST_ILLN_BYTE1: u32 = 240;
pub const XTHAL_INST_ILL: u32 = 0;
pub const XCHAL_ERRATUM_453: u32 = 0;
pub const XCHAL_ERRATUM_497: u32 = 0;
pub const XCHAL_ERRATUM_572: u32 = 1;
pub const XSHAL_USE_ABSOLUTE_LITERALS: u32 = 0;
pub const XSHAL_HAVE_TEXT_SECTION_LITERALS: u32 = 1;
pub const XTHAL_ABI_WINDOWED: u32 = 0;
pub const XTHAL_ABI_CALL0: u32 = 1;
pub const XTHAL_CLIB_NEWLIB: u32 = 0;
pub const XTHAL_CLIB_UCLIBC: u32 = 1;
pub const XTHAL_CLIB_XCLIB: u32 = 2;
pub const XSHAL_USE_FLOATING_POINT: u32 = 1;
pub const XSHAL_FLOATING_POINT_ABI: u32 = 0;
pub const XSHAL_IOBLOCK_CACHED_VADDR: u32 = 1879048192;
pub const XSHAL_IOBLOCK_CACHED_PADDR: u32 = 1879048192;
pub const XSHAL_IOBLOCK_CACHED_SIZE: u32 = 234881024;
pub const XSHAL_IOBLOCK_BYPASS_VADDR: u32 = 2415919104;
pub const XSHAL_IOBLOCK_BYPASS_PADDR: u32 = 2415919104;
pub const XSHAL_IOBLOCK_BYPASS_SIZE: u32 = 234881024;
pub const XSHAL_ROM_VADDR: u32 = 1342177280;
pub const XSHAL_ROM_PADDR: u32 = 1342177280;
pub const XSHAL_ROM_SIZE: u32 = 16777216;
pub const XSHAL_ROM_AVAIL_VADDR: u32 = 1342177280;
pub const XSHAL_ROM_AVAIL_VSIZE: u32 = 16777216;
pub const XSHAL_RAM_VADDR: u32 = 1610612736;
pub const XSHAL_RAM_PADDR: u32 = 1610612736;
pub const XSHAL_RAM_VSIZE: u32 = 536870912;
pub const XSHAL_RAM_PSIZE: u32 = 536870912;
pub const XSHAL_RAM_SIZE: u32 = 536870912;
pub const XSHAL_RAM_AVAIL_VADDR: u32 = 1610612736;
pub const XSHAL_RAM_AVAIL_VSIZE: u32 = 536870912;
pub const XSHAL_RAM_BYPASS_VADDR: u32 = 2684354560;
pub const XSHAL_RAM_BYPASS_PADDR: u32 = 2684354560;
pub const XSHAL_RAM_BYPASS_PSIZE: u32 = 536870912;
pub const XSHAL_SIMIO_CACHED_VADDR: u32 = 3221225472;
pub const XSHAL_SIMIO_BYPASS_VADDR: u32 = 3221225472;
pub const XSHAL_SIMIO_PADDR: u32 = 3221225472;
pub const XSHAL_SIMIO_SIZE: u32 = 536870912;
pub const XSHAL_MAGIC_EXIT: u32 = 0;
pub const XSHAL_ALLVALID_CACHEATTR_WRITEBACK: u32 = 572657938;
pub const XSHAL_ALLVALID_CACHEATTR_WRITEALLOC: u32 = 572657938;
pub const XSHAL_ALLVALID_CACHEATTR_WRITETHRU: u32 = 572657938;
pub const XSHAL_ALLVALID_CACHEATTR_BYPASS: u32 = 572662306;
pub const XSHAL_ALLVALID_CACHEATTR_DEFAULT: u32 = 572657938;
pub const XSHAL_STRICT_CACHEATTR_WRITEBACK: u32 = 4294906143;
pub const XSHAL_STRICT_CACHEATTR_WRITEALLOC: u32 = 4294906143;
pub const XSHAL_STRICT_CACHEATTR_WRITETHRU: u32 = 4294906143;
pub const XSHAL_STRICT_CACHEATTR_BYPASS: u32 = 4294910511;
pub const XSHAL_STRICT_CACHEATTR_DEFAULT: u32 = 4294906143;
pub const XSHAL_TRAPNULL_CACHEATTR_WRITEBACK: u32 = 572657951;
pub const XSHAL_TRAPNULL_CACHEATTR_WRITEALLOC: u32 = 572657951;
pub const XSHAL_TRAPNULL_CACHEATTR_WRITETHRU: u32 = 572657951;
pub const XSHAL_TRAPNULL_CACHEATTR_BYPASS: u32 = 572662319;
pub const XSHAL_TRAPNULL_CACHEATTR_DEFAULT: u32 = 572657951;
pub const XSHAL_ISS_CACHEATTR_WRITEBACK: u32 = 572657951;
pub const XSHAL_ISS_CACHEATTR_WRITEALLOC: u32 = 572657951;
pub const XSHAL_ISS_CACHEATTR_WRITETHRU: u32 = 572657951;
pub const XSHAL_ISS_CACHEATTR_BYPASS: u32 = 572662319;
pub const XSHAL_ISS_CACHEATTR_DEFAULT: u32 = 572657951;
pub const XSHAL_ISS_PIPE_REGIONS: u32 = 0;
pub const XSHAL_ISS_SDRAM_REGIONS: u32 = 0;
pub const XSHAL_XT2000_CACHEATTR_WRITEBACK: u32 = 4280422687;
pub const XSHAL_XT2000_CACHEATTR_WRITEALLOC: u32 = 4280422687;
pub const XSHAL_XT2000_CACHEATTR_WRITETHRU: u32 = 4280422687;
pub const XSHAL_XT2000_CACHEATTR_BYPASS: u32 = 4280427055;
pub const XSHAL_XT2000_CACHEATTR_DEFAULT: u32 = 4280422687;
pub const XSHAL_XT2000_PIPE_REGIONS: u32 = 0;
pub const XSHAL_XT2000_SDRAM_REGIONS: u32 = 1088;
pub const XSHAL_VECTORS_PACKED: u32 = 0;
pub const XSHAL_STATIC_VECTOR_SELECT: u32 = 1;
pub const XSHAL_RESET_VECTOR_VADDR: u32 = 1073742848;
pub const XSHAL_RESET_VECTOR_PADDR: u32 = 1073742848;
pub const XSHAL_RESET_VECTOR_SIZE: u32 = 768;
pub const XSHAL_RESET_VECTOR_ISROM: u32 = 0;
pub const XSHAL_USER_VECTOR_SIZE: u32 = 56;
pub const XSHAL_USER_VECTOR_ISROM: u32 = 0;
pub const XSHAL_PROGRAMEXC_VECTOR_SIZE: u32 = 56;
pub const XSHAL_USEREXC_VECTOR_SIZE: u32 = 56;
pub const XSHAL_KERNEL_VECTOR_SIZE: u32 = 56;
pub const XSHAL_KERNEL_VECTOR_ISROM: u32 = 0;
pub const XSHAL_STACKEDEXC_VECTOR_SIZE: u32 = 56;
pub const XSHAL_KERNELEXC_VECTOR_SIZE: u32 = 56;
pub const XSHAL_DOUBLEEXC_VECTOR_SIZE: u32 = 64;
pub const XSHAL_DOUBLEEXC_VECTOR_ISROM: u32 = 0;
pub const XSHAL_WINDOW_VECTORS_SIZE: u32 = 376;
pub const XSHAL_WINDOW_VECTORS_ISROM: u32 = 0;
pub const XSHAL_INTLEVEL2_VECTOR_SIZE: u32 = 56;
pub const XSHAL_INTLEVEL2_VECTOR_ISROM: u32 = 0;
pub const XSHAL_INTLEVEL3_VECTOR_SIZE: u32 = 56;
pub const XSHAL_INTLEVEL3_VECTOR_ISROM: u32 = 0;
pub const XSHAL_INTLEVEL4_VECTOR_SIZE: u32 = 56;
pub const XSHAL_INTLEVEL4_VECTOR_ISROM: u32 = 0;
pub const XSHAL_INTLEVEL5_VECTOR_SIZE: u32 = 56;
pub const XSHAL_INTLEVEL5_VECTOR_ISROM: u32 = 0;
pub const XSHAL_INTLEVEL6_VECTOR_SIZE: u32 = 56;
pub const XSHAL_INTLEVEL6_VECTOR_ISROM: u32 = 0;
pub const XSHAL_DEBUG_VECTOR_SIZE: u32 = 56;
pub const XSHAL_DEBUG_VECTOR_ISROM: u32 = 0;
pub const XSHAL_NMI_VECTOR_SIZE: u32 = 56;
pub const XSHAL_NMI_VECTOR_ISROM: u32 = 0;
pub const XSHAL_INTLEVEL7_VECTOR_SIZE: u32 = 56;
pub const EXCCAUSE_EXCCAUSE_SHIFT: u32 = 0;
pub const EXCCAUSE_EXCCAUSE_MASK: u32 = 63;
pub const EXCCAUSE_ILLEGAL: u32 = 0;
pub const EXCCAUSE_SYSCALL: u32 = 1;
pub const EXCCAUSE_INSTR_ERROR: u32 = 2;
pub const EXCCAUSE_IFETCHERROR: u32 = 2;
pub const EXCCAUSE_LOAD_STORE_ERROR: u32 = 3;
pub const EXCCAUSE_LOADSTOREERROR: u32 = 3;
pub const EXCCAUSE_LEVEL1_INTERRUPT: u32 = 4;
pub const EXCCAUSE_LEVEL1INTERRUPT: u32 = 4;
pub const EXCCAUSE_ALLOCA: u32 = 5;
pub const EXCCAUSE_DIVIDE_BY_ZERO: u32 = 6;
pub const EXCCAUSE_SPECULATION: u32 = 7;
pub const EXCCAUSE_PC_ERROR: u32 = 7;
pub const EXCCAUSE_PRIVILEGED: u32 = 8;
pub const EXCCAUSE_UNALIGNED: u32 = 9;
pub const EXCCAUSE_EXTREG_PRIVILEGE: u32 = 10;
pub const EXCCAUSE_EXCLUSIVE_ERROR: u32 = 11;
pub const EXCCAUSE_INSTR_DATA_ERROR: u32 = 12;
pub const EXCCAUSE_LOAD_STORE_DATA_ERROR: u32 = 13;
pub const EXCCAUSE_INSTR_ADDR_ERROR: u32 = 14;
pub const EXCCAUSE_LOAD_STORE_ADDR_ERROR: u32 = 15;
pub const EXCCAUSE_ITLB_MISS: u32 = 16;
pub const EXCCAUSE_ITLB_MULTIHIT: u32 = 17;
pub const EXCCAUSE_INSTR_RING: u32 = 18;
pub const EXCCAUSE_INSTR_PROHIBITED: u32 = 20;
pub const EXCCAUSE_DTLB_MISS: u32 = 24;
pub const EXCCAUSE_DTLB_MULTIHIT: u32 = 25;
pub const EXCCAUSE_LOAD_STORE_RING: u32 = 26;
pub const EXCCAUSE_LOAD_PROHIBITED: u32 = 28;
pub const EXCCAUSE_STORE_PROHIBITED: u32 = 29;
pub const EXCCAUSE_CP0_DISABLED: u32 = 32;
pub const EXCCAUSE_CP1_DISABLED: u32 = 33;
pub const EXCCAUSE_CP2_DISABLED: u32 = 34;
pub const EXCCAUSE_CP3_DISABLED: u32 = 35;
pub const EXCCAUSE_CP4_DISABLED: u32 = 36;
pub const EXCCAUSE_CP5_DISABLED: u32 = 37;
pub const EXCCAUSE_CP6_DISABLED: u32 = 38;
pub const EXCCAUSE_CP7_DISABLED: u32 = 39;
pub const PS_WOE_SHIFT: u32 = 18;
pub const PS_WOE_MASK: u32 = 262144;
pub const PS_WOE: u32 = 262144;
pub const PS_CALLINC_SHIFT: u32 = 16;
pub const PS_CALLINC_MASK: u32 = 196608;
pub const PS_OWB_SHIFT: u32 = 8;
pub const PS_OWB_MASK: u32 = 3840;
pub const PS_RING_SHIFT: u32 = 6;
pub const PS_RING_MASK: u32 = 192;
pub const PS_UM_SHIFT: u32 = 5;
pub const PS_UM_MASK: u32 = 32;
pub const PS_UM: u32 = 32;
pub const PS_EXCM_SHIFT: u32 = 4;
pub const PS_EXCM_MASK: u32 = 16;
pub const PS_EXCM: u32 = 16;
pub const PS_INTLEVEL_SHIFT: u32 = 0;
pub const PS_INTLEVEL_MASK: u32 = 15;
pub const PS_WOE_ABI: u32 = 262144;
pub const PS_PROGSTACK_SHIFT: u32 = 5;
pub const PS_PROGSTACK_MASK: u32 = 32;
pub const PS_PROG_SHIFT: u32 = 5;
pub const PS_PROG_MASK: u32 = 32;
pub const PS_PROG: u32 = 32;
pub const DBREAKC_MASK_SHIFT: u32 = 0;
pub const DBREAKC_MASK_MASK: u32 = 63;
pub const DBREAKC_LOADBREAK_SHIFT: u32 = 30;
pub const DBREAKC_LOADBREAK_MASK: u32 = 1073741824;
pub const DBREAKC_STOREBREAK_SHIFT: u32 = 31;
pub const DBREAKC_STOREBREAK_MASK: u32 = 2147483648;
pub const DEBUGCAUSE_DEBUGINT_SHIFT: u32 = 5;
pub const DEBUGCAUSE_DEBUGINT_MASK: u32 = 32;
pub const DEBUGCAUSE_BREAKN_SHIFT: u32 = 4;
pub const DEBUGCAUSE_BREAKN_MASK: u32 = 16;
pub const DEBUGCAUSE_BREAK_SHIFT: u32 = 3;
pub const DEBUGCAUSE_BREAK_MASK: u32 = 8;
pub const DEBUGCAUSE_DBREAK_SHIFT: u32 = 2;
pub const DEBUGCAUSE_DBREAK_MASK: u32 = 4;
pub const DEBUGCAUSE_IBREAK_SHIFT: u32 = 1;
pub const DEBUGCAUSE_IBREAK_MASK: u32 = 2;
pub const DEBUGCAUSE_ICOUNT_SHIFT: u32 = 0;
pub const DEBUGCAUSE_ICOUNT_MASK: u32 = 1;
pub const MESR_MEME: u32 = 1;
pub const MESR_MEME_SHIFT: u32 = 0;
pub const MESR_DME: u32 = 2;
pub const MESR_DME_SHIFT: u32 = 1;
pub const MESR_RCE: u32 = 16;
pub const MESR_RCE_SHIFT: u32 = 4;
pub const MESR_ERRENAB: u32 = 256;
pub const MESR_ERRENAB_SHIFT: u32 = 8;
pub const MESR_ERRTEST: u32 = 512;
pub const MESR_ERRTEST_SHIFT: u32 = 9;
pub const MESR_DATEXC: u32 = 1024;
pub const MESR_DATEXC_SHIFT: u32 = 10;
pub const MESR_INSEXC: u32 = 2048;
pub const MESR_INSEXC_SHIFT: u32 = 11;
pub const MESR_WAYNUM_SHIFT: u32 = 16;
pub const MESR_ACCTYPE_SHIFT: u32 = 20;
pub const MESR_MEMTYPE_SHIFT: u32 = 24;
pub const MESR_ERRTYPE_SHIFT: u32 = 30;
pub const MEMCTL_SNOOP_EN_SHIFT: u32 = 1;
pub const MEMCTL_SNOOP_EN: u32 = 2;
pub const MEMCTL_L0IBUF_EN_SHIFT: u32 = 0;
pub const MEMCTL_L0IBUF_EN: u32 = 1;
pub const MEMCTL_INV_EN_SHIFT: u32 = 23;
pub const MEMCTL_INV_EN: u32 = 8388608;
pub const MEMCTL_DCWU_SHIFT: u32 = 8;
pub const MEMCTL_DCWU_BITS: u32 = 5;
pub const MEMCTL_DCWA_SHIFT: u32 = 13;
pub const MEMCTL_DCWA_BITS: u32 = 5;
pub const MEMCTL_ICWU_SHIFT: u32 = 18;
pub const MEMCTL_ICWU_BITS: u32 = 5;
pub const MEMCTL_DCWU_MASK: u32 = 7936;
pub const MEMCTL_DCWA_MASK: u32 = 253952;
pub const MEMCTL_ICWU_MASK: u32 = 8126464;
pub const MEMCTL_DCWU_CLR_MASK: i32 = -7937;
pub const MEMCTL_DCWA_CLR_MASK: i32 = -253953;
pub const MEMCTL_ICWU_CLR_MASK: i32 = -8126465;
pub const MEMCTL_DCW_CLR_MASK: i32 = -1;
pub const MEMCTL_IDCW_CLR_MASK: i32 = -1;
pub const XT_CP0_SA: u32 = 0;
pub const XT_CPENABLE: u32 = 0;
pub const XT_CPSTORED: u32 = 2;
pub const XT_CP_CS_ST: u32 = 4;
pub const XT_CP_ASA: u32 = 8;
pub const STK_INTEXC_EXTRA: u32 = 0;
pub const XT_CLIB_CONTEXT_AREA_SIZE: u32 = 0;
pub const XT_USER_SIZE: u32 = 1024;
pub const configUSE_PREEMPTION: u32 = 1;
pub const configUSE_IDLE_HOOK: u32 = 0;
pub const configUSE_TICK_HOOK: u32 = 0;
pub const configTICK_RATE_HZ: u32 = 100;
pub const configMAX_PRIORITIES: u32 = 25;
pub const configMINIMAL_STACK_SIZE: u32 = 768;
pub const configIDLE_TASK_STACK_SIZE: u32 = 768;
pub const configISR_STACK_SIZE: u32 = 1536;
pub const configAPPLICATION_ALLOCATED_HEAP: u32 = 1;
pub const configTOTAL_HEAP_SIZE: u32 = 65536;
pub const configMAX_TASK_NAME_LEN: u32 = 16;
pub const configUSE_TRACE_FACILITY_2: u32 = 0;
pub const configBENCHMARK: u32 = 0;
pub const configUSE_16_BIT_TICKS: u32 = 0;
pub const configIDLE_SHOULD_YIELD: u32 = 0;
pub const configQUEUE_REGISTRY_SIZE: u32 = 0;
pub const configUSE_MUTEXES: u32 = 1;
pub const configUSE_RECURSIVE_MUTEXES: u32 = 1;
pub const configUSE_COUNTING_SEMAPHORES: u32 = 1;
pub const CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY: u32 = 1;
pub const configCHECK_FOR_STACK_OVERFLOW: u32 = 2;
pub const configUSE_CO_ROUTINES: u32 = 0;
pub const configMAX_CO_ROUTINE_PRIORITIES: u32 = 2;
pub const INCLUDE_vTaskPrioritySet: u32 = 1;
pub const INCLUDE_uxTaskPriorityGet: u32 = 1;
pub const INCLUDE_vTaskDelete: u32 = 1;
pub const INCLUDE_vTaskCleanUpResources: u32 = 0;
pub const INCLUDE_vTaskSuspend: u32 = 1;
pub const INCLUDE_vTaskDelayUntil: u32 = 1;
pub const INCLUDE_vTaskDelay: u32 = 1;
pub const INCLUDE_uxTaskGetStackHighWaterMark: u32 = 1;
pub const INCLUDE_pcTaskGetTaskName: u32 = 1;
pub const INCLUDE_xTaskGetIdleTaskHandle: u32 = 1;
pub const INCLUDE_pxTaskGetStackStart: u32 = 1;
pub const INCLUDE_xSemaphoreGetMutexHolder: u32 = 1;
pub const configKERNEL_INTERRUPT_PRIORITY: u32 = 1;
pub const configMAX_SYSCALL_INTERRUPT_PRIORITY: u32 = 3;
pub const configSUPPORT_DYNAMIC_ALLOCATION: u32 = 1;
pub const configSUPPORT_STATIC_ALLOCATION: u32 = 0;
pub const configUSE_TIMERS: u32 = 1;
pub const configTIMER_TASK_PRIORITY: u32 = 1;
pub const configTIMER_QUEUE_LENGTH: u32 = 10;
pub const configTIMER_TASK_STACK_DEPTH: u32 = 1024;
pub const INCLUDE_xTimerPendFunctionCall: u32 = 1;
pub const INCLUDE_eTaskGetState: u32 = 1;
pub const configUSE_QUEUE_SETS: u32 = 1;
pub const configXT_BOARD: u32 = 1;
pub const configXT_SIMULATOR: u32 = 0;
pub const configENABLE_TASK_SNAPSHOT: u32 = 1;
pub const configCHECK_MUTEX_GIVEN_BY_OWNER: u32 = 0;
pub const errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY: i32 = -1;
pub const errQUEUE_BLOCKED: i32 = -4;
pub const errQUEUE_YIELD: i32 = -5;
pub const configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES: u32 = 0;
pub const pdINTEGRITY_CHECK_VALUE: u32 = 1515870810;
pub const pdFREERTOS_ERRNO_NONE: u32 = 0;
pub const pdFREERTOS_ERRNO_ENOENT: u32 = 2;
pub const pdFREERTOS_ERRNO_EINTR: u32 = 4;
pub const pdFREERTOS_ERRNO_EIO: u32 = 5;
pub const pdFREERTOS_ERRNO_ENXIO: u32 = 6;
pub const pdFREERTOS_ERRNO_EBADF: u32 = 9;
pub const pdFREERTOS_ERRNO_EAGAIN: u32 = 11;
pub const pdFREERTOS_ERRNO_EWOULDBLOCK: u32 = 11;
pub const pdFREERTOS_ERRNO_ENOMEM: u32 = 12;
pub const pdFREERTOS_ERRNO_EACCES: u32 = 13;
pub const pdFREERTOS_ERRNO_EFAULT: u32 = 14;
pub const pdFREERTOS_ERRNO_EBUSY: u32 = 16;
pub const pdFREERTOS_ERRNO_EEXIST: u32 = 17;
pub const pdFREERTOS_ERRNO_EXDEV: u32 = 18;
pub const pdFREERTOS_ERRNO_ENODEV: u32 = 19;
pub const pdFREERTOS_ERRNO_ENOTDIR: u32 = 20;
pub const pdFREERTOS_ERRNO_EISDIR: u32 = 21;
pub const pdFREERTOS_ERRNO_EINVAL: u32 = 22;
pub const pdFREERTOS_ERRNO_ENOSPC: u32 = 28;
pub const pdFREERTOS_ERRNO_ESPIPE: u32 = 29;
pub const pdFREERTOS_ERRNO_EROFS: u32 = 30;
pub const pdFREERTOS_ERRNO_EUNATCH: u32 = 42;
pub const pdFREERTOS_ERRNO_EBADE: u32 = 50;
pub const pdFREERTOS_ERRNO_EFTYPE: u32 = 79;
pub const pdFREERTOS_ERRNO_ENMFILE: u32 = 89;
pub const pdFREERTOS_ERRNO_ENOTEMPTY: u32 = 90;
pub const pdFREERTOS_ERRNO_ENAMETOOLONG: u32 = 91;
pub const pdFREERTOS_ERRNO_EOPNOTSUPP: u32 = 95;
pub const pdFREERTOS_ERRNO_ENOBUFS: u32 = 105;
pub const pdFREERTOS_ERRNO_ENOPROTOOPT: u32 = 109;
pub const pdFREERTOS_ERRNO_EADDRINUSE: u32 = 112;
pub const pdFREERTOS_ERRNO_ETIMEDOUT: u32 = 116;
pub const pdFREERTOS_ERRNO_EINPROGRESS: u32 = 119;
pub const pdFREERTOS_ERRNO_EALREADY: u32 = 120;
pub const pdFREERTOS_ERRNO_EADDRNOTAVAIL: u32 = 125;
pub const pdFREERTOS_ERRNO_EISCONN: u32 = 127;
pub const pdFREERTOS_ERRNO_ENOTCONN: u32 = 128;
pub const pdFREERTOS_ERRNO_ENOMEDIUM: u32 = 135;
pub const pdFREERTOS_ERRNO_EILSEQ: u32 = 138;
pub const pdFREERTOS_ERRNO_ECANCELED: u32 = 140;
pub const pdFREERTOS_LITTLE_ENDIAN: u32 = 0;
pub const pdFREERTOS_BIG_ENDIAN: u32 = 1;
pub const pdLITTLE_ENDIAN: u32 = 0;
pub const pdBIG_ENDIAN: u32 = 1;
pub const portCRITICAL_NESTING_IN_TCB: u32 = 1;
pub const portSTACK_GROWTH: i32 = -1;
pub const portBYTE_ALIGNMENT: u32 = 4;
pub const portBYTE_ALIGNMENT_MASK: u32 = 3;
pub const portNUM_CONFIGURABLE_REGIONS: u32 = 1;
pub const portHAS_STACK_OVERFLOW_CHECKING: u32 = 0;
pub const configSTACK_ALLOCATION_FROM_SEPARATE_HEAP: u32 = 0;
pub const configUSE_NEWLIB_REENTRANT: u32 = 0;
pub const INCLUDE_xTaskDelayUntil: u32 = 1;
pub const INCLUDE_xTaskAbortDelay: u32 = 0;
pub const INCLUDE_xQueueGetMutexHolder: u32 = 0;
pub const INCLUDE_xTaskGetHandle: u32 = 0;
pub const INCLUDE_uxTaskGetStackHighWaterMark2: u32 = 0;
pub const INCLUDE_xTaskResumeFromISR: u32 = 1;
pub const INCLUDE_xTaskGetSchedulerState: u32 = 0;
pub const INCLUDE_xTaskGetCurrentTaskHandle: u32 = 0;
pub const configUSE_DAEMON_TASK_STARTUP_HOOK: u32 = 0;
pub const configUSE_APPLICATION_TASK_TAG: u32 = 0;
pub const configUSE_ALTERNATIVE_API: u32 = 0;
pub const configASSERT_DEFINED: u32 = 1;
pub const configPRECONDITION_DEFINED: u32 = 0;
pub const configRECORD_STACK_HIGH_ADDRESS: u32 = 0;
pub const configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H: u32 = 0;
pub const configGENERATE_RUN_TIME_STATS: u32 = 0;
pub const configUSE_MALLOC_FAILED_HOOK: u32 = 0;
pub const configEXPECTED_IDLE_TIME_BEFORE_SLEEP: u32 = 2;
pub const configUSE_TIME_SLICING: u32 = 1;
pub const configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS: u32 = 0;
pub const configUSE_STATS_FORMATTING_FUNCTIONS: u32 = 0;
pub const configUSE_TRACE_FACILITY: u32 = 0;
pub const configUSE_PORT_OPTIMISED_TASK_SELECTION: u32 = 0;
pub const configUSE_TASK_NOTIFICATIONS: u32 = 1;
pub const configTASK_NOTIFICATION_ARRAY_ENTRIES: u32 = 1;
pub const configUSE_POSIX_ERRNO: u32 = 0;
pub const portTICK_TYPE_IS_ATOMIC: u32 = 0;
pub const configINITIAL_TICK_COUNT: u32 = 0;
pub const configENABLE_BACKWARD_COMPATIBILITY: u32 = 1;
pub const configUSE_TASK_FPU_SUPPORT: u32 = 1;
pub const configENABLE_MPU: u32 = 0;
pub const configENABLE_FPU: u32 = 1;
pub const configENABLE_TRUSTZONE: u32 = 1;
pub const configRUN_FREERTOS_SECURE_ONLY: u32 = 0;
pub const configRUN_ADDITIONAL_TESTS: u32 = 0;
pub const tskKERNEL_VERSION_NUMBER: &'static [u8; 8usize] = b"V10.4.4\0";
pub const tskKERNEL_VERSION_MAJOR: u32 = 10;
pub const tskKERNEL_VERSION_MINOR: u32 = 4;
pub const tskKERNEL_VERSION_BUILD: u32 = 4;
pub const tskMPU_REGION_READ_ONLY: u32 = 1;
pub const tskMPU_REGION_READ_WRITE: u32 = 2;
pub const tskMPU_REGION_EXECUTE_NEVER: u32 = 4;
pub const tskMPU_REGION_NORMAL_MEMORY: u32 = 8;
pub const tskMPU_REGION_DEVICE_MEMORY: u32 = 16;
pub const tskDEFAULT_INDEX_TO_NOTIFY: u32 = 0;
pub const ATOMIC_COMPARE_AND_SWAP_SUCCESS: u32 = 1;
pub const ATOMIC_COMPARE_AND_SWAP_FAILURE: u32 = 0;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type intmax_t = chlorine::c_longlong;
pub type uintmax_t = chlorine::c_ulonglong;
pub type wchar_t = chlorine::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: chlorine::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        16usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        8usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
extern "C" {
    pub static Xthal_rev_no: chlorine::c_uint;
}
extern "C" {
    pub fn xthal_save_extra(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_restore_extra(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_save_cpregs(base: *mut chlorine::c_void, arg1: chlorine::c_int);
}
extern "C" {
    pub fn xthal_restore_cpregs(base: *mut chlorine::c_void, arg1: chlorine::c_int);
}
extern "C" {
    pub fn xthal_save_cp0(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_save_cp1(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_save_cp2(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_save_cp3(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_save_cp4(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_save_cp5(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_save_cp6(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_save_cp7(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_restore_cp0(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_restore_cp1(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_restore_cp2(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_restore_cp3(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_restore_cp4(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_restore_cp5(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_restore_cp6(base: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_restore_cp7(base: *mut chlorine::c_void);
}
extern "C" {
    pub static mut Xthal_cpregs_save_fn: [*mut chlorine::c_void; 8usize];
}
extern "C" {
    pub static mut Xthal_cpregs_restore_fn: [*mut chlorine::c_void; 8usize];
}
extern "C" {
    pub static mut Xthal_cpregs_save_nw_fn: [*mut chlorine::c_void; 8usize];
}
extern "C" {
    pub static mut Xthal_cpregs_restore_nw_fn: [*mut chlorine::c_void; 8usize];
}
extern "C" {
    pub static Xthal_extra_size: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_extra_align: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_cpregs_size: [chlorine::c_uint; 8usize];
}
extern "C" {
    pub static Xthal_cpregs_align: [chlorine::c_uint; 8usize];
}
extern "C" {
    pub static Xthal_all_extra_size: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_all_extra_align: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_cp_names: [*const chlorine::c_char; 8usize];
}
extern "C" {
    pub fn xthal_init_mem_extra(arg1: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_init_mem_cp(arg1: *mut chlorine::c_void, arg2: chlorine::c_int);
}
extern "C" {
    pub static Xthal_num_coprocessors: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_cp_num: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_cp_max: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_cp_mask: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_num_aregs: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_num_aregs_log2: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_icache_linewidth: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_dcache_linewidth: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_icache_linesize: chlorine::c_ushort;
}
extern "C" {
    pub static Xthal_dcache_linesize: chlorine::c_ushort;
}
extern "C" {
    pub static Xthal_icache_size: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_dcache_size: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_dcache_is_writeback: chlorine::c_uchar;
}
extern "C" {
    pub fn xthal_icache_region_invalidate(addr: *mut chlorine::c_void, size: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_dcache_region_invalidate(addr: *mut chlorine::c_void, size: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_dcache_region_writeback(addr: *mut chlorine::c_void, size: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_dcache_region_writeback_inv(addr: *mut chlorine::c_void, size: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_icache_line_invalidate(addr: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_dcache_line_invalidate(addr: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_dcache_line_writeback(addr: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_dcache_line_writeback_inv(addr: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_icache_sync();
}
extern "C" {
    pub fn xthal_dcache_sync();
}
extern "C" {
    pub fn xthal_icache_get_ways() -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_icache_set_ways(ways: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_dcache_get_ways() -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_dcache_set_ways(ways: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_cache_coherence_on();
}
extern "C" {
    pub fn xthal_cache_coherence_off();
}
extern "C" {
    pub fn xthal_cache_coherence_optin();
}
extern "C" {
    pub fn xthal_cache_coherence_optout();
}
extern "C" {
    pub fn xthal_get_cache_prefetch() -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_set_cache_prefetch(arg1: chlorine::c_int) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_set_cache_prefetch_long(arg1: chlorine::c_ulonglong) -> chlorine::c_int;
}
extern "C" {
    pub static Xthal_debug_configured: chlorine::c_int;
}
extern "C" {
    pub fn xthal_set_soft_break(addr: *mut chlorine::c_void) -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_remove_soft_break(addr: *mut chlorine::c_void, arg1: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_disassemble(
        instr_buf: *mut chlorine::c_uchar,
        tgt_addr: *mut chlorine::c_void,
        buffer: *mut chlorine::c_char,
        buflen: chlorine::c_uint,
        options: chlorine::c_uint,
    ) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_disassemble_size(instr_buf: *mut chlorine::c_uchar) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_memcpy(
        dst: *mut chlorine::c_void,
        src: *const chlorine::c_void,
        len: chlorine::c_uint,
    ) -> *mut chlorine::c_void;
}
extern "C" {
    pub fn xthal_bcopy(
        src: *const chlorine::c_void,
        dst: *mut chlorine::c_void,
        len: chlorine::c_uint,
    ) -> *mut chlorine::c_void;
}
extern "C" {
    pub fn xthal_compare_and_set(
        addr: *mut chlorine::c_int,
        test_val: chlorine::c_int,
        compare_val: chlorine::c_int,
    ) -> chlorine::c_int;
}
extern "C" {
    pub static Xthal_release_major: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_release_minor: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_release_name: *const chlorine::c_char;
}
extern "C" {
    pub static Xthal_release_internal: *const chlorine::c_char;
}
extern "C" {
    pub static Xthal_memory_order: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_windowed: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_density: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_booleans: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_loops: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_nsa: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_minmax: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_sext: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_clamps: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_mac16: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_mul16: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_fp: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_speculation: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_threadptr: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_pif: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_num_writebuffer_entries: chlorine::c_ushort;
}
extern "C" {
    pub static Xthal_build_unique_id: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_hw_configid0: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_hw_configid1: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_hw_release_major: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_hw_release_minor: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_hw_release_name: *const chlorine::c_char;
}
extern "C" {
    pub static Xthal_hw_release_internal: *const chlorine::c_char;
}
extern "C" {
    pub fn xthal_clear_regcached_code();
}
extern "C" {
    pub fn xthal_window_spill();
}
extern "C" {
    pub fn xthal_validate_cp(arg1: chlorine::c_int);
}
extern "C" {
    pub fn xthal_invalidate_cp(arg1: chlorine::c_int);
}
extern "C" {
    pub fn xthal_set_cpenable(arg1: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_get_cpenable() -> chlorine::c_uint;
}
extern "C" {
    pub static Xthal_num_intlevels: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_num_interrupts: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_excm_level: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_intlevel_mask: [chlorine::c_uint; 16usize];
}
extern "C" {
    pub static Xthal_intlevel_andbelow_mask: [chlorine::c_uint; 16usize];
}
extern "C" {
    pub static Xthal_intlevel: [chlorine::c_uchar; 32usize];
}
extern "C" {
    pub static Xthal_inttype: [chlorine::c_uchar; 32usize];
}
extern "C" {
    pub static Xthal_inttype_mask: [chlorine::c_uint; 11usize];
}
extern "C" {
    pub static Xthal_timer_interrupt: [chlorine::c_int; 4usize];
}
extern "C" {
    pub fn xthal_get_intenable() -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_set_intenable(arg1: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_get_interrupt() -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_set_intset(arg1: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_set_intclear(arg1: chlorine::c_uint);
}
extern "C" {
    pub static Xthal_num_ibreak: chlorine::c_int;
}
extern "C" {
    pub static Xthal_num_dbreak: chlorine::c_int;
}
extern "C" {
    pub static Xthal_have_ccount: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_num_ccompare: chlorine::c_uchar;
}
extern "C" {
    pub fn xthal_get_ccount() -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_set_ccompare(arg1: chlorine::c_int, arg2: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_get_ccompare(arg1: chlorine::c_int) -> chlorine::c_uint;
}
extern "C" {
    pub static Xthal_have_prid: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_exceptions: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_xea_version: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_interrupts: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_highlevel_interrupts: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_nmi: chlorine::c_uchar;
}
extern "C" {
    pub fn xthal_get_prid() -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_vpri_to_intlevel(vpri: chlorine::c_uint) -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_intlevel_to_vpri(intlevel: chlorine::c_uint) -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_int_enable(arg1: chlorine::c_uint) -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_int_disable(arg1: chlorine::c_uint) -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_set_int_vpri(intnum: chlorine::c_int, vpri: chlorine::c_int) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_get_int_vpri(intnum: chlorine::c_int) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_set_vpri_locklevel(intlevel: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_get_vpri_locklevel() -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_set_vpri(vpri: chlorine::c_uint) -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_get_vpri() -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_set_vpri_intlevel(intlevel: chlorine::c_uint) -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_set_vpri_lock() -> chlorine::c_uint;
}
pub type XtHalVoidFunc = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub static mut Xthal_tram_pending: chlorine::c_uint;
}
extern "C" {
    pub static mut Xthal_tram_enabled: chlorine::c_uint;
}
extern "C" {
    pub static mut Xthal_tram_sync: chlorine::c_uint;
}
extern "C" {
    pub fn xthal_tram_pending_to_service() -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_tram_done(serviced_mask: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_tram_set_sync(intnum: chlorine::c_int, sync: chlorine::c_int) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_set_tram_trigger_func(trigger_fn: XtHalVoidFunc) -> XtHalVoidFunc;
}
extern "C" {
    pub static Xthal_num_instrom: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_num_instram: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_num_datarom: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_num_dataram: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_num_xlmi: chlorine::c_uchar;
}
extern "C" {
    pub static mut Xthal_instrom_vaddr: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static mut Xthal_instrom_paddr: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static mut Xthal_instrom_size: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static mut Xthal_instram_vaddr: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static mut Xthal_instram_paddr: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static mut Xthal_instram_size: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static mut Xthal_datarom_vaddr: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static mut Xthal_datarom_paddr: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static mut Xthal_datarom_size: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static mut Xthal_dataram_vaddr: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static mut Xthal_dataram_paddr: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static mut Xthal_dataram_size: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static mut Xthal_xlmi_vaddr: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static mut Xthal_xlmi_paddr: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static mut Xthal_xlmi_size: [chlorine::c_uint; 0usize];
}
extern "C" {
    pub static Xthal_icache_setwidth: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_dcache_setwidth: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_icache_ways: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_dcache_ways: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_icache_line_lockable: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_dcache_line_lockable: chlorine::c_uchar;
}
extern "C" {
    pub fn xthal_get_cacheattr() -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_get_icacheattr() -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_get_dcacheattr() -> chlorine::c_uint;
}
extern "C" {
    pub fn xthal_set_cacheattr(arg1: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_set_icacheattr(arg1: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_set_dcacheattr(arg1: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_set_region_attribute(
        addr: *mut chlorine::c_void,
        size: chlorine::c_uint,
        cattr: chlorine::c_uint,
        flags: chlorine::c_uint,
    ) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_icache_enable();
}
extern "C" {
    pub fn xthal_dcache_enable();
}
extern "C" {
    pub fn xthal_icache_disable();
}
extern "C" {
    pub fn xthal_dcache_disable();
}
extern "C" {
    pub fn xthal_icache_all_invalidate();
}
extern "C" {
    pub fn xthal_dcache_all_invalidate();
}
extern "C" {
    pub fn xthal_dcache_all_writeback();
}
extern "C" {
    pub fn xthal_dcache_all_writeback_inv();
}
extern "C" {
    pub fn xthal_icache_all_unlock();
}
extern "C" {
    pub fn xthal_dcache_all_unlock();
}
extern "C" {
    pub fn xthal_icache_region_lock(addr: *mut chlorine::c_void, size: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_dcache_region_lock(addr: *mut chlorine::c_void, size: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_icache_region_unlock(addr: *mut chlorine::c_void, size: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_dcache_region_unlock(addr: *mut chlorine::c_void, size: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_icache_hugerange_invalidate(addr: *mut chlorine::c_void, size: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_icache_hugerange_unlock(addr: *mut chlorine::c_void, size: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_dcache_hugerange_invalidate(addr: *mut chlorine::c_void, size: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_dcache_hugerange_unlock(addr: *mut chlorine::c_void, size: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_dcache_hugerange_writeback(addr: *mut chlorine::c_void, size: chlorine::c_uint);
}
extern "C" {
    pub fn xthal_dcache_hugerange_writeback_inv(
        addr: *mut chlorine::c_void,
        size: chlorine::c_uint,
    );
}
extern "C" {
    pub fn xthal_icache_line_lock(addr: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_dcache_line_lock(addr: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_icache_line_unlock(addr: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_dcache_line_unlock(addr: *mut chlorine::c_void);
}
extern "C" {
    pub fn xthal_memep_inject_error(
        addr: *mut chlorine::c_void,
        size: chlorine::c_int,
        flags: chlorine::c_int,
    );
}
extern "C" {
    pub static Xthal_have_spanning_way: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_identity_map: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_mimic_cacheattr: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_xlt_cacheattr: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_cacheattr: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_have_tlbs: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_mmu_asid_bits: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_mmu_asid_kernel: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_mmu_rings: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_mmu_ring_bits: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_mmu_sr_bits: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_mmu_ca_bits: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_mmu_max_pte_page_size: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_mmu_min_pte_page_size: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_itlb_way_bits: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_itlb_ways: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_itlb_arf_ways: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_dtlb_way_bits: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_dtlb_ways: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_dtlb_arf_ways: chlorine::c_uchar;
}
extern "C" {
    pub fn xthal_static_v2p(
        vaddr: chlorine::c_uint,
        paddrp: *mut chlorine::c_uint,
    ) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_static_p2v(
        paddr: chlorine::c_uint,
        vaddrp: *mut chlorine::c_uint,
        cached: chlorine::c_uint,
    ) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_set_region_translation(
        vaddr: *mut chlorine::c_void,
        paddr: *mut chlorine::c_void,
        size: chlorine::c_uint,
        cache_atr: chlorine::c_uint,
        flags: chlorine::c_uint,
    ) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_v2p(
        arg1: *mut chlorine::c_void,
        arg2: *mut *mut chlorine::c_void,
        arg3: *mut chlorine::c_uint,
        arg4: *mut chlorine::c_uint,
    ) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_invalidate_region(addr: *mut chlorine::c_void) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_set_region_translation_raw(
        vaddr: *mut chlorine::c_void,
        paddr: *mut chlorine::c_void,
        cattr: chlorine::c_uint,
    ) -> chlorine::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xthal_MPU_entry {
    pub as_: u32,
    pub at: u32,
}
#[test]
fn bindgen_test_layout_xthal_MPU_entry() {
    assert_eq!(
        ::core::mem::size_of::<xthal_MPU_entry>(),
        8usize,
        concat!("Size of: ", stringify!(xthal_MPU_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<xthal_MPU_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(xthal_MPU_entry))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xthal_MPU_entry>())).as_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xthal_MPU_entry),
            "::",
            stringify!(as_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xthal_MPU_entry>())).at as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xthal_MPU_entry),
            "::",
            stringify!(at)
        )
    );
}
extern "C" {
    pub static mut Xthal_mpu_bgmap: [xthal_MPU_entry; 0usize];
}
extern "C" {
    pub fn xthal_is_kernel_readable(accessRights: u32) -> i32;
}
extern "C" {
    pub fn xthal_is_kernel_writeable(accessRights: u32) -> i32;
}
extern "C" {
    pub fn xthal_is_kernel_executable(accessRights: u32) -> i32;
}
extern "C" {
    pub fn xthal_is_user_readable(accessRights: u32) -> i32;
}
extern "C" {
    pub fn xthal_is_user_writeable(accessRights: u32) -> i32;
}
extern "C" {
    pub fn xthal_is_user_executable(accessRights: u32) -> i32;
}
extern "C" {
    pub fn xthal_encode_memory_type(x: u32) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_is_cacheable(memoryType: u32) -> i32;
}
extern "C" {
    pub fn xthal_is_writeback(memoryType: u32) -> i32;
}
extern "C" {
    pub fn xthal_is_device(memoryType: u32) -> i32;
}
extern "C" {
    pub fn xthal_read_map(entries: *mut xthal_MPU_entry) -> i32;
}
extern "C" {
    pub fn xthal_write_map(entries: *const xthal_MPU_entry, n: u32);
}
extern "C" {
    pub fn xthal_check_map(entries: *const xthal_MPU_entry, n: u32) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_get_entry_for_address(
        vaddr: *mut chlorine::c_void,
        infgmap: *mut i32,
    ) -> xthal_MPU_entry;
}
extern "C" {
    pub fn xthal_calc_cacheadrdis(e: *const xthal_MPU_entry, n: u32) -> u32;
}
extern "C" {
    pub fn xthal_mpu_set_region_attribute(
        vaddr: *mut chlorine::c_void,
        size: usize,
        accessRights: i32,
        memoryType: i32,
        flags: u32,
    ) -> chlorine::c_int;
}
extern "C" {
    pub fn xthal_read_background_map(entries: *mut xthal_MPU_entry) -> i32;
}
extern "C" {
    pub static Xthal_cp_id_FPU: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_cp_mask_FPU: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_cp_id_XCHAL_CP1_IDENT: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_cp_mask_XCHAL_CP1_IDENT: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_cp_id_XCHAL_CP2_IDENT: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_cp_mask_XCHAL_CP2_IDENT: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_cp_id_XCHAL_CP3_IDENT: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_cp_mask_XCHAL_CP3_IDENT: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_cp_id_XCHAL_CP4_IDENT: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_cp_mask_XCHAL_CP4_IDENT: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_cp_id_XCHAL_CP5_IDENT: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_cp_mask_XCHAL_CP5_IDENT: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_cp_id_XCHAL_CP6_IDENT: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_cp_mask_XCHAL_CP6_IDENT: chlorine::c_uint;
}
extern "C" {
    pub static Xthal_cp_id_XCHAL_CP7_IDENT: chlorine::c_uchar;
}
extern "C" {
    pub static Xthal_cp_mask_XCHAL_CP7_IDENT: chlorine::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XtExcFrame {
    pub exit: u32,
    pub pc: u32,
    pub ps: u32,
    pub a0: u32,
    pub a1: u32,
    pub a2: u32,
    pub a3: u32,
    pub a4: u32,
    pub a5: u32,
    pub a6: u32,
    pub a7: u32,
    pub a8: u32,
    pub a9: u32,
    pub a10: u32,
    pub a11: u32,
    pub a12: u32,
    pub a13: u32,
    pub a14: u32,
    pub a15: u32,
    pub sar: u32,
    pub exccause: u32,
    pub excvaddr: u32,
    pub lbeg: u32,
    pub lend: u32,
    pub lcount: u32,
    pub tmp0: u32,
    pub tmp1: u32,
    pub tmp2: u32,
}
#[test]
fn bindgen_test_layout_XtExcFrame() {
    assert_eq!(
        ::core::mem::size_of::<XtExcFrame>(),
        112usize,
        concat!("Size of: ", stringify!(XtExcFrame))
    );
    assert_eq!(
        ::core::mem::align_of::<XtExcFrame>(),
        4usize,
        concat!("Alignment of ", stringify!(XtExcFrame))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).exit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(exit)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).pc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).ps as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a2 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a3 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a4 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a5 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a6 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a7 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a8 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a8)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a9 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a9)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a10 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a10)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a11 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a11)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a12 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a12)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a13 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a13)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a14 as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a14)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).a15 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(a15)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).sar as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(sar)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).exccause as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(exccause)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).excvaddr as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(excvaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).lbeg as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(lbeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).lend as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(lend)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).lcount as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(lcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).tmp0 as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(tmp0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).tmp1 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(tmp1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtExcFrame>())).tmp2 as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(XtExcFrame),
            "::",
            stringify!(tmp2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XtSolFrame {
    pub exit: chlorine::c_long,
    pub pc: chlorine::c_long,
    pub ps: chlorine::c_long,
    pub next: chlorine::c_long,
    pub a0: chlorine::c_long,
    pub a1: chlorine::c_long,
    pub a2: chlorine::c_long,
    pub a3: chlorine::c_long,
}
#[test]
fn bindgen_test_layout_XtSolFrame() {
    assert_eq!(
        ::core::mem::size_of::<XtSolFrame>(),
        32usize,
        concat!("Size of: ", stringify!(XtSolFrame))
    );
    assert_eq!(
        ::core::mem::align_of::<XtSolFrame>(),
        4usize,
        concat!("Alignment of ", stringify!(XtSolFrame))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtSolFrame>())).exit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XtSolFrame),
            "::",
            stringify!(exit)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtSolFrame>())).pc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XtSolFrame),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtSolFrame>())).ps as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XtSolFrame),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtSolFrame>())).next as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XtSolFrame),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtSolFrame>())).a0 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XtSolFrame),
            "::",
            stringify!(a0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtSolFrame>())).a1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XtSolFrame),
            "::",
            stringify!(a1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtSolFrame>())).a2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XtSolFrame),
            "::",
            stringify!(a2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<XtSolFrame>())).a3 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XtSolFrame),
            "::",
            stringify!(a3)
        )
    );
}
extern "C" {
    pub fn vPortPanic(
        file: *const chlorine::c_char,
        file_len: usize,
        line: usize,
        func: *const chlorine::c_char,
        func_len: usize,
    );
}
extern "C" {
    pub fn strlen(str_: *const chlorine::c_char) -> chlorine::c_uint;
}
pub type TaskFunction_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut chlorine::c_void)>;
pub type StackType_t = u32;
pub type BaseType_t = chlorine::c_int;
pub type UBaseType_t = chlorine::c_uint;
pub type TickType_t = u32;
extern "C" {
    pub fn vTaskEnterCritical();
}
extern "C" {
    pub fn vTaskExitCritical();
}
extern "C" {
    pub fn vPortYield();
}
extern "C" {
    pub fn _frxt_setup_switch();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xMPU_SETTINGS {
    pub coproc_area: *mut StackType_t,
}
#[test]
fn bindgen_test_layout_xMPU_SETTINGS() {
    assert_eq!(
        ::core::mem::size_of::<xMPU_SETTINGS>(),
        4usize,
        concat!("Size of: ", stringify!(xMPU_SETTINGS))
    );
    assert_eq!(
        ::core::mem::align_of::<xMPU_SETTINGS>(),
        4usize,
        concat!("Alignment of ", stringify!(xMPU_SETTINGS))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMPU_SETTINGS>())).coproc_area as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xMPU_SETTINGS),
            "::",
            stringify!(coproc_area)
        )
    );
}
extern "C" {
    pub fn pxPortInitialiseStack(
        pxTopOfStack: *mut StackType_t,
        pxCode: TaskFunction_t,
        pvParameters: *mut chlorine::c_void,
        xRunPrivileged: BaseType_t,
    ) -> *mut StackType_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HeapRegion {
    pub pucStartAddress: *mut u8,
    pub xSizeInBytes: usize,
}
#[test]
fn bindgen_test_layout_HeapRegion() {
    assert_eq!(
        ::core::mem::size_of::<HeapRegion>(),
        8usize,
        concat!("Size of: ", stringify!(HeapRegion))
    );
    assert_eq!(
        ::core::mem::align_of::<HeapRegion>(),
        4usize,
        concat!("Alignment of ", stringify!(HeapRegion))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<HeapRegion>())).pucStartAddress as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapRegion),
            "::",
            stringify!(pucStartAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<HeapRegion>())).xSizeInBytes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapRegion),
            "::",
            stringify!(xSizeInBytes)
        )
    );
}
pub type HeapRegion_t = HeapRegion;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xHeapStats {
    pub xAvailableHeapSpaceInBytes: usize,
    pub xSizeOfLargestFreeBlockInBytes: usize,
    pub xSizeOfSmallestFreeBlockInBytes: usize,
    pub xNumberOfFreeBlocks: usize,
    pub xMinimumEverFreeBytesRemaining: usize,
    pub xNumberOfSuccessfulAllocations: usize,
    pub xNumberOfSuccessfulFrees: usize,
}
#[test]
fn bindgen_test_layout_xHeapStats() {
    assert_eq!(
        ::core::mem::size_of::<xHeapStats>(),
        28usize,
        concat!("Size of: ", stringify!(xHeapStats))
    );
    assert_eq!(
        ::core::mem::align_of::<xHeapStats>(),
        4usize,
        concat!("Alignment of ", stringify!(xHeapStats))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xHeapStats>())).xAvailableHeapSpaceInBytes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xAvailableHeapSpaceInBytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xHeapStats>())).xSizeOfLargestFreeBlockInBytes as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xSizeOfLargestFreeBlockInBytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xHeapStats>())).xSizeOfSmallestFreeBlockInBytes as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xSizeOfSmallestFreeBlockInBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xHeapStats>())).xNumberOfFreeBlocks as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xNumberOfFreeBlocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xHeapStats>())).xMinimumEverFreeBytesRemaining as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xMinimumEverFreeBytesRemaining)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xHeapStats>())).xNumberOfSuccessfulAllocations as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xNumberOfSuccessfulAllocations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xHeapStats>())).xNumberOfSuccessfulFrees as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xNumberOfSuccessfulFrees)
        )
    );
}
pub type HeapStats_t = xHeapStats;
extern "C" {
    pub fn vPortDefineHeapRegions(pxHeapRegions: *const HeapRegion_t);
}
extern "C" {
    pub fn vPortGetHeapStats(pxHeapStats: *mut HeapStats_t);
}
extern "C" {
    pub fn pvPortMalloc(xSize: usize) -> *mut chlorine::c_void;
}
extern "C" {
    pub fn vPortFree(pv: *mut chlorine::c_void);
}
extern "C" {
    pub fn vPortInitialiseBlocks();
}
extern "C" {
    pub fn xPortGetFreeHeapSize() -> usize;
}
extern "C" {
    pub fn xPortGetMinimumEverFreeHeapSize() -> usize;
}
extern "C" {
    pub fn xPortStartScheduler() -> BaseType_t;
}
extern "C" {
    pub fn vPortEndScheduler();
}
extern "C" {
    pub fn vPortStoreTaskMPUSettings(
        xMPUSettings: *mut xMPU_SETTINGS,
        xRegions: *const xMEMORY_REGION,
        pxBottomOfStack: *mut StackType_t,
        ulStackDepth: u32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut chlorine::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_xSTATIC_LIST_ITEM() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_LIST_ITEM>(),
        20usize,
        concat!("Size of: ", stringify!(xSTATIC_LIST_ITEM))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_LIST_ITEM>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_LIST_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST_ITEM>())).xDummy2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST_ITEM),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST_ITEM>())).pvDummy3 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST_ITEM),
            "::",
            stringify!(pvDummy3)
        )
    );
}
pub type StaticListItem_t = xSTATIC_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_MINI_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut chlorine::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_xSTATIC_MINI_LIST_ITEM() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_MINI_LIST_ITEM>(),
        12usize,
        concat!("Size of: ", stringify!(xSTATIC_MINI_LIST_ITEM))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_MINI_LIST_ITEM>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_MINI_LIST_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_MINI_LIST_ITEM>())).xDummy2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_MINI_LIST_ITEM),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSTATIC_MINI_LIST_ITEM>())).pvDummy3 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_MINI_LIST_ITEM),
            "::",
            stringify!(pvDummy3)
        )
    );
}
pub type StaticMiniListItem_t = xSTATIC_MINI_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_LIST {
    pub uxDummy2: UBaseType_t,
    pub pvDummy3: *mut chlorine::c_void,
    pub xDummy4: StaticMiniListItem_t,
}
#[test]
fn bindgen_test_layout_xSTATIC_LIST() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_LIST>(),
        20usize,
        concat!("Size of: ", stringify!(xSTATIC_LIST))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_LIST>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_LIST))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST>())).uxDummy2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST),
            "::",
            stringify!(uxDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST>())).pvDummy3 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST),
            "::",
            stringify!(pvDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST>())).xDummy4 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST),
            "::",
            stringify!(xDummy4)
        )
    );
}
pub type StaticList_t = xSTATIC_LIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_TCB {
    pub pxDummy1: *mut chlorine::c_void,
    pub xDummy2: xMPU_SETTINGS,
    pub xDummy3: [StaticListItem_t; 2usize],
    pub uxDummy5: UBaseType_t,
    pub pxDummy6: *mut chlorine::c_void,
    pub ucDummy7: [u8; 16usize],
    pub uxDummy9: UBaseType_t,
    pub uxDummy12: [UBaseType_t; 2usize],
    pub pvDummy15: [*mut chlorine::c_void; 1usize],
    pub ulDummy18: [u32; 1usize],
    pub ucDummy19: [u8; 1usize],
    pub uxDummy20: u8,
}
#[test]
fn bindgen_test_layout_xSTATIC_TCB() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_TCB>(),
        96usize,
        concat!("Size of: ", stringify!(xSTATIC_TCB))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_TCB>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_TCB))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).pxDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(pxDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).xDummy2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).xDummy3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(xDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).uxDummy5 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(uxDummy5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).pxDummy6 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(pxDummy6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).ucDummy7 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(ucDummy7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).uxDummy9 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(uxDummy9)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).uxDummy12 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(uxDummy12)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).pvDummy15 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(pvDummy15)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).ulDummy18 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(ulDummy18)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).ucDummy19 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(ucDummy19)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).uxDummy20 as *const _ as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(uxDummy20)
        )
    );
}
pub type StaticTask_t = xSTATIC_TCB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_QUEUE {
    pub pvDummy1: [*mut chlorine::c_void; 3usize],
    pub u: xSTATIC_QUEUE__bindgen_ty_1,
    pub xDummy3: [StaticList_t; 2usize],
    pub uxDummy4: [UBaseType_t; 3usize],
    pub ucDummy5: [u8; 2usize],
    pub pvDummy7: *mut chlorine::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xSTATIC_QUEUE__bindgen_ty_1 {
    pub pvDummy2: *mut chlorine::c_void,
    pub uxDummy2: UBaseType_t,
}
#[test]
fn bindgen_test_layout_xSTATIC_QUEUE__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_QUEUE__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(xSTATIC_QUEUE__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_QUEUE__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_QUEUE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSTATIC_QUEUE__bindgen_ty_1>())).pvDummy2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE__bindgen_ty_1),
            "::",
            stringify!(pvDummy2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSTATIC_QUEUE__bindgen_ty_1>())).uxDummy2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE__bindgen_ty_1),
            "::",
            stringify!(uxDummy2)
        )
    );
}
#[test]
fn bindgen_test_layout_xSTATIC_QUEUE() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_QUEUE>(),
        76usize,
        concat!("Size of: ", stringify!(xSTATIC_QUEUE))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_QUEUE>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_QUEUE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).pvDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(pvDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).u as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).xDummy3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(xDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).uxDummy4 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(uxDummy4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).ucDummy5 as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(ucDummy5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).pvDummy7 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(pvDummy7)
        )
    );
}
pub type StaticQueue_t = xSTATIC_QUEUE;
pub type StaticSemaphore_t = StaticQueue_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_EVENT_GROUP {
    pub xDummy1: TickType_t,
    pub xDummy2: StaticList_t,
}
#[test]
fn bindgen_test_layout_xSTATIC_EVENT_GROUP() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_EVENT_GROUP>(),
        24usize,
        concat!("Size of: ", stringify!(xSTATIC_EVENT_GROUP))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_EVENT_GROUP>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_EVENT_GROUP))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_EVENT_GROUP>())).xDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_EVENT_GROUP),
            "::",
            stringify!(xDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_EVENT_GROUP>())).xDummy2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_EVENT_GROUP),
            "::",
            stringify!(xDummy2)
        )
    );
}
pub type StaticEventGroup_t = xSTATIC_EVENT_GROUP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_TIMER {
    pub pvDummy1: *mut chlorine::c_void,
    pub xDummy2: StaticListItem_t,
    pub xDummy3: TickType_t,
    pub pvDummy5: *mut chlorine::c_void,
    pub pvDummy6: TaskFunction_t,
    pub ucDummy8: u8,
}
#[test]
fn bindgen_test_layout_xSTATIC_TIMER() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_TIMER>(),
        40usize,
        concat!("Size of: ", stringify!(xSTATIC_TIMER))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_TIMER>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_TIMER))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).pvDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(pvDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).xDummy2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).xDummy3 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(xDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).pvDummy5 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(pvDummy5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).pvDummy6 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(pvDummy6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).ucDummy8 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(ucDummy8)
        )
    );
}
pub type StaticTimer_t = xSTATIC_TIMER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_STREAM_BUFFER {
    pub uxDummy1: [usize; 4usize],
    pub pvDummy2: [*mut chlorine::c_void; 3usize],
    pub ucDummy3: u8,
}
#[test]
fn bindgen_test_layout_xSTATIC_STREAM_BUFFER() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_STREAM_BUFFER>(),
        32usize,
        concat!("Size of: ", stringify!(xSTATIC_STREAM_BUFFER))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_STREAM_BUFFER>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_STREAM_BUFFER))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_STREAM_BUFFER>())).uxDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(uxDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_STREAM_BUFFER>())).pvDummy2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(pvDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_STREAM_BUFFER>())).ucDummy3 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(ucDummy3)
        )
    );
}
pub type StaticStreamBuffer_t = xSTATIC_STREAM_BUFFER;
pub type StaticMessageBuffer_t = StaticStreamBuffer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xLIST_ITEM {
    pub xItemValue: TickType_t,
    pub pxNext: *mut xLIST_ITEM,
    pub pxPrevious: *mut xLIST_ITEM,
    pub pvOwner: *mut chlorine::c_void,
    pub pvContainer: *mut xLIST,
}
#[test]
fn bindgen_test_layout_xLIST_ITEM() {
    assert_eq!(
        ::core::mem::size_of::<xLIST_ITEM>(),
        20usize,
        concat!("Size of: ", stringify!(xLIST_ITEM))
    );
    assert_eq!(
        ::core::mem::align_of::<xLIST_ITEM>(),
        4usize,
        concat!("Alignment of ", stringify!(xLIST_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).xItemValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(xItemValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).pxNext as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(pxNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).pxPrevious as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(pxPrevious)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).pvOwner as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(pvOwner)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).pvContainer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(pvContainer)
        )
    );
}
pub type ListItem_t = xLIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xMINI_LIST_ITEM {
    pub xItemValue: TickType_t,
    pub pxNext: *mut xLIST_ITEM,
    pub pxPrevious: *mut xLIST_ITEM,
}
#[test]
fn bindgen_test_layout_xMINI_LIST_ITEM() {
    assert_eq!(
        ::core::mem::size_of::<xMINI_LIST_ITEM>(),
        12usize,
        concat!("Size of: ", stringify!(xMINI_LIST_ITEM))
    );
    assert_eq!(
        ::core::mem::align_of::<xMINI_LIST_ITEM>(),
        4usize,
        concat!("Alignment of ", stringify!(xMINI_LIST_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMINI_LIST_ITEM>())).xItemValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xMINI_LIST_ITEM),
            "::",
            stringify!(xItemValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMINI_LIST_ITEM>())).pxNext as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xMINI_LIST_ITEM),
            "::",
            stringify!(pxNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMINI_LIST_ITEM>())).pxPrevious as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xMINI_LIST_ITEM),
            "::",
            stringify!(pxPrevious)
        )
    );
}
pub type MiniListItem_t = xMINI_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xLIST {
    pub uxNumberOfItems: UBaseType_t,
    pub pxIndex: *mut ListItem_t,
    pub xListEnd: MiniListItem_t,
}
#[test]
fn bindgen_test_layout_xLIST() {
    assert_eq!(
        ::core::mem::size_of::<xLIST>(),
        20usize,
        concat!("Size of: ", stringify!(xLIST))
    );
    assert_eq!(
        ::core::mem::align_of::<xLIST>(),
        4usize,
        concat!("Alignment of ", stringify!(xLIST))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST>())).uxNumberOfItems as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST),
            "::",
            stringify!(uxNumberOfItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST>())).pxIndex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST),
            "::",
            stringify!(pxIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST>())).xListEnd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST),
            "::",
            stringify!(xListEnd)
        )
    );
}
pub type List_t = xLIST;
extern "C" {
    pub fn vListInitialise(pxList: *mut List_t);
}
extern "C" {
    pub fn vListInitialiseItem(pxItem: *mut ListItem_t);
}
extern "C" {
    pub fn vListInsert(pxList: *mut List_t, pxNewListItem: *mut ListItem_t);
}
extern "C" {
    pub fn vListInsertEnd(pxList: *mut List_t, pxNewListItem: *mut ListItem_t);
}
extern "C" {
    pub fn uxListRemove(pxItemToRemove: *mut ListItem_t) -> UBaseType_t;
}
#[doc = " task. h"]
#[doc = ""]
#[doc = " Type by which tasks are referenced.  For example, a call to xTaskCreate"]
#[doc = " returns (via a pointer parameter) an TaskHandle_t variable that can then"]
#[doc = " be used as a parameter to vTaskDelete to delete the task."]
#[doc = ""]
#[doc = " \\defgroup TaskHandle_t TaskHandle_t"]
#[doc = " \\ingroup Tasks"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tskTaskControlBlock {
    _unused: [u8; 0],
}
pub type TaskHandle_t = *mut tskTaskControlBlock;
pub type TaskHookFunction_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut chlorine::c_void) -> BaseType_t>;
pub const eTaskState_eRunning: eTaskState = 0;
pub const eTaskState_eReady: eTaskState = 1;
pub const eTaskState_eBlocked: eTaskState = 2;
pub const eTaskState_eSuspended: eTaskState = 3;
pub const eTaskState_eDeleted: eTaskState = 4;
pub const eTaskState_eInvalid: eTaskState = 5;
pub type eTaskState = chlorine::c_uint;
pub const eNotifyAction_eNoAction: eNotifyAction = 0;
pub const eNotifyAction_eSetBits: eNotifyAction = 1;
pub const eNotifyAction_eIncrement: eNotifyAction = 2;
pub const eNotifyAction_eSetValueWithOverwrite: eNotifyAction = 3;
pub const eNotifyAction_eSetValueWithoutOverwrite: eNotifyAction = 4;
pub type eNotifyAction = chlorine::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTIME_OUT {
    pub xOverflowCount: BaseType_t,
    pub xTimeOnEntering: TickType_t,
}
#[test]
fn bindgen_test_layout_xTIME_OUT() {
    assert_eq!(
        ::core::mem::size_of::<xTIME_OUT>(),
        8usize,
        concat!("Size of: ", stringify!(xTIME_OUT))
    );
    assert_eq!(
        ::core::mem::align_of::<xTIME_OUT>(),
        4usize,
        concat!("Alignment of ", stringify!(xTIME_OUT))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTIME_OUT>())).xOverflowCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xTIME_OUT),
            "::",
            stringify!(xOverflowCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTIME_OUT>())).xTimeOnEntering as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xTIME_OUT),
            "::",
            stringify!(xTimeOnEntering)
        )
    );
}
pub type TimeOut_t = xTIME_OUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xMEMORY_REGION {
    pub pvBaseAddress: *mut chlorine::c_void,
    pub ulLengthInBytes: u32,
    pub ulParameters: u32,
}
#[test]
fn bindgen_test_layout_xMEMORY_REGION() {
    assert_eq!(
        ::core::mem::size_of::<xMEMORY_REGION>(),
        12usize,
        concat!("Size of: ", stringify!(xMEMORY_REGION))
    );
    assert_eq!(
        ::core::mem::align_of::<xMEMORY_REGION>(),
        4usize,
        concat!("Alignment of ", stringify!(xMEMORY_REGION))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMEMORY_REGION>())).pvBaseAddress as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xMEMORY_REGION),
            "::",
            stringify!(pvBaseAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMEMORY_REGION>())).ulLengthInBytes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xMEMORY_REGION),
            "::",
            stringify!(ulLengthInBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMEMORY_REGION>())).ulParameters as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xMEMORY_REGION),
            "::",
            stringify!(ulParameters)
        )
    );
}
pub type MemoryRegion_t = xMEMORY_REGION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTASK_PARAMETERS {
    pub pvTaskCode: TaskFunction_t,
    pub pcName: *const chlorine::c_char,
    pub usStackDepth: u16,
    pub pvParameters: *mut chlorine::c_void,
    pub uxPriority: UBaseType_t,
    pub puxStackBuffer: *mut StackType_t,
    pub xRegions: [MemoryRegion_t; 1usize],
}
#[test]
fn bindgen_test_layout_xTASK_PARAMETERS() {
    assert_eq!(
        ::core::mem::size_of::<xTASK_PARAMETERS>(),
        36usize,
        concat!("Size of: ", stringify!(xTASK_PARAMETERS))
    );
    assert_eq!(
        ::core::mem::align_of::<xTASK_PARAMETERS>(),
        4usize,
        concat!("Alignment of ", stringify!(xTASK_PARAMETERS))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).pvTaskCode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(pvTaskCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).pcName as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(pcName)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).usStackDepth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(usStackDepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).pvParameters as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(pvParameters)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).uxPriority as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(uxPriority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xTASK_PARAMETERS>())).puxStackBuffer as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(puxStackBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).xRegions as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(xRegions)
        )
    );
}
pub type TaskParameters_t = xTASK_PARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTASK_STATUS {
    pub xHandle: TaskHandle_t,
    pub pcTaskName: *const chlorine::c_char,
    pub xTaskNumber: UBaseType_t,
    pub eCurrentState: eTaskState,
    pub uxCurrentPriority: UBaseType_t,
    pub uxBasePriority: UBaseType_t,
    pub ulRunTimeCounter: u32,
    pub pxStackBase: *mut StackType_t,
    pub usStackHighWaterMark: u16,
}
#[test]
fn bindgen_test_layout_xTASK_STATUS() {
    assert_eq!(
        ::core::mem::size_of::<xTASK_STATUS>(),
        36usize,
        concat!("Size of: ", stringify!(xTASK_STATUS))
    );
    assert_eq!(
        ::core::mem::align_of::<xTASK_STATUS>(),
        4usize,
        concat!("Alignment of ", stringify!(xTASK_STATUS))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).xHandle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(xHandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).pcTaskName as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(pcTaskName)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).xTaskNumber as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(xTaskNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).eCurrentState as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(eCurrentState)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).uxCurrentPriority as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(uxCurrentPriority)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).uxBasePriority as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(uxBasePriority)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).ulRunTimeCounter as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(ulRunTimeCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).pxStackBase as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(pxStackBase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xTASK_STATUS>())).usStackHighWaterMark as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(usStackHighWaterMark)
        )
    );
}
pub type TaskStatus_t = xTASK_STATUS;
pub const eSleepModeStatus_eAbortSleep: eSleepModeStatus = 0;
pub const eSleepModeStatus_eStandardSleep: eSleepModeStatus = 1;
pub const eSleepModeStatus_eNoTasksWaitingTimeout: eSleepModeStatus = 2;
pub type eSleepModeStatus = chlorine::c_uint;
extern "C" {
    pub fn xTaskCreate(
        pxTaskCode: TaskFunction_t,
        pcName: *const chlorine::c_char,
        usStackDepth: u16,
        pvParameters: *mut chlorine::c_void,
        uxPriority: UBaseType_t,
        pxCreatedTask: *mut TaskHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xTaskCreateRestricted(
        pxTaskDefinition: *const TaskParameters_t,
        pxCreatedTask: *mut TaskHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Memory regions are assigned to a restricted task when the task is created by"]
    #[doc = " a call to xTaskCreateRestricted().  These regions can be redefined using"]
    #[doc = " vTaskAllocateMPURegions()."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the task being updated."]
    #[doc = ""]
    #[doc = " @param xRegions A pointer to a MemoryRegion_t structure that contains the"]
    #[doc = " new memory region definitions."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " // Define an array of MemoryRegion_t structures that configures an MPU region"]
    #[doc = " // allowing read/write access for 1024 bytes starting at the beginning of the"]
    #[doc = " // ucOneKByte array.  The other two of the maximum 3 definable regions are"]
    #[doc = " // unused so set to zero."]
    #[doc = " static const MemoryRegion_t xAltRegions[ portNUM_CONFIGURABLE_REGIONS ] ="]
    #[doc = " {"]
    #[doc = "  // Base address     Length      Parameters"]
    #[doc = "  { ucOneKByte,       1024,       portMPU_REGION_READ_WRITE },"]
    #[doc = "  { 0,                0,          0 },"]
    #[doc = "  { 0,                0,          0 }"]
    #[doc = " };"]
    #[doc = ""]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = "  // This task was created such that it has access to certain regions of"]
    #[doc = "  // memory as defined by the MPU configuration.  At some point it is"]
    #[doc = "  // desired that these MPU regions are replaced with that defined in the"]
    #[doc = "  // xAltRegions const struct above.  Use a call to vTaskAllocateMPURegions()"]
    #[doc = "  // for this purpose.  NULL is used as the task handle to indicate that this"]
    #[doc = "  // function should modify the MPU regions of the calling task."]
    #[doc = "  vTaskAllocateMPURegions( NULL, xAltRegions );"]
    #[doc = ""]
    #[doc = "  // Now the task can continue its function, but from this point on can only"]
    #[doc = "  // access its stack and the ucOneKByte array (unless any other statically"]
    #[doc = "  // defined or shared regions have been declared elsewhere)."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xTaskCreateRestricted xTaskCreateRestricted"]
    #[doc = " \\ingroup Tasks"]
    pub fn vTaskAllocateMPURegions(xTask: TaskHandle_t, pxRegions: *const MemoryRegion_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskDelete( TaskHandle_t xTaskToDelete );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskDelete must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Remove a task from the RTOS real time kernel's management.  The task being"]
    #[doc = " deleted will be removed from all ready, blocked, suspended and event lists."]
    #[doc = ""]
    #[doc = " NOTE:  The idle task is responsible for freeing the kernel allocated"]
    #[doc = " memory from tasks that have been deleted.  It is therefore important that"]
    #[doc = " the idle task is not starved of microcontroller processing time if your"]
    #[doc = " application makes any calls to vTaskDelete ().  Memory allocated by the"]
    #[doc = " task code is not automatically freed, and should be freed before the task"]
    #[doc = " is deleted."]
    #[doc = ""]
    #[doc = " See the demo application file death.c for sample code that utilises"]
    #[doc = " vTaskDelete ()."]
    #[doc = ""]
    #[doc = " @param xTaskToDelete The handle of the task to be deleted.  Passing NULL will"]
    #[doc = " cause the calling task to be deleted."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vOtherFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create the task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // Use the handle to delete the task."]
    #[doc = "   vTaskDelete( xHandle );"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup vTaskDelete vTaskDelete"]
    #[doc = " \\ingroup Tasks"]
    pub fn vTaskDelete(xTaskToDelete: TaskHandle_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskDelay( const TickType_t xTicksToDelay );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Delay a task for a given number of ticks.  The actual time that the"]
    #[doc = " task remains blocked depends on the tick rate.  The constant"]
    #[doc = " portTICK_PERIOD_MS can be used to calculate real time from the tick"]
    #[doc = " rate - with the resolution of one tick period."]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskDelay must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " vTaskDelay() specifies a time at which the task wishes to unblock relative to"]
    #[doc = " the time at which vTaskDelay() is called.  For example, specifying a block"]
    #[doc = " period of 100 ticks will cause the task to unblock 100 ticks after"]
    #[doc = " vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method"]
    #[doc = " of controlling the frequency of a periodic task as the path taken through the"]
    #[doc = " code, as well as other task and interrupt activity, will effect the frequency"]
    #[doc = " at which vTaskDelay() gets called and therefore the time at which the task"]
    #[doc = " next executes.  See xTaskDelayUntil() for an alternative API function designed"]
    #[doc = " to facilitate fixed frequency execution.  It does this by specifying an"]
    #[doc = " absolute time (rather than a relative time) at which the calling task should"]
    #[doc = " unblock."]
    #[doc = ""]
    #[doc = " @param xTicksToDelay The amount of time, in tick periods, that"]
    #[doc = " the calling task should block."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = ""]
    #[doc = " void vTaskFunction( void * pvParameters )"]
    #[doc = " {"]
    #[doc = " // Block for 500ms."]
    #[doc = " const TickType_t xDelay = 500 / portTICK_PERIOD_MS;"]
    #[doc = ""]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Simply toggle the LED every 500ms, blocking between each toggle."]
    #[doc = "       vToggleLED();"]
    #[doc = "       vTaskDelay( xDelay );"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " \\defgroup vTaskDelay vTaskDelay"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskDelay(xTicksToDelay: TickType_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskDelayUntil( TickType_t *pxPreviousWakeTime, const TickType_t xTimeIncrement );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_xTaskDelayUntil must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Delay a task until a specified time.  This function can be used by periodic"]
    #[doc = " tasks to ensure a constant execution frequency."]
    #[doc = ""]
    #[doc = " This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will"]
    #[doc = " cause a task to block for the specified number of ticks from the time vTaskDelay () is"]
    #[doc = " called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed"]
    #[doc = " execution frequency as the time between a task starting to execute and that task"]
    #[doc = " calling vTaskDelay () may not be fixed [the task may take a different path though the"]
    #[doc = " code between calls, or may get interrupted or preempted a different number of times"]
    #[doc = " each time it executes]."]
    #[doc = ""]
    #[doc = " Whereas vTaskDelay () specifies a wake time relative to the time at which the function"]
    #[doc = " is called, xTaskDelayUntil () specifies the absolute (exact) time at which it wishes to"]
    #[doc = " unblock."]
    #[doc = ""]
    #[doc = " The macro pdMS_TO_TICKS() can be used to calculate the number of ticks from a"]
    #[doc = " time specified in milliseconds with a resolution of one tick period."]
    #[doc = ""]
    #[doc = " @param pxPreviousWakeTime Pointer to a variable that holds the time at which the"]
    #[doc = " task was last unblocked.  The variable must be initialised with the current time"]
    #[doc = " prior to its first use (see the example below).  Following this the variable is"]
    #[doc = " automatically updated within xTaskDelayUntil ()."]
    #[doc = ""]
    #[doc = " @param xTimeIncrement The cycle time period.  The task will be unblocked at"]
    #[doc = " time *pxPreviousWakeTime + xTimeIncrement.  Calling xTaskDelayUntil with the"]
    #[doc = " same xTimeIncrement parameter value will cause the task to execute with"]
    #[doc = " a fixed interface period."]
    #[doc = ""]
    #[doc = " @return Value which can be used to check whether the task was actually delayed."]
    #[doc = " Will be pdTRUE if the task way delayed and pdFALSE otherwise.  A task will not"]
    #[doc = " be delayed if the next expected wake time is in the past."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " // Perform an action every 10 ticks."]
    #[doc = " void vTaskFunction( void * pvParameters )"]
    #[doc = " {"]
    #[doc = " TickType_t xLastWakeTime;"]
    #[doc = " const TickType_t xFrequency = 10;"]
    #[doc = " BaseType_t xWasDelayed;"]
    #[doc = ""]
    #[doc = "     // Initialise the xLastWakeTime variable with the current time."]
    #[doc = "     xLastWakeTime = xTaskGetTickCount ();"]
    #[doc = "     for( ;; )"]
    #[doc = "     {"]
    #[doc = "         // Wait for the next cycle."]
    #[doc = "         xWasDelayed = xTaskDelayUntil( &xLastWakeTime, xFrequency );"]
    #[doc = ""]
    #[doc = "         // Perform action here. xWasDelayed value can be used to determine"]
    #[doc = "         // whether a deadline was missed if the code here took too long."]
    #[doc = "     }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xTaskDelayUntil xTaskDelayUntil"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskDelayUntil(
        pxPreviousWakeTime: *mut TickType_t,
        xTimeIncrement: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskAbortDelay( TaskHandle_t xTask );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_xTaskAbortDelay must be defined as 1 in FreeRTOSConfig.h for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " A task will enter the Blocked state when it is waiting for an event.  The"]
    #[doc = " event it is waiting for can be a temporal event (waiting for a time), such"]
    #[doc = " as when vTaskDelay() is called, or an event on an object, such as when"]
    #[doc = " xQueueReceive() or ulTaskNotifyTake() is called.  If the handle of a task"]
    #[doc = " that is in the Blocked state is used in a call to xTaskAbortDelay() then the"]
    #[doc = " task will leave the Blocked state, and return from whichever function call"]
    #[doc = " placed the task into the Blocked state."]
    #[doc = ""]
    #[doc = " There is no 'FromISR' version of this function as an interrupt would need to"]
    #[doc = " know which object a task was blocked on in order to know which actions to"]
    #[doc = " take.  For example, if the task was blocked on a queue the interrupt handler"]
    #[doc = " would then need to know if the queue was locked."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the task to remove from the Blocked state."]
    #[doc = ""]
    #[doc = " @return If the task referenced by xTask was not in the Blocked state then"]
    #[doc = " pdFAIL is returned.  Otherwise pdPASS is returned."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskAbortDelay xTaskAbortDelay"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskAbortDelay(xTask: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_uxTaskPriorityGet must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Obtain the priority of any task."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task to be queried.  Passing a NULL"]
    #[doc = " handle results in the priority of the calling task being returned."]
    #[doc = ""]
    #[doc = " @return The priority of xTask."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to obtain the priority of the created task."]
    #[doc = "   // It was created with tskIDLE_PRIORITY, but may have changed"]
    #[doc = "   // it itself."]
    #[doc = "   if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )"]
    #[doc = "   {"]
    #[doc = "       // The task has changed it's priority."]
    #[doc = "   }"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Is our priority higher than the created task?"]
    #[doc = "   if( uxTaskPriorityGet( xHandle ) < uxTaskPriorityGet( NULL ) )"]
    #[doc = "   {"]
    #[doc = "       // Our priority (obtained using NULL handle) is higher."]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup uxTaskPriorityGet uxTaskPriorityGet"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn uxTaskPriorityGet(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " A version of uxTaskPriorityGet() that can be used from an ISR."]
    pub fn uxTaskPriorityGetFromISR(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " eTaskState eTaskGetState( TaskHandle_t xTask );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_eTaskGetState must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Obtain the state of any task.  States are encoded by the eTaskState"]
    #[doc = " enumerated type."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task to be queried."]
    #[doc = ""]
    #[doc = " @return The state of xTask at the time the function was called.  Note the"]
    #[doc = " state of the task might change between the function being called, and the"]
    #[doc = " functions return value being tested by the calling task."]
    pub fn eTaskGetState(xTask: TaskHandle_t) -> eTaskState;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " configUSE_TRACE_FACILITY must be defined as 1 for this function to be"]
    #[doc = " available.  See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Populates a TaskStatus_t structure with information about a task."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task being queried.  If xTask is NULL then"]
    #[doc = " information will be returned about the calling task."]
    #[doc = ""]
    #[doc = " @param pxTaskStatus A pointer to the TaskStatus_t structure that will be"]
    #[doc = " filled with information about the task referenced by the handle passed using"]
    #[doc = " the xTask parameter."]
    #[doc = ""]
    #[doc = " @xGetFreeStackSpace The TaskStatus_t structure contains a member to report"]
    #[doc = " the stack high water mark of the task being queried.  Calculating the stack"]
    #[doc = " high water mark takes a relatively long time, and can make the system"]
    #[doc = " temporarily unresponsive - so the xGetFreeStackSpace parameter is provided to"]
    #[doc = " allow the high water mark checking to be skipped.  The high watermark value"]
    #[doc = " will only be written to the TaskStatus_t structure if xGetFreeStackSpace is"]
    #[doc = " not set to pdFALSE;"]
    #[doc = ""]
    #[doc = " @param eState The TaskStatus_t structure contains a member to report the"]
    #[doc = " state of the task being queried.  Obtaining the task state is not as fast as"]
    #[doc = " a simple assignment - so the eState parameter is provided to allow the state"]
    #[doc = " information to be omitted from the TaskStatus_t structure.  To obtain state"]
    #[doc = " information then set eState to eInvalid - otherwise the value passed in"]
    #[doc = " eState will be reported as the task state in the TaskStatus_t structure."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = " TaskStatus_t xTaskDetails;"]
    #[doc = ""]
    #[doc = "  // Obtain the handle of a task from its name."]
    #[doc = "  xHandle = xTaskGetHandle( \"Task_Name\" );"]
    #[doc = ""]
    #[doc = "  // Check the handle is not NULL."]
    #[doc = "  configASSERT( xHandle );"]
    #[doc = ""]
    #[doc = "  // Use the handle to obtain further information about the task."]
    #[doc = "  vTaskGetInfo( xHandle,"]
    #[doc = "                &xTaskDetails,"]
    #[doc = "                pdTRUE, // Include the high water mark in xTaskDetails."]
    #[doc = "                eInvalid ); // Include the task state in xTaskDetails."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup vTaskGetInfo vTaskGetInfo"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskGetInfo(
        xTask: TaskHandle_t,
        pxTaskStatus: *mut TaskStatus_t,
        xGetFreeStackSpace: BaseType_t,
        eState: eTaskState,
    );
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Set the priority of any task."]
    #[doc = ""]
    #[doc = " A context switch will occur before the function returns if the priority"]
    #[doc = " being set is higher than the currently executing task."]
    #[doc = ""]
    #[doc = " @param xTask Handle to the task for which the priority is being set."]
    #[doc = " Passing a NULL handle results in the priority of the calling task being set."]
    #[doc = ""]
    #[doc = " @param uxNewPriority The priority to which the task will be set."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to raise the priority of the created task."]
    #[doc = "   vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use a NULL handle to raise our priority to the same value."]
    #[doc = "   vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup vTaskPrioritySet vTaskPrioritySet"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskPrioritySet(xTask: TaskHandle_t, uxNewPriority: UBaseType_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskSuspend( TaskHandle_t xTaskToSuspend );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskSuspend must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Suspend any task.  When suspended a task will never get any microcontroller"]
    #[doc = " processing time, no matter what its priority."]
    #[doc = ""]
    #[doc = " Calls to vTaskSuspend are not accumulative -"]
    #[doc = " i.e. calling vTaskSuspend () twice on the same task still only requires one"]
    #[doc = " call to vTaskResume () to ready the suspended task."]
    #[doc = ""]
    #[doc = " @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL"]
    #[doc = " handle will cause the calling task to be suspended."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to suspend the created task."]
    #[doc = "   vTaskSuspend( xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // The created task will not run during this period, unless"]
    #[doc = "   // another task calls vTaskResume( xHandle )."]
    #[doc = ""]
    #[doc = "   //..."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "   // Suspend ourselves."]
    #[doc = "   vTaskSuspend( NULL );"]
    #[doc = ""]
    #[doc = "   // We cannot get here unless another task calls vTaskResume"]
    #[doc = "   // with our handle as the parameter."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup vTaskSuspend vTaskSuspend"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskSuspend(xTaskToSuspend: TaskHandle_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskResume( TaskHandle_t xTaskToResume );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskSuspend must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Resumes a suspended task."]
    #[doc = ""]
    #[doc = " A task that has been suspended by one or more calls to vTaskSuspend ()"]
    #[doc = " will be made available for running again by a single call to"]
    #[doc = " vTaskResume ()."]
    #[doc = ""]
    #[doc = " @param xTaskToResume Handle to the task being readied."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to suspend the created task."]
    #[doc = "   vTaskSuspend( xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // The created task will not run during this period, unless"]
    #[doc = "   // another task calls vTaskResume( xHandle )."]
    #[doc = ""]
    #[doc = "   //..."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "   // Resume the suspended task ourselves."]
    #[doc = "   vTaskResume( xHandle );"]
    #[doc = ""]
    #[doc = "   // The created task will once again get microcontroller processing"]
    #[doc = "   // time in accordance with its priority within the system."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup vTaskResume vTaskResume"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskResume(xTaskToResume: TaskHandle_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void xTaskResumeFromISR( TaskHandle_t xTaskToResume );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be"]
    #[doc = " available.  See the configuration section for more information."]
    #[doc = ""]
    #[doc = " An implementation of vTaskResume() that can be called from within an ISR."]
    #[doc = ""]
    #[doc = " A task that has been suspended by one or more calls to vTaskSuspend ()"]
    #[doc = " will be made available for running again by a single call to"]
    #[doc = " xTaskResumeFromISR ()."]
    #[doc = ""]
    #[doc = " xTaskResumeFromISR() should not be used to synchronise a task with an"]
    #[doc = " interrupt if there is a chance that the interrupt could arrive prior to the"]
    #[doc = " task being suspended - as this can lead to interrupts being missed. Use of a"]
    #[doc = " semaphore as a synchronisation mechanism would avoid this eventuality."]
    #[doc = ""]
    #[doc = " @param xTaskToResume Handle to the task being readied."]
    #[doc = ""]
    #[doc = " @return pdTRUE if resuming the task should result in a context switch,"]
    #[doc = " otherwise pdFALSE. This is used by the ISR to determine if a context switch"]
    #[doc = " may be required following the ISR."]
    #[doc = ""]
    #[doc = " \\defgroup vTaskResumeFromISR vTaskResumeFromISR"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskResumeFromISR(xTaskToResume: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskStartScheduler( void );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Starts the real time kernel tick processing.  After calling the kernel"]
    #[doc = " has control over which tasks are executed and when."]
    #[doc = ""]
    #[doc = " See the demo application file main.c for an example of creating"]
    #[doc = " tasks and starting the kernel."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = "   // Create at least one task before starting the kernel."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );"]
    #[doc = ""]
    #[doc = "   // Start the real time kernel with preemption."]
    #[doc = "   vTaskStartScheduler ();"]
    #[doc = ""]
    #[doc = "   // Will not get here unless a task calls vTaskEndScheduler ()"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " \\defgroup vTaskStartScheduler vTaskStartScheduler"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskStartScheduler();
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskEndScheduler( void );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " NOTE:  At the time of writing only the x86 real mode port, which runs on a PC"]
    #[doc = " in place of DOS, implements this function."]
    #[doc = ""]
    #[doc = " Stops the real time kernel tick.  All created tasks will be automatically"]
    #[doc = " deleted and multitasking (either preemptive or cooperative) will"]
    #[doc = " stop.  Execution then resumes from the point where vTaskStartScheduler ()"]
    #[doc = " was called, as if vTaskStartScheduler () had just returned."]
    #[doc = ""]
    #[doc = " See the demo application file main. c in the demo/PC directory for an"]
    #[doc = " example that uses vTaskEndScheduler ()."]
    #[doc = ""]
    #[doc = " vTaskEndScheduler () requires an exit function to be defined within the"]
    #[doc = " portable layer (see vPortEndScheduler () in port. c for the PC port).  This"]
    #[doc = " performs hardware specific operations such as stopping the kernel tick."]
    #[doc = ""]
    #[doc = " vTaskEndScheduler () will cause all of the resources allocated by the"]
    #[doc = " kernel to be freed - but will not free resources allocated by application"]
    #[doc = " tasks."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vTaskCode( void * pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Task code goes here."]
    #[doc = ""]
    #[doc = "       // At some point we want to end the real time kernel processing"]
    #[doc = "       // so call ..."]
    #[doc = "       vTaskEndScheduler ();"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = "   // Create at least one task before starting the kernel."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );"]
    #[doc = ""]
    #[doc = "   // Start the real time kernel with preemption."]
    #[doc = "   vTaskStartScheduler ();"]
    #[doc = ""]
    #[doc = "   // Will only get here when the vTaskCode () task has called"]
    #[doc = "   // vTaskEndScheduler ().  When we get here we are back to single task"]
    #[doc = "   // execution."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " \\defgroup vTaskEndScheduler vTaskEndScheduler"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskEndScheduler();
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskSuspendAll( void );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Suspends the scheduler without disabling interrupts.  Context switches will"]
    #[doc = " not occur while the scheduler is suspended."]
    #[doc = ""]
    #[doc = " After calling vTaskSuspendAll () the calling task will continue to execute"]
    #[doc = " without risk of being swapped out until a call to xTaskResumeAll () has been"]
    #[doc = " made."]
    #[doc = ""]
    #[doc = " API functions that have the potential to cause a context switch (for example,"]
    #[doc = " xTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler"]
    #[doc = " is suspended."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vTask1( void * pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Task code goes here."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // At some point the task wants to perform a long operation during"]
    #[doc = "       // which it does not want to get swapped out.  It cannot use"]
    #[doc = "       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the"]
    #[doc = "       // operation may cause interrupts to be missed - including the"]
    #[doc = "       // ticks."]
    #[doc = ""]
    #[doc = "       // Prevent the real time kernel swapping out the task."]
    #[doc = "       vTaskSuspendAll ();"]
    #[doc = ""]
    #[doc = "       // Perform the operation here.  There is no need to use critical"]
    #[doc = "       // sections as we have all the microcontroller processing time."]
    #[doc = "       // During this time interrupts will still operate and the kernel"]
    #[doc = "       // tick count will be maintained."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // The operation is complete.  Restart the kernel."]
    #[doc = "       xTaskResumeAll ();"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup vTaskSuspendAll vTaskSuspendAll"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskSuspendAll();
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskResumeAll( void );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Resumes scheduler activity after it was suspended by a call to"]
    #[doc = " vTaskSuspendAll()."]
    #[doc = ""]
    #[doc = " xTaskResumeAll() only resumes the scheduler.  It does not unsuspend tasks"]
    #[doc = " that were previously suspended by a call to vTaskSuspend()."]
    #[doc = ""]
    #[doc = " @return If resuming the scheduler caused a context switch then pdTRUE is"]
    #[doc = "         returned, otherwise pdFALSE is returned."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vTask1( void * pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Task code goes here."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // At some point the task wants to perform a long operation during"]
    #[doc = "       // which it does not want to get swapped out.  It cannot use"]
    #[doc = "       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the"]
    #[doc = "       // operation may cause interrupts to be missed - including the"]
    #[doc = "       // ticks."]
    #[doc = ""]
    #[doc = "       // Prevent the real time kernel swapping out the task."]
    #[doc = "       vTaskSuspendAll ();"]
    #[doc = ""]
    #[doc = "       // Perform the operation here.  There is no need to use critical"]
    #[doc = "       // sections as we have all the microcontroller processing time."]
    #[doc = "       // During this time interrupts will still operate and the real"]
    #[doc = "       // time kernel tick count will be maintained."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // The operation is complete.  Restart the kernel.  We want to force"]
    #[doc = "       // a context switch - but there is no point if resuming the scheduler"]
    #[doc = "       // caused a context switch already."]
    #[doc = "       if( !xTaskResumeAll () )"]
    #[doc = "       {"]
    #[doc = "            taskYIELD ();"]
    #[doc = "       }"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xTaskResumeAll xTaskResumeAll"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn xTaskResumeAll() -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>TickType_t xTaskGetTickCount( void );</PRE>"]
    #[doc = ""]
    #[doc = " @return The count of ticks since vTaskStartScheduler was called."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskGetTickCount xTaskGetTickCount"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetTickCount() -> TickType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>TickType_t xTaskGetTickCountFromISR( void );</PRE>"]
    #[doc = ""]
    #[doc = " @return The count of ticks since vTaskStartScheduler was called."]
    #[doc = ""]
    #[doc = " This is a version of xTaskGetTickCount() that is safe to be called from an"]
    #[doc = " ISR - provided that TickType_t is the natural word size of the"]
    #[doc = " microcontroller being used or interrupt nesting is either not supported or"]
    #[doc = " not being used."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskGetTickCountFromISR xTaskGetTickCountFromISR"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetTickCountFromISR() -> TickType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>uint16_t uxTaskGetNumberOfTasks( void );</PRE>"]
    #[doc = ""]
    #[doc = " @return The number of tasks that the real time kernel is currently managing."]
    #[doc = " This includes all ready, blocked and suspended tasks.  A task that"]
    #[doc = " has been deleted but not yet freed by the idle task will also be"]
    #[doc = " included in the count."]
    #[doc = ""]
    #[doc = " \\defgroup uxTaskGetNumberOfTasks uxTaskGetNumberOfTasks"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn uxTaskGetNumberOfTasks() -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>char *pcTaskGetName( TaskHandle_t xTaskToQuery );</PRE>"]
    #[doc = ""]
    #[doc = " @return The text (human readable) name of the task referenced by the handle"]
    #[doc = " xTaskToQuery.  A task can query its own name by either passing in its own"]
    #[doc = " handle, or by setting xTaskToQuery to NULL."]
    #[doc = ""]
    #[doc = " \\defgroup pcTaskGetName pcTaskGetName"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn pcTaskGetName(xTaskToQuery: TaskHandle_t) -> *mut chlorine::c_char;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>TaskHandle_t xTaskGetHandle( const char *pcNameToQuery );</PRE>"]
    #[doc = ""]
    #[doc = " NOTE:  This function takes a relatively long time to complete and should be"]
    #[doc = " used sparingly."]
    #[doc = ""]
    #[doc = " @return The handle of the task that has the human readable name pcNameToQuery."]
    #[doc = " NULL is returned if no matching name is found.  INCLUDE_xTaskGetHandle"]
    #[doc = " must be set to 1 in FreeRTOSConfig.h for pcTaskGetHandle() to be available."]
    #[doc = ""]
    #[doc = " \\defgroup pcTaskGetHandle pcTaskGetHandle"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetHandle(pcNameToQuery: *const chlorine::c_char) -> TaskHandle_t;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <PRE>UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask );</PRE>"]
    #[doc = ""]
    #[doc = " INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for"]
    #[doc = " this function to be available."]
    #[doc = ""]
    #[doc = " Returns the high water mark of the stack associated with xTask.  That is,"]
    #[doc = " the minimum free stack space there has been (in words, so on a 32 bit machine"]
    #[doc = " a value of 1 means 4 bytes) since the task started.  The smaller the returned"]
    #[doc = " number the closer the task has come to overflowing its stack."]
    #[doc = ""]
    #[doc = " uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the"]
    #[doc = " same except for their return type.  Using configSTACK_DEPTH_TYPE allows the"]
    #[doc = " user to determine the return type.  It gets around the problem of the value"]
    #[doc = " overflowing on 8-bit types without breaking backward compatibility for"]
    #[doc = " applications that expect an 8-bit return type."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task associated with the stack to be checked."]
    #[doc = " Set xTask to NULL to check the stack of the calling task."]
    #[doc = ""]
    #[doc = " @return The smallest amount of free stack space there has been (in words, so"]
    #[doc = " actual spaces on the stack rather than bytes) since the task referenced by"]
    #[doc = " xTask was created."]
    pub fn uxTaskGetStackHighWaterMark(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <PRE>configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask );</PRE>"]
    #[doc = ""]
    #[doc = " INCLUDE_uxTaskGetStackHighWaterMark2 must be set to 1 in FreeRTOSConfig.h for"]
    #[doc = " this function to be available."]
    #[doc = ""]
    #[doc = " Returns the high water mark of the stack associated with xTask.  That is,"]
    #[doc = " the minimum free stack space there has been (in words, so on a 32 bit machine"]
    #[doc = " a value of 1 means 4 bytes) since the task started.  The smaller the returned"]
    #[doc = " number the closer the task has come to overflowing its stack."]
    #[doc = ""]
    #[doc = " uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the"]
    #[doc = " same except for their return type.  Using configSTACK_DEPTH_TYPE allows the"]
    #[doc = " user to determine the return type.  It gets around the problem of the value"]
    #[doc = " overflowing on 8-bit types without breaking backward compatibility for"]
    #[doc = " applications that expect an 8-bit return type."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task associated with the stack to be checked."]
    #[doc = " Set xTask to NULL to check the stack of the calling task."]
    #[doc = ""]
    #[doc = " @return The smallest amount of free stack space there has been (in words, so"]
    #[doc = " actual spaces on the stack rather than bytes) since the task referenced by"]
    #[doc = " xTask was created."]
    pub fn uxTaskGetStackHighWaterMark2(xTask: TaskHandle_t) -> u16;
}
extern "C" {
    pub fn vTaskSetThreadLocalStoragePointer(
        xTaskToSet: TaskHandle_t,
        xIndex: BaseType_t,
        pvValue: *mut chlorine::c_void,
    );
}
extern "C" {
    pub fn pvTaskGetThreadLocalStoragePointer(
        xTaskToQuery: TaskHandle_t,
        xIndex: BaseType_t,
    ) -> *mut chlorine::c_void;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <pre>void vApplicationStackOverflowHook( TaskHandle_t xTask char *pcTaskName); </pre>"]
    #[doc = ""]
    #[doc = " The application stack overflow hook is called when a stack overflow is detected for a task."]
    #[doc = ""]
    #[doc = " Details on stack overflow detection can be found here: https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html"]
    #[doc = ""]
    #[doc = " @param xTask the task that just exceeded its stack boundaries."]
    #[doc = " @param pcTaskName A character string containing the name of the offending task."]
    pub fn vApplicationStackOverflowHook(xTask: TaskHandle_t, pcTaskName: *mut chlorine::c_char);
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Calls the hook function associated with xTask.  Passing xTask as NULL has"]
    #[doc = " the effect of calling the Running tasks (the calling task) hook function."]
    #[doc = ""]
    #[doc = " pvParameter is passed to the hook function for the task to interpret as it"]
    #[doc = " wants.  The return value is the value returned by the task hook function"]
    #[doc = " registered by the user."]
    pub fn xTaskCallApplicationTaskHook(
        xTask: TaskHandle_t,
        pvParameter: *mut chlorine::c_void,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " xTaskGetIdleTaskHandle() is only available if"]
    #[doc = " INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h."]
    #[doc = ""]
    #[doc = " Simply returns the handle of the idle task.  It is not valid to call"]
    #[doc = " xTaskGetIdleTaskHandle() before the scheduler has been started."]
    pub fn xTaskGetIdleTaskHandle() -> TaskHandle_t;
}
extern "C" {
    #[doc = " configUSE_TRACE_FACILITY must be defined as 1 in FreeRTOSConfig.h for"]
    #[doc = " uxTaskGetSystemState() to be available."]
    #[doc = ""]
    #[doc = " uxTaskGetSystemState() populates an TaskStatus_t structure for each task in"]
    #[doc = " the system.  TaskStatus_t structures contain, among other things, members"]
    #[doc = " for the task handle, task name, task priority, task state, and total amount"]
    #[doc = " of run time consumed by the task.  See the TaskStatus_t structure"]
    #[doc = " definition in this file for the full member list."]
    #[doc = ""]
    #[doc = " NOTE:  This function is intended for debugging use only as its use results in"]
    #[doc = " the scheduler remaining suspended for an extended period."]
    #[doc = ""]
    #[doc = " @param pxTaskStatusArray A pointer to an array of TaskStatus_t structures."]
    #[doc = " The array must contain at least one TaskStatus_t structure for each task"]
    #[doc = " that is under the control of the RTOS.  The number of tasks under the control"]
    #[doc = " of the RTOS can be determined using the uxTaskGetNumberOfTasks() API function."]
    #[doc = ""]
    #[doc = " @param uxArraySize The size of the array pointed to by the pxTaskStatusArray"]
    #[doc = " parameter.  The size is specified as the number of indexes in the array, or"]
    #[doc = " the number of TaskStatus_t structures contained in the array, not by the"]
    #[doc = " number of bytes in the array."]
    #[doc = ""]
    #[doc = " @param pulTotalRunTime If configGENERATE_RUN_TIME_STATS is set to 1 in"]
    #[doc = " FreeRTOSConfig.h then *pulTotalRunTime is set by uxTaskGetSystemState() to the"]
    #[doc = " total run time (as defined by the run time stats clock, see"]
    #[doc = " https://www.FreeRTOS.org/rtos-run-time-stats.html) since the target booted."]
    #[doc = " pulTotalRunTime can be set to NULL to omit the total run time information."]
    #[doc = ""]
    #[doc = " @return The number of TaskStatus_t structures that were populated by"]
    #[doc = " uxTaskGetSystemState().  This should equal the number returned by the"]
    #[doc = " uxTaskGetNumberOfTasks() API function, but will be zero if the value passed"]
    #[doc = " in the uxArraySize parameter was too small."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = "  // This example demonstrates how a human readable table of run time stats"]
    #[doc = "  // information is generated from raw data provided by uxTaskGetSystemState()."]
    #[doc = "  // The human readable table is written to pcWriteBuffer"]
    #[doc = "  void vTaskGetRunTimeStats( char *pcWriteBuffer )"]
    #[doc = "  {"]
    #[doc = "  TaskStatus_t *pxTaskStatusArray;"]
    #[doc = "  volatile UBaseType_t uxArraySize, x;"]
    #[doc = "  uint32_t ulTotalRunTime, ulStatsAsPercentage;"]
    #[doc = ""]
    #[doc = "      // Make sure the write buffer does not contain a string."]
    #[doc = " pcWriteBuffer = 0x00;"]
    #[doc = ""]
    #[doc = "      // Take a snapshot of the number of tasks in case it changes while this"]
    #[doc = "      // function is executing."]
    #[doc = "      uxArraySize = uxTaskGetNumberOfTasks();"]
    #[doc = ""]
    #[doc = "      // Allocate a TaskStatus_t structure for each task.  An array could be"]
    #[doc = "      // allocated statically at compile time."]
    #[doc = "      pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );"]
    #[doc = ""]
    #[doc = "      if( pxTaskStatusArray != NULL )"]
    #[doc = "      {"]
    #[doc = "          // Generate raw status information about each task."]
    #[doc = "          uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalRunTime );"]
    #[doc = ""]
    #[doc = "          // For percentage calculations."]
    #[doc = "          ulTotalRunTime /= 100UL;"]
    #[doc = ""]
    #[doc = "          // Avoid divide by zero errors."]
    #[doc = "          if( ulTotalRunTime > 0 )"]
    #[doc = "          {"]
    #[doc = "              // For each populated position in the pxTaskStatusArray array,"]
    #[doc = "              // format the raw data as human readable ASCII data"]
    #[doc = "              for( x = 0; x < uxArraySize; x++ )"]
    #[doc = "              {"]
    #[doc = "                  // What percentage of the total run time has the task used?"]
    #[doc = "                  // This will always be rounded down to the nearest integer."]
    #[doc = "                  // ulTotalRunTimeDiv100 has already been divided by 100."]
    #[doc = "                  ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;"]
    #[doc = ""]
    #[doc = "                  if( ulStatsAsPercentage > 0UL )"]
    #[doc = "                  {"]
    #[doc = "                      sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t%lu%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );"]
    #[doc = "                  }"]
    #[doc = "                  else"]
    #[doc = "                  {"]
    #[doc = "                      // If the percentage is zero here then the task has"]
    #[doc = "                      // consumed less than 1% of the total run time."]
    #[doc = "                      sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t<1%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );"]
    #[doc = "                  }"]
    #[doc = ""]
    #[doc = "                  pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );"]
    #[doc = "              }"]
    #[doc = "          }"]
    #[doc = ""]
    #[doc = "          // The array is no longer needed, free the memory it consumes."]
    #[doc = "          vPortFree( pxTaskStatusArray );"]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = "  </pre>"]
    pub fn uxTaskGetSystemState(
        pxTaskStatusArray: *mut TaskStatus_t,
        uxArraySize: UBaseType_t,
        pulTotalRunTime: *mut u32,
    ) -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>void vTaskList( char *pcWriteBuffer );</PRE>"]
    #[doc = ""]
    #[doc = " configUSE_TRACE_FACILITY and configUSE_STATS_FORMATTING_FUNCTIONS must"]
    #[doc = " both be defined as 1 for this function to be available.  See the"]
    #[doc = " configuration section of the FreeRTOS.org website for more information."]
    #[doc = ""]
    #[doc = " NOTE 1: This function will disable interrupts for its duration.  It is"]
    #[doc = " not intended for normal application runtime use but as a debug aid."]
    #[doc = ""]
    #[doc = " Lists all the current tasks, along with their current state and stack"]
    #[doc = " usage high water mark."]
    #[doc = ""]
    #[doc = " Tasks are reported as blocked ('B'), ready ('R'), deleted ('D') or"]
    #[doc = " suspended ('S')."]
    #[doc = ""]
    #[doc = " PLEASE NOTE:"]
    #[doc = ""]
    #[doc = " This function is provided for convenience only, and is used by many of the"]
    #[doc = " demo applications.  Do not consider it to be part of the scheduler."]
    #[doc = ""]
    #[doc = " vTaskList() calls uxTaskGetSystemState(), then formats part of the"]
    #[doc = " uxTaskGetSystemState() output into a human readable table that displays task:"]
    #[doc = " names, states, priority, stack usage and task number."]
    #[doc = " Stack usage specified as the number of unused StackType_t words stack can hold"]
    #[doc = " on top of stack - not the number of bytes."]
    #[doc = ""]
    #[doc = " vTaskList() has a dependency on the sprintf() C library function that might"]
    #[doc = " bloat the code size, use a lot of stack, and provide different results on"]
    #[doc = " different platforms.  An alternative, tiny, third party, and limited"]
    #[doc = " functionality implementation of sprintf() is provided in many of the"]
    #[doc = " FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note"]
    #[doc = " printf-stdarg.c does not provide a full snprintf() implementation!)."]
    #[doc = ""]
    #[doc = " It is recommended that production systems call uxTaskGetSystemState()"]
    #[doc = " directly to get access to raw stats data, rather than indirectly through a"]
    #[doc = " call to vTaskList()."]
    #[doc = ""]
    #[doc = " @param pcWriteBuffer A buffer into which the above mentioned details"]
    #[doc = " will be written, in ASCII form.  This buffer is assumed to be large"]
    #[doc = " enough to contain the generated report.  Approximately 40 bytes per"]
    #[doc = " task should be sufficient."]
    #[doc = ""]
    #[doc = " \\defgroup vTaskList vTaskList"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn vTaskList(pcWriteBuffer: *mut chlorine::c_char);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>void vTaskGetRunTimeStats( char *pcWriteBuffer );</PRE>"]
    #[doc = ""]
    #[doc = " configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS"]
    #[doc = " must both be defined as 1 for this function to be available.  The application"]
    #[doc = " must also then provide definitions for"]
    #[doc = " portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()"]
    #[doc = " to configure a peripheral timer/counter and return the timers current count"]
    #[doc = " value respectively.  The counter should be at least 10 times the frequency of"]
    #[doc = " the tick count."]
    #[doc = ""]
    #[doc = " NOTE 1: This function will disable interrupts for its duration.  It is"]
    #[doc = " not intended for normal application runtime use but as a debug aid."]
    #[doc = ""]
    #[doc = " Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total"]
    #[doc = " accumulated execution time being stored for each task.  The resolution"]
    #[doc = " of the accumulated time value depends on the frequency of the timer"]
    #[doc = " configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro."]
    #[doc = " Calling vTaskGetRunTimeStats() writes the total execution time of each"]
    #[doc = " task into a buffer, both as an absolute count value and as a percentage"]
    #[doc = " of the total system execution time."]
    #[doc = ""]
    #[doc = " NOTE 2:"]
    #[doc = ""]
    #[doc = " This function is provided for convenience only, and is used by many of the"]
    #[doc = " demo applications.  Do not consider it to be part of the scheduler."]
    #[doc = ""]
    #[doc = " vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part of the"]
    #[doc = " uxTaskGetSystemState() output into a human readable table that displays the"]
    #[doc = " amount of time each task has spent in the Running state in both absolute and"]
    #[doc = " percentage terms."]
    #[doc = ""]
    #[doc = " vTaskGetRunTimeStats() has a dependency on the sprintf() C library function"]
    #[doc = " that might bloat the code size, use a lot of stack, and provide different"]
    #[doc = " results on different platforms.  An alternative, tiny, third party, and"]
    #[doc = " limited functionality implementation of sprintf() is provided in many of the"]
    #[doc = " FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note"]
    #[doc = " printf-stdarg.c does not provide a full snprintf() implementation!)."]
    #[doc = ""]
    #[doc = " It is recommended that production systems call uxTaskGetSystemState() directly"]
    #[doc = " to get access to raw stats data, rather than indirectly through a call to"]
    #[doc = " vTaskGetRunTimeStats()."]
    #[doc = ""]
    #[doc = " @param pcWriteBuffer A buffer into which the execution times will be"]
    #[doc = " written, in ASCII form.  This buffer is assumed to be large enough to"]
    #[doc = " contain the generated report.  Approximately 40 bytes per task should"]
    #[doc = " be sufficient."]
    #[doc = ""]
    #[doc = " \\defgroup vTaskGetRunTimeStats vTaskGetRunTimeStats"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn vTaskGetRunTimeStats(pcWriteBuffer: *mut chlorine::c_char);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>uint32_t ulTaskGetIdleRunTimeCounter( void );</PRE>"]
    #[doc = ""]
    #[doc = " configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS"]
    #[doc = " must both be defined as 1 for this function to be available.  The application"]
    #[doc = " must also then provide definitions for"]
    #[doc = " portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()"]
    #[doc = " to configure a peripheral timer/counter and return the timers current count"]
    #[doc = " value respectively.  The counter should be at least 10 times the frequency of"]
    #[doc = " the tick count."]
    #[doc = ""]
    #[doc = " Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total"]
    #[doc = " accumulated execution time being stored for each task.  The resolution"]
    #[doc = " of the accumulated time value depends on the frequency of the timer"]
    #[doc = " configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro."]
    #[doc = " While uxTaskGetSystemState() and vTaskGetRunTimeStats() writes the total"]
    #[doc = " execution time of each task into a buffer, ulTaskGetIdleRunTimeCounter()"]
    #[doc = " returns the total execution time of just the idle task."]
    #[doc = ""]
    #[doc = " @return The total run time of the idle task.  This is the amount of time the"]
    #[doc = " idle task has actually been executing.  The unit of time is dependent on the"]
    #[doc = " frequency configured using the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and"]
    #[doc = " portGET_RUN_TIME_COUNTER_VALUE() macros."]
    #[doc = ""]
    #[doc = " \\defgroup ulTaskGetIdleRunTimeCounter ulTaskGetIdleRunTimeCounter"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn ulTaskGetIdleRunTimeCounter() -> u32;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>BaseType_t xTaskNotifyIndexed( TaskHandle_t xTaskToNotify, UBaseType_t uxIndexToNotify, uint32_t ulValue, eNotifyAction eAction );</PRE>"]
    #[doc = " <PRE>BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );</PRE>"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " Sends a direct to task notification to a task, with an optional value and"]
    #[doc = " action."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() to"]
    #[doc = " [optionally] block to wait for a notification to be pending.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() (or their"]
    #[doc = " un-indexed equivalents).  If the task was already in the Blocked state to"]
    #[doc = " wait for a notification when the notification arrives then the task will"]
    #[doc = " automatically be removed from the Blocked state (unblocked) and the"]
    #[doc = " notification cleared."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotify() is the original API function, and remains backward"]
    #[doc = " compatible by always operating on the notification value at index 0 in the"]
    #[doc = " array. Calling xTaskNotify() is equivalent to calling xTaskNotifyIndexed()"]
    #[doc = " with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToNotify The index within the target task's array of"]
    #[doc = " notification values to which the notification is to be sent.  uxIndexToNotify"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotify() does"]
    #[doc = " not have this parameter and always sends notifications to index 0."]
    #[doc = ""]
    #[doc = " @param ulValue Data that can be sent with the notification.  How the data is"]
    #[doc = " used depends on the value of the eAction parameter."]
    #[doc = ""]
    #[doc = " @param eAction Specifies how the notification updates the task's notification"]
    #[doc = " value, if at all.  Valid values for eAction are as follows:"]
    #[doc = ""]
    #[doc = " eSetBits -"]
    #[doc = " The target notification value is bitwise ORed with ulValue."]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eIncrement -"]
    #[doc = " The target notification value is incremented.  ulValue is not used and"]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithOverwrite -"]
    #[doc = " The target notification value is set to the value of ulValue, even if the"]
    #[doc = " task being notified had not yet processed the previous notification at the"]
    #[doc = " same array index (the task already had a notification pending at that index)."]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithoutOverwrite -"]
    #[doc = " If the task being notified did not already have a notification pending at the"]
    #[doc = " same array index then the target notification value is set to ulValue and"]
    #[doc = " xTaskNotifyIndexed() will return pdPASS.  If the task being notified already"]
    #[doc = " had a notification pending at the same array index then no action is"]
    #[doc = " performed and pdFAIL is returned."]
    #[doc = ""]
    #[doc = " eNoAction -"]
    #[doc = " The task receives a notification at the specified array index without the"]
    #[doc = " notification value at that index being updated.  ulValue is not used and"]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " pulPreviousNotificationValue -"]
    #[doc = " Can be used to pass out the subject task's notification value before any"]
    #[doc = " bits are modified by the notify function."]
    #[doc = ""]
    #[doc = " @return Dependent on the value of eAction.  See the description of the"]
    #[doc = " eAction parameter."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotifyIndexed xTaskNotifyIndexed"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotify(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        ulValue: u32,
        eAction: eNotifyAction,
        pulPreviousNotificationValue: *mut u32,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>BaseType_t xTaskNotifyIndexedFromISR( TaskHandle_t xTaskToNotify, UBaseType_t uxIndexToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );</PRE>"]
    #[doc = " <PRE>BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );</PRE>"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " A version of xTaskNotifyIndexed() that can be used from an interrupt service"]
    #[doc = " routine (ISR)."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWaitIndexed() to [optionally] block to wait for a"]
    #[doc = " notification to be pending, or ulTaskNotifyTakeIndexed() to [optionally] block"]
    #[doc = " to wait for a notification value to have a non-zero value.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() (or their"]
    #[doc = " un-indexed equivalents).  If the task was already in the Blocked state to"]
    #[doc = " wait for a notification when the notification arrives then the task will"]
    #[doc = " automatically be removed from the Blocked state (unblocked) and the"]
    #[doc = " notification cleared."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyFromISR() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling xTaskNotifyFromISR() is equivalent to calling"]
    #[doc = " xTaskNotifyIndexedFromISR() with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param uxIndexToNotify The index within the target task's array of"]
    #[doc = " notification values to which the notification is to be sent.  uxIndexToNotify"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotifyFromISR()"]
    #[doc = " does not have this parameter and always sends notifications to index 0."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param ulValue Data that can be sent with the notification.  How the data is"]
    #[doc = " used depends on the value of the eAction parameter."]
    #[doc = ""]
    #[doc = " @param eAction Specifies how the notification updates the task's notification"]
    #[doc = " value, if at all.  Valid values for eAction are as follows:"]
    #[doc = ""]
    #[doc = " eSetBits -"]
    #[doc = " The task's notification value is bitwise ORed with ulValue.  xTaskNotify()"]
    #[doc = " always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eIncrement -"]
    #[doc = " The task's notification value is incremented.  ulValue is not used and"]
    #[doc = " xTaskNotify() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithOverwrite -"]
    #[doc = " The task's notification value is set to the value of ulValue, even if the"]
    #[doc = " task being notified had not yet processed the previous notification (the"]
    #[doc = " task already had a notification pending).  xTaskNotify() always returns"]
    #[doc = " pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithoutOverwrite -"]
    #[doc = " If the task being notified did not already have a notification pending then"]
    #[doc = " the task's notification value is set to ulValue and xTaskNotify() will"]
    #[doc = " return pdPASS.  If the task being notified already had a notification"]
    #[doc = " pending then no action is performed and pdFAIL is returned."]
    #[doc = ""]
    #[doc = " eNoAction -"]
    #[doc = " The task receives a notification without its notification value being"]
    #[doc = " updated.  ulValue is not used and xTaskNotify() always returns pdPASS in"]
    #[doc = " this case."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken  xTaskNotifyFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the"]
    #[doc = " task to which the notification was sent to leave the Blocked state, and the"]
    #[doc = " unblocked task has a priority higher than the currently running task.  If"]
    #[doc = " xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should"]
    #[doc = " be requested before the interrupt is exited.  How a context switch is"]
    #[doc = " requested from an ISR is dependent on the port - see the documentation page"]
    #[doc = " for the port in use."]
    #[doc = ""]
    #[doc = " @return Dependent on the value of eAction.  See the description of the"]
    #[doc = " eAction parameter."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotifyIndexedFromISR xTaskNotifyIndexedFromISR"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotifyFromISR(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        ulValue: u32,
        eAction: eNotifyAction,
        pulPreviousNotificationValue: *mut u32,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskNotifyWaitIndexed( UBaseType_t uxIndexToWaitOn, uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );"]
    #[doc = ""]
    #[doc = " BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Waits for a direct to task notification to be pending at a given index within"]
    #[doc = " an array of direct to task notifications."]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() (or their"]
    #[doc = " un-indexed equivalents).  If the task was already in the Blocked state to"]
    #[doc = " wait for a notification when the notification arrives then the task will"]
    #[doc = " automatically be removed from the Blocked state (unblocked) and the"]
    #[doc = " notification cleared."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWaitIndexed() to [optionally] block to wait for a"]
    #[doc = " notification to be pending, or ulTaskNotifyTakeIndexed() to [optionally] block"]
    #[doc = " to wait for a notification value to have a non-zero value.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyWait() is the original API function, and remains backward"]
    #[doc = " compatible by always operating on the notification value at index 0 in the"]
    #[doc = " array. Calling xTaskNotifyWait() is equivalent to calling"]
    #[doc = " xTaskNotifyWaitIndexed() with the uxIndexToWaitOn parameter set to 0."]
    #[doc = ""]
    #[doc = " @param uxIndexToWaitOn The index within the calling task's array of"]
    #[doc = " notification values on which the calling task will wait for a notification to"]
    #[doc = " be received.  uxIndexToWaitOn must be less than"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotifyWait() does"]
    #[doc = " not have this parameter and always waits for notifications on index 0."]
    #[doc = ""]
    #[doc = " @param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value"]
    #[doc = " will be cleared in the calling task's notification value before the task"]
    #[doc = " checks to see if any notifications are pending, and optionally blocks if no"]
    #[doc = " notifications are pending.  Setting ulBitsToClearOnEntry to ULONG_MAX (if"]
    #[doc = " limits.h is included) or 0xffffffffUL (if limits.h is not included) will have"]
    #[doc = " the effect of resetting the task's notification value to 0.  Setting"]
    #[doc = " ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged."]
    #[doc = ""]
    #[doc = " @param ulBitsToClearOnExit If a notification is pending or received before"]
    #[doc = " the calling task exits the xTaskNotifyWait() function then the task's"]
    #[doc = " notification value (see the xTaskNotify() API function) is passed out using"]
    #[doc = " the pulNotificationValue parameter.  Then any bits that are set in"]
    #[doc = " ulBitsToClearOnExit will be cleared in the task's notification value (note"]
    #[doc = " *pulNotificationValue is set before any bits are cleared).  Setting"]
    #[doc = " ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL"]
    #[doc = " (if limits.h is not included) will have the effect of resetting the task's"]
    #[doc = " notification value to 0 before the function exits.  Setting"]
    #[doc = " ulBitsToClearOnExit to 0 will leave the task's notification value unchanged"]
    #[doc = " when the function exits (in which case the value passed out in"]
    #[doc = " pulNotificationValue will match the task's notification value)."]
    #[doc = ""]
    #[doc = " @param pulNotificationValue Used to pass the task's notification value out"]
    #[doc = " of the function.  Note the value passed out will not be effected by the"]
    #[doc = " clearing of any bits caused by ulBitsToClearOnExit being non-zero."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time that the task should wait in"]
    #[doc = " the Blocked state for a notification to be received, should a notification"]
    #[doc = " not already be pending when xTaskNotifyWait() was called.  The task"]
    #[doc = " will not consume any processing time while it is in the Blocked state.  This"]
    #[doc = " is specified in kernel ticks, the macro pdMS_TO_TICKS( value_in_ms ) can be"]
    #[doc = " used to convert a time specified in milliseconds to a time specified in"]
    #[doc = " ticks."]
    #[doc = ""]
    #[doc = " @return If a notification was received (including notifications that were"]
    #[doc = " already pending when xTaskNotifyWait was called) then pdPASS is"]
    #[doc = " returned.  Otherwise pdFAIL is returned."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotifyWaitIndexed xTaskNotifyWaitIndexed"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotifyWait(
        uxIndexToWaitOn: UBaseType_t,
        ulBitsToClearOnEntry: u32,
        ulBitsToClearOnExit: u32,
        pulNotificationValue: *mut u32,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>void vTaskNotifyGiveIndexedFromISR( TaskHandle_t xTaskHandle, UBaseType_t uxIndexToNotify, BaseType_t *pxHigherPriorityTaskWoken );</PRE>"]
    #[doc = " <PRE>void vTaskNotifyGiveFromISR( TaskHandle_t xTaskHandle, BaseType_t *pxHigherPriorityTaskWoken );</PRE>"]
    #[doc = ""]
    #[doc = " A version of xTaskNotifyGiveIndexed() that can be called from an interrupt"]
    #[doc = " service routine (ISR)."]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for more details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro"]
    #[doc = " to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " vTaskNotifyGiveIndexedFromISR() is intended for use when task notifications"]
    #[doc = " are used as light weight and faster binary or counting semaphore equivalents."]
    #[doc = " Actual FreeRTOS semaphores are given from an ISR using the"]
    #[doc = " xSemaphoreGiveFromISR() API function, the equivalent action that instead uses"]
    #[doc = " a task notification is vTaskNotifyGiveIndexedFromISR()."]
    #[doc = ""]
    #[doc = " When task notifications are being used as a binary or counting semaphore"]
    #[doc = " equivalent then the task being notified should wait for the notification"]
    #[doc = " using the ulTaskNotificationTakeIndexed() API function rather than the"]
    #[doc = " xTaskNotifyWaitIndexed() API function."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyFromISR() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling xTaskNotifyGiveFromISR() is equivalent to calling"]
    #[doc = " xTaskNotifyGiveIndexedFromISR() with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToNotify The index within the target task's array of"]
    #[doc = " notification values to which the notification is to be sent.  uxIndexToNotify"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES."]
    #[doc = " xTaskNotifyGiveFromISR() does not have this parameter and always sends"]
    #[doc = " notifications to index 0."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken  vTaskNotifyGiveFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the"]
    #[doc = " task to which the notification was sent to leave the Blocked state, and the"]
    #[doc = " unblocked task has a priority higher than the currently running task.  If"]
    #[doc = " vTaskNotifyGiveFromISR() sets this value to pdTRUE then a context switch"]
    #[doc = " should be requested before the interrupt is exited.  How a context switch is"]
    #[doc = " requested from an ISR is dependent on the port - see the documentation page"]
    #[doc = " for the port in use."]
    #[doc = ""]
    #[doc = " \\defgroup vTaskNotifyGiveIndexedFromISR vTaskNotifyGiveIndexedFromISR"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn vTaskGenericNotifyGiveFromISR(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    );
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " uint32_t ulTaskNotifyTakeIndexed( UBaseType_t uxIndexToWaitOn, BaseType_t xClearCountOnExit, TickType_t xTicksToWait );"]
    #[doc = ""]
    #[doc = " uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Waits for a direct to task notification on a particular index in the calling"]
    #[doc = " task's notification array in a manner similar to taking a counting semaphore."]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " ulTaskNotifyTakeIndexed() is intended for use when a task notification is"]
    #[doc = " used as a faster and lighter weight binary or counting semaphore alternative."]
    #[doc = " Actual FreeRTOS semaphores are taken using the xSemaphoreTake() API function,"]
    #[doc = " the equivalent action that instead uses a task notification is"]
    #[doc = " ulTaskNotifyTakeIndexed()."]
    #[doc = ""]
    #[doc = " When a task is using its notification value as a binary or counting semaphore"]
    #[doc = " other tasks should send notifications to it using the xTaskNotifyGiveIndexed()"]
    #[doc = " macro, or xTaskNotifyIndex() function with the eAction parameter set to"]
    #[doc = " eIncrement."]
    #[doc = ""]
    #[doc = " ulTaskNotifyTakeIndexed() can either clear the task's notification value at"]
    #[doc = " the array index specified by the uxIndexToWaitOn parameter to zero on exit,"]
    #[doc = " in which case the notification value acts like a binary semaphore, or"]
    #[doc = " decrement the notification value on exit, in which case the notification"]
    #[doc = " value acts like a counting semaphore."]
    #[doc = ""]
    #[doc = " A task can use ulTaskNotifyTakeIndexed() to [optionally] block to wait for"]
    #[doc = " a notification.  The task does not consume any CPU time while it is in the"]
    #[doc = " Blocked state."]
    #[doc = ""]
    #[doc = " Where as xTaskNotifyWaitIndexed() will return when a notification is pending,"]
    #[doc = " ulTaskNotifyTakeIndexed() will return when the task's notification value is"]
    #[doc = " not zero."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  ulTaskNotifyTake() is the original API function, and remains backward"]
    #[doc = " compatible by always operating on the notification value at index 0 in the"]
    #[doc = " array. Calling ulTaskNotifyTake() is equivalent to calling"]
    #[doc = " ulTaskNotifyTakeIndexed() with the uxIndexToWaitOn parameter set to 0."]
    #[doc = ""]
    #[doc = " @param uxIndexToWaitOn The index within the calling task's array of"]
    #[doc = " notification values on which the calling task will wait for a notification to"]
    #[doc = " be non-zero.  uxIndexToWaitOn must be less than"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotifyTake() does"]
    #[doc = " not have this parameter and always waits for notifications on index 0."]
    #[doc = ""]
    #[doc = " @param xClearCountOnExit if xClearCountOnExit is pdFALSE then the task's"]
    #[doc = " notification value is decremented when the function exits.  In this way the"]
    #[doc = " notification value acts like a counting semaphore.  If xClearCountOnExit is"]
    #[doc = " not pdFALSE then the task's notification value is cleared to zero when the"]
    #[doc = " function exits.  In this way the notification value acts like a binary"]
    #[doc = " semaphore."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time that the task should wait in"]
    #[doc = " the Blocked state for the task's notification value to be greater than zero,"]
    #[doc = " should the count not already be greater than zero when"]
    #[doc = " ulTaskNotifyTake() was called.  The task will not consume any processing"]
    #[doc = " time while it is in the Blocked state.  This is specified in kernel ticks,"]
    #[doc = " the macro pdMS_TO_TICKS( value_in_ms ) can be used to convert a time"]
    #[doc = " specified in milliseconds to a time specified in ticks."]
    #[doc = ""]
    #[doc = " @return The task's notification count before it is either cleared to zero or"]
    #[doc = " decremented (see the xClearCountOnExit parameter)."]
    #[doc = ""]
    #[doc = " \\defgroup ulTaskNotifyTakeIndexed ulTaskNotifyTakeIndexed"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn ulTaskGenericNotifyTake(
        uxIndexToWaitOn: UBaseType_t,
        xClearCountOnExit: BaseType_t,
        xTicksToWait: TickType_t,
    ) -> u32;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskNotifyStateClearIndexed( TaskHandle_t xTask, UBaseType_t uxIndexToCLear );"]
    #[doc = ""]
    #[doc = " BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " If a notification is sent to an index within the array of notifications then"]
    #[doc = " the notification at that index is said to be 'pending' until it is read or"]
    #[doc = " explicitly cleared by the receiving task.  xTaskNotifyStateClearIndexed()"]
    #[doc = " is the function that clears a pending notification without reading the"]
    #[doc = " notification value.  The notification value at the same array index is not"]
    #[doc = " altered.  Set xTask to NULL to clear the notification state of the calling"]
    #[doc = " task."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyStateClear() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling xTaskNotifyStateClear() is equivalent to calling"]
    #[doc = " xTaskNotifyStateClearIndexed() with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the RTOS task that will have a notification state"]
    #[doc = " cleared.  Set xTask to NULL to clear a notification state in the calling"]
    #[doc = " task.  To obtain a task's handle create the task using xTaskCreate() and"]
    #[doc = " make use of the pxCreatedTask parameter, or create the task using"]
    #[doc = " xTaskCreateStatic() and store the returned value, or use the task's name in"]
    #[doc = " a call to xTaskGetHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToClear The index within the target task's array of"]
    #[doc = " notification values to act upon.  For example, setting uxIndexToClear to 1"]
    #[doc = " will clear the state of the notification at index 1 within the array."]
    #[doc = " uxIndexToClear must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES."]
    #[doc = " ulTaskNotifyStateClear() does not have this parameter and always acts on the"]
    #[doc = " notification at index 0."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the task's notification state was set to"]
    #[doc = " eNotWaitingNotification, otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotifyStateClearIndexed xTaskNotifyStateClearIndexed"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotifyStateClear(
        xTask: TaskHandle_t,
        uxIndexToClear: UBaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " uint32_t ulTaskNotifyValueClearIndexed( TaskHandle_t xTask, UBaseType_t uxIndexToClear, uint32_t ulBitsToClear );"]
    #[doc = ""]
    #[doc = " uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " ulTaskNotifyValueClearIndexed() clears the bits specified by the"]
    #[doc = " ulBitsToClear bit mask in the notification value at array index uxIndexToClear"]
    #[doc = " of the task referenced by xTask."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  ulTaskNotifyValueClear() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling ulTaskNotifyValueClear() is equivalent to calling"]
    #[doc = " ulTaskNotifyValueClearIndexed() with the uxIndexToClear parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the RTOS task that will have bits in one of its"]
    #[doc = " notification values cleared. Set xTask to NULL to clear bits in a"]
    #[doc = " notification value of the calling task.  To obtain a task's handle create the"]
    #[doc = " task using xTaskCreate() and make use of the pxCreatedTask parameter, or"]
    #[doc = " create the task using xTaskCreateStatic() and store the returned value, or"]
    #[doc = " use the task's name in a call to xTaskGetHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToClear The index within the target task's array of"]
    #[doc = " notification values in which to clear the bits.  uxIndexToClear"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES."]
    #[doc = " ulTaskNotifyValueClear() does not have this parameter and always clears bits"]
    #[doc = " in the notification value at index 0."]
    #[doc = ""]
    #[doc = " @param ulBitsToClear Bit mask of the bits to clear in the notification value of"]
    #[doc = " xTask. Set a bit to 1 to clear the corresponding bits in the task's notification"]
    #[doc = " value. Set ulBitsToClear to 0xffffffff (UINT_MAX on 32-bit architectures) to clear"]
    #[doc = " the notification value to 0.  Set ulBitsToClear to 0 to query the task's"]
    #[doc = " notification value without clearing any bits."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @return The value of the target task's notification value before the bits"]
    #[doc = " specified by ulBitsToClear were cleared."]
    #[doc = " \\defgroup ulTaskNotifyValueClear ulTaskNotifyValueClear"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn ulTaskGenericNotifyValueClear(
        xTask: TaskHandle_t,
        uxIndexToClear: UBaseType_t,
        ulBitsToClear: u32,
    ) -> u32;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Capture the current time for future use with xTaskCheckForTimeOut()."]
    #[doc = ""]
    #[doc = " @param pxTimeOut Pointer to a timeout object into which the current time"]
    #[doc = " is to be captured.  The captured time includes the tick count and the number"]
    #[doc = " of times the tick count has overflowed since the system first booted."]
    #[doc = " \\defgroup vTaskSetTimeOutState vTaskSetTimeOutState"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskSetTimeOutState(pxTimeOut: *mut TimeOut_t);
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Determines if pxTicksToWait ticks has passed since a time was captured"]
    #[doc = " using a call to vTaskSetTimeOutState().  The captured time includes the tick"]
    #[doc = " count and the number of times the tick count has overflowed."]
    #[doc = ""]
    #[doc = " @param pxTimeOut The time status as captured previously using"]
    #[doc = " vTaskSetTimeOutState. If the timeout has not yet occurred, it is updated"]
    #[doc = " to reflect the current time status."]
    #[doc = " @param pxTicksToWait The number of ticks to check for timeout i.e. if"]
    #[doc = " pxTicksToWait ticks have passed since pxTimeOut was last updated (either by"]
    #[doc = " vTaskSetTimeOutState() or xTaskCheckForTimeOut()), the timeout has occurred."]
    #[doc = " If the timeout has not occurred, pxTicksToWait is updated to reflect the"]
    #[doc = " number of remaining ticks."]
    #[doc = ""]
    #[doc = " @return If timeout has occurred, pdTRUE is returned. Otherwise pdFALSE is"]
    #[doc = " returned and pxTicksToWait is updated to reflect the number of remaining"]
    #[doc = " ticks."]
    #[doc = ""]
    #[doc = " @see https://www.FreeRTOS.org/xTaskCheckForTimeOut.html"]
    #[doc = ""]
    #[doc = " Example Usage:"]
    #[doc = " <pre>"]
    #[doc = "  // Driver library function used to receive uxWantedBytes from an Rx buffer"]
    #[doc = "  // that is filled by a UART interrupt. If there are not enough bytes in the"]
    #[doc = "  // Rx buffer then the task enters the Blocked state until it is notified that"]
    #[doc = "  // more data has been placed into the buffer. If there is still not enough"]
    #[doc = "  // data then the task re-enters the Blocked state, and xTaskCheckForTimeOut()"]
    #[doc = "  // is used to re-calculate the Block time to ensure the total amount of time"]
    #[doc = "  // spent in the Blocked state does not exceed MAX_TIME_TO_WAIT. This"]
    #[doc = "  // continues until either the buffer contains at least uxWantedBytes bytes,"]
    #[doc = "  // or the total amount of time spent in the Blocked state reaches"]
    #[doc = "  // MAX_TIME_TO_WAIT – at which point the task reads however many bytes are"]
    #[doc = "  // available up to a maximum of uxWantedBytes."]
    #[doc = ""]
    #[doc = "  size_t xUART_Receive( uint8_t *pucBuffer, size_t uxWantedBytes )"]
    #[doc = "  {"]
    #[doc = "  size_t uxReceived = 0;"]
    #[doc = "  TickType_t xTicksToWait = MAX_TIME_TO_WAIT;"]
    #[doc = "  TimeOut_t xTimeOut;"]
    #[doc = ""]
    #[doc = "      // Initialize xTimeOut.  This records the time at which this function"]
    #[doc = "      // was entered."]
    #[doc = "      vTaskSetTimeOutState( &xTimeOut );"]
    #[doc = ""]
    #[doc = "      // Loop until the buffer contains the wanted number of bytes, or a"]
    #[doc = "      // timeout occurs."]
    #[doc = "      while( UART_bytes_in_rx_buffer( pxUARTInstance ) < uxWantedBytes )"]
    #[doc = "      {"]
    #[doc = "          // The buffer didn't contain enough data so this task is going to"]
    #[doc = "          // enter the Blocked state. Adjusting xTicksToWait to account for"]
    #[doc = "          // any time that has been spent in the Blocked state within this"]
    #[doc = "          // function so far to ensure the total amount of time spent in the"]
    #[doc = "          // Blocked state does not exceed MAX_TIME_TO_WAIT."]
    #[doc = "          if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) != pdFALSE )"]
    #[doc = "          {"]
    #[doc = "              //Timed out before the wanted number of bytes were available,"]
    #[doc = "              // exit the loop."]
    #[doc = "              break;"]
    #[doc = "          }"]
    #[doc = ""]
    #[doc = "          // Wait for a maximum of xTicksToWait ticks to be notified that the"]
    #[doc = "          // receive interrupt has placed more data into the buffer."]
    #[doc = "          ulTaskNotifyTake( pdTRUE, xTicksToWait );"]
    #[doc = "      }"]
    #[doc = ""]
    #[doc = "      // Attempt to read uxWantedBytes from the receive buffer into pucBuffer."]
    #[doc = "      // The actual number of bytes read (which might be less than"]
    #[doc = "      // uxWantedBytes) is returned."]
    #[doc = "      uxReceived = UART_read_from_receive_buffer( pxUARTInstance,"]
    #[doc = "                                                  pucBuffer,"]
    #[doc = "                                                  uxWantedBytes );"]
    #[doc = ""]
    #[doc = "      return uxReceived;"]
    #[doc = "  }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xTaskCheckForTimeOut xTaskCheckForTimeOut"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskCheckForTimeOut(
        pxTimeOut: *mut TimeOut_t,
        pxTicksToWait: *mut TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " This function corrects the tick count value after the application code has held"]
    #[doc = " interrupts disabled for an extended period resulting in tick interrupts having"]
    #[doc = " been missed."]
    #[doc = ""]
    #[doc = " This function is similar to vTaskStepTick(), however, unlike"]
    #[doc = " vTaskStepTick(), xTaskCatchUpTicks() may move the tick count forward past a"]
    #[doc = " time at which a task should be removed from the blocked state.  That means"]
    #[doc = " tasks may have to be removed from the blocked state as the tick count is"]
    #[doc = " moved."]
    #[doc = ""]
    #[doc = " @param xTicksToCatchUp The number of tick interrupts that have been missed due to"]
    #[doc = " interrupts being disabled.  Its value is not computed automatically, so must be"]
    #[doc = " computed by the application writer."]
    #[doc = ""]
    #[doc = " @return pdTRUE if moving the tick count forward resulted in a task leaving the"]
    #[doc = " blocked state and a context switch being performed.  Otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskCatchUpTicks xTaskCatchUpTicks"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskCatchUpTicks(xTicksToCatchUp: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xTaskIncrementTick() -> BaseType_t;
}
extern "C" {
    pub fn vTaskPlaceOnEventList(pxEventList: *mut List_t, xTicksToWait: TickType_t);
}
extern "C" {
    pub fn vTaskPlaceOnUnorderedEventList(
        pxEventList: *mut List_t,
        xItemValue: TickType_t,
        xTicksToWait: TickType_t,
    );
}
extern "C" {
    pub fn vTaskPlaceOnEventListRestricted(
        pxEventList: *mut List_t,
        xTicksToWait: TickType_t,
        xWaitIndefinitely: BaseType_t,
    );
}
extern "C" {
    pub fn xTaskRemoveFromEventList(pxEventList: *const List_t) -> BaseType_t;
}
extern "C" {
    pub fn vTaskRemoveFromUnorderedEventList(
        pxEventListItem: *mut ListItem_t,
        xItemValue: TickType_t,
    );
}
extern "C" {
    pub fn vTaskSwitchContext();
}
extern "C" {
    pub fn uxTaskResetEventItemValue() -> TickType_t;
}
extern "C" {
    pub fn xTaskGetCurrentTaskHandle() -> TaskHandle_t;
}
extern "C" {
    pub fn vTaskMissedYield();
}
extern "C" {
    pub fn xTaskGetSchedulerState() -> BaseType_t;
}
extern "C" {
    pub fn xTaskPriorityInherit(pxMutexHolder: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xTaskPriorityDisinherit(pxMutexHolder: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn vTaskPriorityDisinheritAfterTimeout(
        pxMutexHolder: TaskHandle_t,
        uxHighestPriorityWaitingTask: UBaseType_t,
    );
}
extern "C" {
    pub fn uxTaskGetTaskNumber(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn vTaskSetTaskNumber(xTask: TaskHandle_t, uxHandle: UBaseType_t);
}
extern "C" {
    pub fn vTaskStepTick(xTicksToJump: TickType_t);
}
extern "C" {
    pub fn eTaskConfirmSleepModeStatus() -> eSleepModeStatus;
}
extern "C" {
    pub fn pvTaskIncrementMutexHeldCount() -> TaskHandle_t;
}
extern "C" {
    pub fn vTaskInternalSetTimeOutState(pxTimeOut: *mut TimeOut_t);
}
#[doc = " Type by which software timers are referenced.  For example, a call to"]
#[doc = " xTimerCreate() returns an TimerHandle_t variable that can then be used to"]
#[doc = " reference the subject timer in calls to other software timer API functions"]
#[doc = " (for example, xTimerStart(), xTimerReset(), etc.)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tmrTimerControl {
    _unused: [u8; 0],
}
pub type TimerHandle_t = *mut tmrTimerControl;
pub type TimerCallbackFunction_t =
    ::core::option::Option<unsafe extern "C" fn(xTimer: TimerHandle_t)>;
pub type PendedFunction_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut chlorine::c_void, arg2: u32)>;
extern "C" {
    pub fn xTimerCreate(
        pcTimerName: *const chlorine::c_char,
        xTimerPeriodInTicks: TickType_t,
        uxAutoReload: UBaseType_t,
        pvTimerID: *mut chlorine::c_void,
        pxCallbackFunction: TimerCallbackFunction_t,
    ) -> TimerHandle_t;
}
extern "C" {
    #[doc = " void *pvTimerGetTimerID( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the ID assigned to the timer."]
    #[doc = ""]
    #[doc = " IDs are assigned to timers using the pvTimerID parameter of the call to"]
    #[doc = " xTimerCreated() that was used to create the timer, and by calling the"]
    #[doc = " vTimerSetTimerID() API function."]
    #[doc = ""]
    #[doc = " If the same callback function is assigned to multiple timers then the timer"]
    #[doc = " ID can be used as time specific (timer local) storage."]
    #[doc = ""]
    #[doc = " @param xTimer The timer being queried."]
    #[doc = ""]
    #[doc = " @return The ID assigned to the timer being queried."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = ""]
    #[doc = " See the xTimerCreate() API function example usage scenario."]
    pub fn pvTimerGetTimerID(xTimer: TimerHandle_t) -> *mut chlorine::c_void;
}
extern "C" {
    #[doc = " void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID );"]
    #[doc = ""]
    #[doc = " Sets the ID assigned to the timer."]
    #[doc = ""]
    #[doc = " IDs are assigned to timers using the pvTimerID parameter of the call to"]
    #[doc = " xTimerCreated() that was used to create the timer."]
    #[doc = ""]
    #[doc = " If the same callback function is assigned to multiple timers then the timer"]
    #[doc = " ID can be used as time specific (timer local) storage."]
    #[doc = ""]
    #[doc = " @param xTimer The timer being updated."]
    #[doc = ""]
    #[doc = " @param pvNewID The ID to assign to the timer."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = ""]
    #[doc = " See the xTimerCreate() API function example usage scenario."]
    pub fn vTimerSetTimerID(xTimer: TimerHandle_t, pvNewID: *mut chlorine::c_void);
}
extern "C" {
    #[doc = " BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Queries a timer to see if it is active or dormant."]
    #[doc = ""]
    #[doc = " A timer will be dormant if:"]
    #[doc = "     1) It has been created but not started, or"]
    #[doc = "     2) It is an expired one-shot timer that has not been restarted."]
    #[doc = ""]
    #[doc = " Timers are created in the dormant state.  The xTimerStart(), xTimerReset(),"]
    #[doc = " xTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and"]
    #[doc = " xTimerChangePeriodFromISR() API functions can all be used to transition a timer into the"]
    #[doc = " active state."]
    #[doc = ""]
    #[doc = " @param xTimer The timer being queried."]
    #[doc = ""]
    #[doc = " @return pdFALSE will be returned if the timer is dormant.  A value other than"]
    #[doc = " pdFALSE will be returned if the timer is active."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @verbatim"]
    #[doc = " // This function assumes xTimer has already been created."]
    #[doc = " void vAFunction( TimerHandle_t xTimer )"]
    #[doc = " {"]
    #[doc = "     if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently \"if( xTimerIsTimerActive( xTimer ) )\""]
    #[doc = "     {"]
    #[doc = "         // xTimer is active, do something."]
    #[doc = "     }"]
    #[doc = "     else"]
    #[doc = "     {"]
    #[doc = "         // xTimer is not active, do something else."]
    #[doc = "     }"]
    #[doc = " }"]
    #[doc = " @endverbatim"]
    pub fn xTimerIsTimerActive(xTimer: TimerHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " TaskHandle_t xTimerGetTimerDaemonTaskHandle( void );"]
    #[doc = ""]
    #[doc = " Simply returns the handle of the timer service/daemon task.  It it not valid"]
    #[doc = " to call xTimerGetTimerDaemonTaskHandle() before the scheduler has been started."]
    pub fn xTimerGetTimerDaemonTaskHandle() -> TaskHandle_t;
}
extern "C" {
    #[doc = " BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,"]
    #[doc = "                                          void *pvParameter1,"]
    #[doc = "                                          uint32_t ulParameter2,"]
    #[doc = "                                          BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " Used from application interrupt service routines to defer the execution of a"]
    #[doc = " function to the RTOS daemon task (the timer service task, hence this function"]
    #[doc = " is implemented in timers.c and is prefixed with 'Timer')."]
    #[doc = ""]
    #[doc = " Ideally an interrupt service routine (ISR) is kept as short as possible, but"]
    #[doc = " sometimes an ISR either has a lot of processing to do, or needs to perform"]
    #[doc = " processing that is not deterministic.  In these cases"]
    #[doc = " xTimerPendFunctionCallFromISR() can be used to defer processing of a function"]
    #[doc = " to the RTOS daemon task."]
    #[doc = ""]
    #[doc = " A mechanism is provided that allows the interrupt to return directly to the"]
    #[doc = " task that will subsequently execute the pended callback function.  This"]
    #[doc = " allows the callback function to execute contiguously in time with the"]
    #[doc = " interrupt - just as if the callback had executed in the interrupt itself."]
    #[doc = ""]
    #[doc = " @param xFunctionToPend The function to execute from the timer service/"]
    #[doc = " daemon task.  The function must conform to the PendedFunction_t"]
    #[doc = " prototype."]
    #[doc = ""]
    #[doc = " @param pvParameter1 The value of the callback function's first parameter."]
    #[doc = " The parameter has a void * type to allow it to be used to pass any type."]
    #[doc = " For example, unsigned longs can be cast to a void *, or the void * can be"]
    #[doc = " used to point to a structure."]
    #[doc = ""]
    #[doc = " @param ulParameter2 The value of the callback function's second parameter."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken As mentioned above, calling this function"]
    #[doc = " will result in a message being sent to the timer daemon task.  If the"]
    #[doc = " priority of the timer daemon task (which is set using"]
    #[doc = " configTIMER_TASK_PRIORITY in FreeRTOSConfig.h) is higher than the priority of"]
    #[doc = " the currently running task (the task the interrupt interrupted) then"]
    #[doc = " *pxHigherPriorityTaskWoken will be set to pdTRUE within"]
    #[doc = " xTimerPendFunctionCallFromISR(), indicating that a context switch should be"]
    #[doc = " requested before the interrupt exits.  For that reason"]
    #[doc = " *pxHigherPriorityTaskWoken must be initialised to pdFALSE.  See the"]
    #[doc = " example code below."]
    #[doc = ""]
    #[doc = " @return pdPASS is returned if the message was successfully sent to the"]
    #[doc = " timer daemon task, otherwise pdFALSE is returned."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @verbatim"]
    #[doc = ""]
    #[doc = "  // The callback function that will execute in the context of the daemon task."]
    #[doc = "  // Note callback functions must all use this same prototype."]
    #[doc = "  void vProcessInterface( void *pvParameter1, uint32_t ulParameter2 )"]
    #[doc = "  {"]
    #[doc = "      BaseType_t xInterfaceToService;"]
    #[doc = ""]
    #[doc = "      // The interface that requires servicing is passed in the second"]
    #[doc = "      // parameter.  The first parameter is not used in this case."]
    #[doc = "      xInterfaceToService = ( BaseType_t ) ulParameter2;"]
    #[doc = ""]
    #[doc = "      // ...Perform the processing here..."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // An ISR that receives data packets from multiple interfaces"]
    #[doc = "  void vAnISR( void )"]
    #[doc = "  {"]
    #[doc = "      BaseType_t xInterfaceToService, xHigherPriorityTaskWoken;"]
    #[doc = ""]
    #[doc = "      // Query the hardware to determine which interface needs processing."]
    #[doc = "      xInterfaceToService = prvCheckInterfaces();"]
    #[doc = ""]
    #[doc = "      // The actual processing is to be deferred to a task.  Request the"]
    #[doc = "      // vProcessInterface() callback function is executed, passing in the"]
    #[doc = "      // number of the interface that needs processing.  The interface to"]
    #[doc = "      // service is passed in the second parameter.  The first parameter is"]
    #[doc = "      // not used in this case."]
    #[doc = "      xHigherPriorityTaskWoken = pdFALSE;"]
    #[doc = "      xTimerPendFunctionCallFromISR( vProcessInterface, NULL, ( uint32_t ) xInterfaceToService, &xHigherPriorityTaskWoken );"]
    #[doc = ""]
    #[doc = "      // If xHigherPriorityTaskWoken is now set to pdTRUE then a context"]
    #[doc = "      // switch should be requested.  The macro used is port specific and will"]
    #[doc = "      // be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to"]
    #[doc = "      // the documentation page for the port being used."]
    #[doc = "      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );"]
    #[doc = ""]
    #[doc = "  }"]
    #[doc = " @endverbatim"]
    pub fn xTimerPendFunctionCallFromISR(
        xFunctionToPend: PendedFunction_t,
        pvParameter1: *mut chlorine::c_void,
        ulParameter2: u32,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,"]
    #[doc = "                                    void *pvParameter1,"]
    #[doc = "                                    uint32_t ulParameter2,"]
    #[doc = "                                    TickType_t xTicksToWait );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " Used to defer the execution of a function to the RTOS daemon task (the timer"]
    #[doc = " service task, hence this function is implemented in timers.c and is prefixed"]
    #[doc = " with 'Timer')."]
    #[doc = ""]
    #[doc = " @param xFunctionToPend The function to execute from the timer service/"]
    #[doc = " daemon task.  The function must conform to the PendedFunction_t"]
    #[doc = " prototype."]
    #[doc = ""]
    #[doc = " @param pvParameter1 The value of the callback function's first parameter."]
    #[doc = " The parameter has a void * type to allow it to be used to pass any type."]
    #[doc = " For example, unsigned longs can be cast to a void *, or the void * can be"]
    #[doc = " used to point to a structure."]
    #[doc = ""]
    #[doc = " @param ulParameter2 The value of the callback function's second parameter."]
    #[doc = ""]
    #[doc = " @param xTicksToWait Calling this function will result in a message being"]
    #[doc = " sent to the timer daemon task on a queue.  xTicksToWait is the amount of"]
    #[doc = " time the calling task should remain in the Blocked state (so not using any"]
    #[doc = " processing time) for space to become available on the timer queue if the"]
    #[doc = " queue is found to be full."]
    #[doc = ""]
    #[doc = " @return pdPASS is returned if the message was successfully sent to the"]
    #[doc = " timer daemon task, otherwise pdFALSE is returned."]
    #[doc = ""]
    pub fn xTimerPendFunctionCall(
        xFunctionToPend: PendedFunction_t,
        pvParameter1: *mut chlorine::c_void,
        ulParameter2: u32,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " const char * const pcTimerGetName( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the name that was assigned to a timer when the timer was created."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return The name assigned to the timer specified by the xTimer parameter."]
    pub fn pcTimerGetName(xTimer: TimerHandle_t) -> *const chlorine::c_char;
}
extern "C" {
    #[doc = " void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload );"]
    #[doc = ""]
    #[doc = " Updates a timer to be either an auto-reload timer, in which case the timer"]
    #[doc = " automatically resets itself each time it expires, or a one-shot timer, in"]
    #[doc = " which case the timer will only expire once unless it is manually restarted."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being updated."]
    #[doc = ""]
    #[doc = " @param uxAutoReload If uxAutoReload is set to pdTRUE then the timer will"]
    #[doc = " expire repeatedly with a frequency set by the timer's period (see the"]
    #[doc = " xTimerPeriodInTicks parameter of the xTimerCreate() API function).  If"]
    #[doc = " uxAutoReload is set to pdFALSE then the timer will be a one-shot timer and"]
    #[doc = " enter the dormant state after it expires."]
    pub fn vTimerSetReloadMode(xTimer: TimerHandle_t, uxAutoReload: UBaseType_t);
}
extern "C" {
    #[doc = " UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Queries a timer to determine if it is an auto-reload timer, in which case the timer"]
    #[doc = " automatically resets itself each time it expires, or a one-shot timer, in"]
    #[doc = " which case the timer will only expire once unless it is manually restarted."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return If the timer is an auto-reload timer then pdTRUE is returned, otherwise"]
    #[doc = " pdFALSE is returned."]
    pub fn uxTimerGetReloadMode(xTimer: TimerHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " TickType_t xTimerGetPeriod( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the period of a timer."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return The period of the timer in ticks."]
    pub fn xTimerGetPeriod(xTimer: TimerHandle_t) -> TickType_t;
}
extern "C" {
    #[doc = " TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the time in ticks at which the timer will expire.  If this is less"]
    #[doc = " than the current tick count then the expiry time has overflowed from the"]
    #[doc = " current time."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return If the timer is running then the time in ticks at which the timer"]
    #[doc = " will next expire is returned.  If the timer is not running then the return"]
    #[doc = " value is undefined."]
    pub fn xTimerGetExpiryTime(xTimer: TimerHandle_t) -> TickType_t;
}
extern "C" {
    pub fn xTimerCreateTimerTask() -> BaseType_t;
}
extern "C" {
    pub fn xTimerGenericCommand(
        xTimer: TimerHandle_t,
        xCommandID: BaseType_t,
        xOptionalValue: TickType_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
#[doc = " Type by which queues are referenced.  For example, a call to xQueueCreate()"]
#[doc = " returns an QueueHandle_t variable that can then be used as a parameter to"]
#[doc = " xQueueSend(), xQueueReceive(), etc."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueueDefinition {
    _unused: [u8; 0],
}
pub type QueueHandle_t = *mut QueueDefinition;
#[doc = " Type by which queue sets are referenced.  For example, a call to"]
#[doc = " xQueueCreateSet() returns an xQueueSet variable that can then be used as a"]
#[doc = " parameter to xQueueSelectFromSet(), xQueueAddToSet(), etc."]
pub type QueueSetHandle_t = *mut QueueDefinition;
#[doc = " Queue sets can contain both queues and semaphores, so the"]
#[doc = " QueueSetMemberHandle_t is defined as a type to be used where a parameter or"]
#[doc = " return value can be either an QueueHandle_t or an SemaphoreHandle_t."]
pub type QueueSetMemberHandle_t = *mut QueueDefinition;
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xQueueGenericSend("]
    #[doc = "                                  QueueHandle_t xQueue,"]
    #[doc = "                                  const void * pvItemToQueue,"]
    #[doc = "                                  TickType_t xTicksToWait"]
    #[doc = "                                  BaseType_t xCopyPosition"]
    #[doc = "                              );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " It is preferred that the macros xQueueSend(), xQueueSendToFront() and"]
    #[doc = " xQueueSendToBack() are used in place of calling this function directly."]
    #[doc = ""]
    #[doc = " Post an item on a queue.  The item is queued by copy, not by reference."]
    #[doc = " This function must not be called from an interrupt service routine."]
    #[doc = " See xQueueSendFromISR () for an alternative which may be used in an ISR."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue on which the item is to be posted."]
    #[doc = ""]
    #[doc = " @param pvItemToQueue A pointer to the item that is to be placed on the"]
    #[doc = " queue.  The size of the items the queue will hold was defined when the"]
    #[doc = " queue was created, so this many bytes will be copied from pvItemToQueue"]
    #[doc = " into the queue storage area."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for space to become available on the queue, should it already"]
    #[doc = " be full.  The call will return immediately if this is set to 0 and the"]
    #[doc = " queue is full.  The time is defined in tick periods so the constant"]
    #[doc = " portTICK_PERIOD_MS should be used to convert to real time if this is required."]
    #[doc = ""]
    #[doc = " @param xCopyPosition Can take the value queueSEND_TO_BACK to place the"]
    #[doc = " item at the back of the queue, or queueSEND_TO_FRONT to place the item"]
    #[doc = " at the front of the queue (for high priority messages)."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " struct AMessage"]
    #[doc = " {"]
    #[doc = "  char ucMessageID;"]
    #[doc = "  char ucData[ 20 ];"]
    #[doc = " } xMessage;"]
    #[doc = ""]
    #[doc = " uint32_t ulVar = 10UL;"]
    #[doc = ""]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " QueueHandle_t xQueue1, xQueue2;"]
    #[doc = " struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 uint32_t values."]
    #[doc = "  xQueue1 = xQueueCreate( 10, sizeof( uint32_t ) );"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 pointers to AMessage structures."]
    #[doc = "  // These should be passed by pointer as they contain a lot of data."]
    #[doc = "  xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  if( xQueue1 != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Send an uint32_t.  Wait for 10 ticks for space to become"]
    #[doc = "      // available if necessary."]
    #[doc = "      if( xQueueGenericSend( xQueue1, ( void * ) &ulVar, ( TickType_t ) 10, queueSEND_TO_BACK ) != pdPASS )"]
    #[doc = "      {"]
    #[doc = "          // Failed to post the message, even after 10 ticks."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  if( xQueue2 != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Send a pointer to a struct AMessage object.  Don't block if the"]
    #[doc = "      // queue is already full."]
    #[doc = "      pxMessage = & xMessage;"]
    #[doc = "      xQueueGenericSend( xQueue2, ( void * ) &pxMessage, ( TickType_t ) 0, queueSEND_TO_BACK );"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xQueueSend xQueueSend"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueGenericSend(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const chlorine::c_void,
        xTicksToWait: TickType_t,
        xCopyPosition: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xQueuePeek("]
    #[doc = "                           QueueHandle_t xQueue,"]
    #[doc = "                           void * const pvBuffer,"]
    #[doc = "                           TickType_t xTicksToWait"]
    #[doc = "                       );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Receive an item from a queue without removing the item from the queue."]
    #[doc = " The item is received by copy so a buffer of adequate size must be"]
    #[doc = " provided.  The number of bytes copied into the buffer was defined when"]
    #[doc = " the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items remain on the queue so will be returned again"]
    #[doc = " by the next call, or a call to xQueueReceive()."]
    #[doc = ""]
    #[doc = " This macro must not be used in an interrupt service routine.  See"]
    #[doc = " xQueuePeekFromISR() for an alternative that can be called from an interrupt"]
    #[doc = " service routine."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for an item to receive should the queue be empty at the time"]
    #[doc = " of the call. The time is defined in tick periods so the constant"]
    #[doc = " portTICK_PERIOD_MS should be used to convert to real time if this is required."]
    #[doc = " xQueuePeek() will return immediately if xTicksToWait is 0 and the queue"]
    #[doc = " is empty."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " struct AMessage"]
    #[doc = " {"]
    #[doc = "  char ucMessageID;"]
    #[doc = "  char ucData[ 20 ];"]
    #[doc = " } xMessage;"]
    #[doc = ""]
    #[doc = " QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = " // Task to create a queue and post a value."]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 pointers to AMessage structures."]
    #[doc = "  // These should be passed by pointer as they contain a lot of data."]
    #[doc = "  xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = "  if( xQueue == 0 )"]
    #[doc = "  {"]
    #[doc = "      // Failed to create the queue."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  // Send a pointer to a struct AMessage object.  Don't block if the"]
    #[doc = "  // queue is already full."]
    #[doc = "  pxMessage = & xMessage;"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &pxMessage, ( TickType_t ) 0 );"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " // Task to peek the data from the queue."]
    #[doc = " void vADifferentTask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxRxedMessage;"]
    #[doc = ""]
    #[doc = "  if( xQueue != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Peek a message on the created queue.  Block for 10 ticks if a"]
    #[doc = "      // message is not immediately available."]
    #[doc = "      if( xQueuePeek( xQueue, &( pxRxedMessage ), ( TickType_t ) 10 ) )"]
    #[doc = "      {"]
    #[doc = "          // pcRxedMessage now points to the struct AMessage variable posted"]
    #[doc = "          // by vATask, but the item still remains on the queue."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xQueuePeek xQueuePeek"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueuePeek(
        xQueue: QueueHandle_t,
        pvBuffer: *mut chlorine::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xQueuePeekFromISR("]
    #[doc = "                                  QueueHandle_t xQueue,"]
    #[doc = "                                  void *pvBuffer,"]
    #[doc = "                              );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " A version of xQueuePeek() that can be called from an interrupt service"]
    #[doc = " routine (ISR)."]
    #[doc = ""]
    #[doc = " Receive an item from a queue without removing the item from the queue."]
    #[doc = " The item is received by copy so a buffer of adequate size must be"]
    #[doc = " provided.  The number of bytes copied into the buffer was defined when"]
    #[doc = " the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items remain on the queue so will be returned again"]
    #[doc = " by the next call, or a call to xQueueReceive()."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " \\defgroup xQueuePeekFromISR xQueuePeekFromISR"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueuePeekFromISR(xQueue: QueueHandle_t, pvBuffer: *mut chlorine::c_void) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xQueueReceive("]
    #[doc = "                               QueueHandle_t xQueue,"]
    #[doc = "                               void *pvBuffer,"]
    #[doc = "                               TickType_t xTicksToWait"]
    #[doc = "                          );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Receive an item from a queue.  The item is received by copy so a buffer of"]
    #[doc = " adequate size must be provided.  The number of bytes copied into the buffer"]
    #[doc = " was defined when the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items are removed from the queue."]
    #[doc = ""]
    #[doc = " This function must not be used in an interrupt service routine.  See"]
    #[doc = " xQueueReceiveFromISR for an alternative that can."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for an item to receive should the queue be empty at the time"]
    #[doc = " of the call. xQueueReceive() will return immediately if xTicksToWait"]
    #[doc = " is zero and the queue is empty.  The time is defined in tick periods so the"]
    #[doc = " constant portTICK_PERIOD_MS should be used to convert to real time if this is"]
    #[doc = " required."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " struct AMessage"]
    #[doc = " {"]
    #[doc = "  char ucMessageID;"]
    #[doc = "  char ucData[ 20 ];"]
    #[doc = " } xMessage;"]
    #[doc = ""]
    #[doc = " QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = " // Task to create a queue and post a value."]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 pointers to AMessage structures."]
    #[doc = "  // These should be passed by pointer as they contain a lot of data."]
    #[doc = "  xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = "  if( xQueue == 0 )"]
    #[doc = "  {"]
    #[doc = "      // Failed to create the queue."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  // Send a pointer to a struct AMessage object.  Don't block if the"]
    #[doc = "  // queue is already full."]
    #[doc = "  pxMessage = & xMessage;"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &pxMessage, ( TickType_t ) 0 );"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " // Task to receive from the queue."]
    #[doc = " void vADifferentTask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxRxedMessage;"]
    #[doc = ""]
    #[doc = "  if( xQueue != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Receive a message on the created queue.  Block for 10 ticks if a"]
    #[doc = "      // message is not immediately available."]
    #[doc = "      if( xQueueReceive( xQueue, &( pxRxedMessage ), ( TickType_t ) 10 ) )"]
    #[doc = "      {"]
    #[doc = "          // pcRxedMessage now points to the struct AMessage variable posted"]
    #[doc = "          // by vATask."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xQueueReceive xQueueReceive"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueReceive(
        xQueue: QueueHandle_t,
        pvBuffer: *mut chlorine::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Return the number of messages stored in a queue."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue being queried."]
    #[doc = ""]
    #[doc = " @return The number of messages available in the queue."]
    #[doc = ""]
    #[doc = " \\defgroup uxQueueMessagesWaiting uxQueueMessagesWaiting"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn uxQueueMessagesWaiting(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Return the number of free spaces available in a queue.  This is equal to the"]
    #[doc = " number of items that can be sent to the queue before the queue becomes full"]
    #[doc = " if no items are removed."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue being queried."]
    #[doc = ""]
    #[doc = " @return The number of spaces available in the queue."]
    #[doc = ""]
    #[doc = " \\defgroup uxQueueMessagesWaiting uxQueueMessagesWaiting"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn uxQueueSpacesAvailable(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " void vQueueDelete( QueueHandle_t xQueue );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Delete a queue - freeing all the memory allocated for storing of items"]
    #[doc = " placed on the queue."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue to be deleted."]
    #[doc = ""]
    #[doc = " \\defgroup vQueueDelete vQueueDelete"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn vQueueDelete(xQueue: QueueHandle_t);
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xQueueGenericSendFromISR("]
    #[doc = "                                         QueueHandle_t    xQueue,"]
    #[doc = "                                         const    void    *pvItemToQueue,"]
    #[doc = "                                         BaseType_t  *pxHigherPriorityTaskWoken,"]
    #[doc = "                                         BaseType_t  xCopyPosition"]
    #[doc = "                                     );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " It is preferred that the macros xQueueSendFromISR(),"]
    #[doc = " xQueueSendToFrontFromISR() and xQueueSendToBackFromISR() be used in place"]
    #[doc = " of calling this function directly.  xQueueGiveFromISR() is an"]
    #[doc = " equivalent for use by semaphores that don't actually copy any data."]
    #[doc = ""]
    #[doc = " Post an item on a queue.  It is safe to use this function from within an"]
    #[doc = " interrupt service routine."]
    #[doc = ""]
    #[doc = " Items are queued by copy not reference so it is preferable to only"]
    #[doc = " queue small items, especially when called from an ISR.  In most cases"]
    #[doc = " it would be preferable to store a pointer to the item being queued."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue on which the item is to be posted."]
    #[doc = ""]
    #[doc = " @param pvItemToQueue A pointer to the item that is to be placed on the"]
    #[doc = " queue.  The size of the items the queue will hold was defined when the"]
    #[doc = " queue was created, so this many bytes will be copied from pvItemToQueue"]
    #[doc = " into the queue storage area."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken xQueueGenericSendFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task"]
    #[doc = " to unblock, and the unblocked task has a priority higher than the currently"]
    #[doc = " running task.  If xQueueGenericSendFromISR() sets this value to pdTRUE then"]
    #[doc = " a context switch should be requested before the interrupt is exited."]
    #[doc = ""]
    #[doc = " @param xCopyPosition Can take the value queueSEND_TO_BACK to place the"]
    #[doc = " item at the back of the queue, or queueSEND_TO_FRONT to place the item"]
    #[doc = " at the front of the queue (for high priority messages)."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the data was successfully sent to the queue, otherwise"]
    #[doc = " errQUEUE_FULL."]
    #[doc = ""]
    #[doc = " Example usage for buffered IO (where the ISR can obtain more than one value"]
    #[doc = " per call):"]
    #[doc = " <pre>"]
    #[doc = " void vBufferISR( void )"]
    #[doc = " {"]
    #[doc = " char cIn;"]
    #[doc = " BaseType_t xHigherPriorityTaskWokenByPost;"]
    #[doc = ""]
    #[doc = "  // We have not woken a task at the start of the ISR."]
    #[doc = "  xHigherPriorityTaskWokenByPost = pdFALSE;"]
    #[doc = ""]
    #[doc = "  // Loop until the buffer is empty."]
    #[doc = "  do"]
    #[doc = "  {"]
    #[doc = "      // Obtain a byte from the buffer."]
    #[doc = "      cIn = portINPUT_BYTE( RX_REGISTER_ADDRESS );"]
    #[doc = ""]
    #[doc = "      // Post each byte."]
    #[doc = "      xQueueGenericSendFromISR( xRxQueue, &cIn, &xHigherPriorityTaskWokenByPost, queueSEND_TO_BACK );"]
    #[doc = ""]
    #[doc = "  } while( portINPUT_BYTE( BUFFER_COUNT ) );"]
    #[doc = ""]
    #[doc = "  // Now the buffer is empty we can switch context if necessary.  Note that the"]
    #[doc = "  // name of the yield function required is port specific."]
    #[doc = "  if( xHigherPriorityTaskWokenByPost )"]
    #[doc = "  {"]
    #[doc = "      portYIELD_FROM_ISR();"]
    #[doc = "  }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " \\defgroup xQueueSendFromISR xQueueSendFromISR"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueGenericSendFromISR(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const chlorine::c_void,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
        xCopyPosition: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGiveFromISR(
        xQueue: QueueHandle_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xQueueReceiveFromISR("]
    #[doc = "                                     QueueHandle_t    xQueue,"]
    #[doc = "                                     void             *pvBuffer,"]
    #[doc = "                                     BaseType_t       *pxTaskWoken"]
    #[doc = "                                 );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Receive an item from a queue.  It is safe to use this function from within an"]
    #[doc = " interrupt service routine."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param pxTaskWoken A task may be blocked waiting for space to become"]
    #[doc = " available on the queue.  If xQueueReceiveFromISR causes such a task to"]
    #[doc = " unblock *pxTaskWoken will get set to pdTRUE, otherwise *pxTaskWoken will"]
    #[doc = " remain unchanged."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = ""]
    #[doc = " QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = " // Function to create a queue and post some values."]
    #[doc = " void vAFunction( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " char cValueToPost;"]
    #[doc = " const TickType_t xTicksToWait = ( TickType_t )0xff;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 characters."]
    #[doc = "  xQueue = xQueueCreate( 10, sizeof( char ) );"]
    #[doc = "  if( xQueue == 0 )"]
    #[doc = "  {"]
    #[doc = "      // Failed to create the queue."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  // Post some characters that will be used within an ISR.  If the queue"]
    #[doc = "  // is full then this task will block for xTicksToWait ticks."]
    #[doc = "  cValueToPost = 'a';"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = "  cValueToPost = 'b';"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = ""]
    #[doc = "  // ... keep posting characters ... this task may block when the queue"]
    #[doc = "  // becomes full."]
    #[doc = ""]
    #[doc = "  cValueToPost = 'c';"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " // ISR that outputs all the characters received on the queue."]
    #[doc = " void vISR_Routine( void )"]
    #[doc = " {"]
    #[doc = " BaseType_t xTaskWokenByReceive = pdFALSE;"]
    #[doc = " char cRxedChar;"]
    #[doc = ""]
    #[doc = "  while( xQueueReceiveFromISR( xQueue, ( void * ) &cRxedChar, &xTaskWokenByReceive) )"]
    #[doc = "  {"]
    #[doc = "      // A character was received.  Output the character now."]
    #[doc = "      vOutputCharacter( cRxedChar );"]
    #[doc = ""]
    #[doc = "      // If removing the character from the queue woke the task that was"]
    #[doc = "      // posting onto the queue cTaskWokenByReceive will have been set to"]
    #[doc = "      // pdTRUE.  No matter how many times this loop iterates only one"]
    #[doc = "      // task will be woken."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  if( cTaskWokenByPost != ( char ) pdFALSE;"]
    #[doc = "  {"]
    #[doc = "      taskYIELD ();"]
    #[doc = "  }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xQueueReceiveFromISR xQueueReceiveFromISR"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueReceiveFromISR(
        xQueue: QueueHandle_t,
        pvBuffer: *mut chlorine::c_void,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueIsQueueEmptyFromISR(xQueue: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueIsQueueFullFromISR(xQueue: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn uxQueueMessagesWaitingFromISR(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn xQueueCRSendFromISR(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const chlorine::c_void,
        xCoRoutinePreviouslyWoken: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRReceiveFromISR(
        xQueue: QueueHandle_t,
        pvBuffer: *mut chlorine::c_void,
        pxTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRSend(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const chlorine::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRReceive(
        xQueue: QueueHandle_t,
        pvBuffer: *mut chlorine::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCreateMutex(ucQueueType: u8) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateMutexStatic(
        ucQueueType: u8,
        pxStaticQueue: *mut StaticQueue_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateCountingSemaphore(
        uxMaxCount: UBaseType_t,
        uxInitialCount: UBaseType_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateCountingSemaphoreStatic(
        uxMaxCount: UBaseType_t,
        uxInitialCount: UBaseType_t,
        pxStaticQueue: *mut StaticQueue_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueSemaphoreTake(xQueue: QueueHandle_t, xTicksToWait: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGetMutexHolder(xSemaphore: QueueHandle_t) -> TaskHandle_t;
}
extern "C" {
    pub fn xQueueGetMutexHolderFromISR(xSemaphore: QueueHandle_t) -> TaskHandle_t;
}
extern "C" {
    pub fn xQueueTakeMutexRecursive(xMutex: QueueHandle_t, xTicksToWait: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGiveMutexRecursive(xMutex: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGenericCreate(
        uxQueueLength: UBaseType_t,
        uxItemSize: UBaseType_t,
        ucQueueType: u8,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateSet(uxEventQueueLength: UBaseType_t) -> QueueSetHandle_t;
}
extern "C" {
    pub fn xQueueAddToSet(
        xQueueOrSemaphore: QueueSetMemberHandle_t,
        xQueueSet: QueueSetHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueRemoveFromSet(
        xQueueOrSemaphore: QueueSetMemberHandle_t,
        xQueueSet: QueueSetHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueSelectFromSet(
        xQueueSet: QueueSetHandle_t,
        xTicksToWait: TickType_t,
    ) -> QueueSetMemberHandle_t;
}
extern "C" {
    pub fn xQueueSelectFromSetFromISR(xQueueSet: QueueSetHandle_t) -> QueueSetMemberHandle_t;
}
extern "C" {
    pub fn vQueueWaitForMessageRestricted(
        xQueue: QueueHandle_t,
        xTicksToWait: TickType_t,
        xWaitIndefinitely: BaseType_t,
    );
}
extern "C" {
    pub fn xQueueGenericReset(xQueue: QueueHandle_t, xNewQueue: BaseType_t) -> BaseType_t;
}
extern "C" {
    pub fn vQueueSetQueueNumber(xQueue: QueueHandle_t, uxQueueNumber: UBaseType_t);
}
extern "C" {
    pub fn uxQueueGetQueueNumber(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn ucQueueGetQueueType(xQueue: QueueHandle_t) -> u8;
}
pub type SemaphoreHandle_t = QueueHandle_t;
#[doc = " event_groups.h"]
#[doc = ""]
#[doc = " Type by which event groups are referenced.  For example, a call to"]
#[doc = " xEventGroupCreate() returns an EventGroupHandle_t variable that can then"]
#[doc = " be used as a parameter to other event group functions."]
#[doc = ""]
#[doc = " \\defgroup EventGroupHandle_t EventGroupHandle_t"]
#[doc = " \\ingroup EventGroup"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EventGroupDef_t {
    _unused: [u8; 0],
}
pub type EventGroupHandle_t = *mut EventGroupDef_t;
pub type EventBits_t = TickType_t;
extern "C" {
    pub fn xEventGroupCreate() -> EventGroupHandle_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " <pre>"]
    #[doc = "  EventBits_t xEventGroupWaitBits(    EventGroupHandle_t xEventGroup,"]
    #[doc = "                                      const EventBits_t uxBitsToWaitFor,"]
    #[doc = "                                      const BaseType_t xClearOnExit,"]
    #[doc = "                                      const BaseType_t xWaitForAllBits,"]
    #[doc = "                                      const TickType_t xTicksToWait );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " [Potentially] block to wait for one or more bits to be set within a"]
    #[doc = " previously created event group."]
    #[doc = ""]
    #[doc = " This function cannot be called from an interrupt."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are being tested.  The"]
    #[doc = " event group must have previously been created using a call to"]
    #[doc = " xEventGroupCreate()."]
    #[doc = ""]
    #[doc = " @param uxBitsToWaitFor A bitwise value that indicates the bit or bits to test"]
    #[doc = " inside the event group.  For example, to wait for bit 0 and/or bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x05.  To wait for bits 0 and/or bit 1 and/or bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x07.  Etc."]
    #[doc = ""]
    #[doc = " @param xClearOnExit If xClearOnExit is set to pdTRUE then any bits within"]
    #[doc = " uxBitsToWaitFor that are set within the event group will be cleared before"]
    #[doc = " xEventGroupWaitBits() returns if the wait condition was met (if the function"]
    #[doc = " returns for a reason other than a timeout).  If xClearOnExit is set to"]
    #[doc = " pdFALSE then the bits set in the event group are not altered when the call to"]
    #[doc = " xEventGroupWaitBits() returns."]
    #[doc = ""]
    #[doc = " @param xWaitForAllBits If xWaitForAllBits is set to pdTRUE then"]
    #[doc = " xEventGroupWaitBits() will return when either all the bits in uxBitsToWaitFor"]
    #[doc = " are set or the specified block time expires.  If xWaitForAllBits is set to"]
    #[doc = " pdFALSE then xEventGroupWaitBits() will return when any one of the bits set"]
    #[doc = " in uxBitsToWaitFor is set or the specified block time expires.  The block"]
    #[doc = " time is specified by the xTicksToWait parameter."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time (specified in 'ticks') to wait"]
    #[doc = " for one/all (depending on the xWaitForAllBits value) of the bits specified by"]
    #[doc = " uxBitsToWaitFor to become set."]
    #[doc = ""]
    #[doc = " @return The value of the event group at the time either the bits being waited"]
    #[doc = " for became set, or the block time expired.  Test the return value to know"]
    #[doc = " which bits were set.  If xEventGroupWaitBits() returned because its timeout"]
    #[doc = " expired then not all the bits being waited for will be set.  If"]
    #[doc = " xEventGroupWaitBits() returned because the bits it was waiting for were set"]
    #[doc = " then the returned value is the event group value before any bits were"]
    #[doc = " automatically cleared in the case that xClearOnExit parameter was set to"]
    #[doc = " pdTRUE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = "#define BIT_0 ( 1 << 0 )"]
    #[doc = "#define BIT_4 ( 1 << 4 )"]
    #[doc = ""]
    #[doc = " void aFunction( EventGroupHandle_t xEventGroup )"]
    #[doc = " {"]
    #[doc = " EventBits_t uxBits;"]
    #[doc = " const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;"]
    #[doc = ""]
    #[doc = "      // Wait a maximum of 100ms for either bit 0 or bit 4 to be set within"]
    #[doc = "      // the event group.  Clear the bits before exiting."]
    #[doc = "      uxBits = xEventGroupWaitBits("]
    #[doc = "                  xEventGroup,    // The event group being tested."]
    #[doc = "                  BIT_0 | BIT_4,  // The bits within the event group to wait for."]
    #[doc = "                  pdTRUE,         // BIT_0 and BIT_4 should be cleared before returning."]
    #[doc = "                  pdFALSE,        // Don't wait for both bits, either bit will do."]
    #[doc = "                  xTicksToWait ); // Wait a maximum of 100ms for either bit to be set."]
    #[doc = ""]
    #[doc = "      if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )"]
    #[doc = "      {"]
    #[doc = "          // xEventGroupWaitBits() returned because both bits were set."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_0 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // xEventGroupWaitBits() returned because just BIT_0 was set."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_4 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // xEventGroupWaitBits() returned because just BIT_4 was set."]
    #[doc = "      }"]
    #[doc = "      else"]
    #[doc = "      {"]
    #[doc = "          // xEventGroupWaitBits() returned because xTicksToWait ticks passed"]
    #[doc = "          // without either BIT_0 or BIT_4 becoming set."]
    #[doc = "      }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xEventGroupWaitBits xEventGroupWaitBits"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupWaitBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToWaitFor: EventBits_t,
        xClearOnExit: BaseType_t,
        xWaitForAllBits: BaseType_t,
        xTicksToWait: TickType_t,
    ) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " <pre>"]
    #[doc = "  EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Clear bits within an event group.  This function cannot be called from an"]
    #[doc = " interrupt."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are to be cleared."]
    #[doc = ""]
    #[doc = " @param uxBitsToClear A bitwise value that indicates the bit or bits to clear"]
    #[doc = " in the event group.  For example, to clear bit 3 only, set uxBitsToClear to"]
    #[doc = " 0x08.  To clear bit 3 and bit 0 set uxBitsToClear to 0x09."]
    #[doc = ""]
    #[doc = " @return The value of the event group before the specified bits were cleared."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = "#define BIT_0 ( 1 << 0 )"]
    #[doc = "#define BIT_4 ( 1 << 4 )"]
    #[doc = ""]
    #[doc = " void aFunction( EventGroupHandle_t xEventGroup )"]
    #[doc = " {"]
    #[doc = " EventBits_t uxBits;"]
    #[doc = ""]
    #[doc = "      // Clear bit 0 and bit 4 in xEventGroup."]
    #[doc = "      uxBits = xEventGroupClearBits("]
    #[doc = "                              xEventGroup,    // The event group being updated."]
    #[doc = "                              BIT_0 | BIT_4 );// The bits being cleared."]
    #[doc = ""]
    #[doc = "      if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )"]
    #[doc = "      {"]
    #[doc = "          // Both bit 0 and bit 4 were set before xEventGroupClearBits() was"]
    #[doc = "          // called.  Both will now be clear (not set)."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_0 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // Bit 0 was set before xEventGroupClearBits() was called.  It will"]
    #[doc = "          // now be clear."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_4 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // Bit 4 was set before xEventGroupClearBits() was called.  It will"]
    #[doc = "          // now be clear."]
    #[doc = "      }"]
    #[doc = "      else"]
    #[doc = "      {"]
    #[doc = "          // Neither bit 0 nor bit 4 were set in the first place."]
    #[doc = "      }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xEventGroupClearBits xEventGroupClearBits"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupClearBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToClear: EventBits_t,
    ) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " <pre>"]
    #[doc = "  EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Set bits within an event group."]
    #[doc = " This function cannot be called from an interrupt.  xEventGroupSetBitsFromISR()"]
    #[doc = " is a version that can be called from an interrupt."]
    #[doc = ""]
    #[doc = " Setting bits in an event group will automatically unblock tasks that are"]
    #[doc = " blocked waiting for the bits."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are to be set."]
    #[doc = ""]
    #[doc = " @param uxBitsToSet A bitwise value that indicates the bit or bits to set."]
    #[doc = " For example, to set bit 3 only, set uxBitsToSet to 0x08.  To set bit 3"]
    #[doc = " and bit 0 set uxBitsToSet to 0x09."]
    #[doc = ""]
    #[doc = " @return The value of the event group at the time the call to"]
    #[doc = " xEventGroupSetBits() returns.  There are two reasons why the returned value"]
    #[doc = " might have the bits specified by the uxBitsToSet parameter cleared.  First,"]
    #[doc = " if setting a bit results in a task that was waiting for the bit leaving the"]
    #[doc = " blocked state then it is possible the bit will be cleared automatically"]
    #[doc = " (see the xClearBitOnExit parameter of xEventGroupWaitBits()).  Second, any"]
    #[doc = " unblocked (or otherwise Ready state) task that has a priority above that of"]
    #[doc = " the task that called xEventGroupSetBits() will execute and may change the"]
    #[doc = " event group value before the call to xEventGroupSetBits() returns."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = "#define BIT_0 ( 1 << 0 )"]
    #[doc = "#define BIT_4 ( 1 << 4 )"]
    #[doc = ""]
    #[doc = " void aFunction( EventGroupHandle_t xEventGroup )"]
    #[doc = " {"]
    #[doc = " EventBits_t uxBits;"]
    #[doc = ""]
    #[doc = "      // Set bit 0 and bit 4 in xEventGroup."]
    #[doc = "      uxBits = xEventGroupSetBits("]
    #[doc = "                          xEventGroup,    // The event group being updated."]
    #[doc = "                          BIT_0 | BIT_4 );// The bits being set."]
    #[doc = ""]
    #[doc = "      if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )"]
    #[doc = "      {"]
    #[doc = "          // Both bit 0 and bit 4 remained set when the function returned."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_0 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // Bit 0 remained set when the function returned, but bit 4 was"]
    #[doc = "          // cleared.  It might be that bit 4 was cleared automatically as a"]
    #[doc = "          // task that was waiting for bit 4 was removed from the Blocked"]
    #[doc = "          // state."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_4 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // Bit 4 remained set when the function returned, but bit 0 was"]
    #[doc = "          // cleared.  It might be that bit 0 was cleared automatically as a"]
    #[doc = "          // task that was waiting for bit 0 was removed from the Blocked"]
    #[doc = "          // state."]
    #[doc = "      }"]
    #[doc = "      else"]
    #[doc = "      {"]
    #[doc = "          // Neither bit 0 nor bit 4 remained set.  It might be that a task"]
    #[doc = "          // was waiting for both of the bits to be set, and the bits were"]
    #[doc = "          // cleared as the task left the Blocked state."]
    #[doc = "      }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xEventGroupSetBits xEventGroupSetBits"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupSetBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToSet: EventBits_t,
    ) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " <pre>"]
    #[doc = "  EventBits_t xEventGroupSync(    EventGroupHandle_t xEventGroup,"]
    #[doc = "                                  const EventBits_t uxBitsToSet,"]
    #[doc = "                                  const EventBits_t uxBitsToWaitFor,"]
    #[doc = "                                  TickType_t xTicksToWait );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Atomically set bits within an event group, then wait for a combination of"]
    #[doc = " bits to be set within the same event group.  This functionality is typically"]
    #[doc = " used to synchronise multiple tasks, where each task has to wait for the other"]
    #[doc = " tasks to reach a synchronisation point before proceeding."]
    #[doc = ""]
    #[doc = " This function cannot be used from an interrupt."]
    #[doc = ""]
    #[doc = " The function will return before its block time expires if the bits specified"]
    #[doc = " by the uxBitsToWait parameter are set, or become set within that time.  In"]
    #[doc = " this case all the bits specified by uxBitsToWait will be automatically"]
    #[doc = " cleared before the function returns."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are being tested.  The"]
    #[doc = " event group must have previously been created using a call to"]
    #[doc = " xEventGroupCreate()."]
    #[doc = ""]
    #[doc = " @param uxBitsToSet The bits to set in the event group before determining"]
    #[doc = " if, and possibly waiting for, all the bits specified by the uxBitsToWait"]
    #[doc = " parameter are set."]
    #[doc = ""]
    #[doc = " @param uxBitsToWaitFor A bitwise value that indicates the bit or bits to test"]
    #[doc = " inside the event group.  For example, to wait for bit 0 and bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x05.  To wait for bits 0 and bit 1 and bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x07.  Etc."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time (specified in 'ticks') to wait"]
    #[doc = " for all of the bits specified by uxBitsToWaitFor to become set."]
    #[doc = ""]
    #[doc = " @return The value of the event group at the time either the bits being waited"]
    #[doc = " for became set, or the block time expired.  Test the return value to know"]
    #[doc = " which bits were set.  If xEventGroupSync() returned because its timeout"]
    #[doc = " expired then not all the bits being waited for will be set.  If"]
    #[doc = " xEventGroupSync() returned because all the bits it was waiting for were"]
    #[doc = " set then the returned value is the event group value before any bits were"]
    #[doc = " automatically cleared."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " // Bits used by the three tasks."]
    #[doc = "#define TASK_0_BIT     ( 1 << 0 )"]
    #[doc = "#define TASK_1_BIT     ( 1 << 1 )"]
    #[doc = "#define TASK_2_BIT     ( 1 << 2 )"]
    #[doc = ""]
    #[doc = "#define ALL_SYNC_BITS ( TASK_0_BIT | TASK_1_BIT | TASK_2_BIT )"]
    #[doc = ""]
    #[doc = " // Use an event group to synchronise three tasks.  It is assumed this event"]
    #[doc = " // group has already been created elsewhere."]
    #[doc = " EventGroupHandle_t xEventBits;"]
    #[doc = ""]
    #[doc = " void vTask0( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " EventBits_t uxReturn;"]
    #[doc = " TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;"]
    #[doc = ""]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "      // Perform task functionality here."]
    #[doc = ""]
    #[doc = "      // Set bit 0 in the event flag to note this task has reached the"]
    #[doc = "      // sync point.  The other two tasks will set the other two bits defined"]
    #[doc = "      // by ALL_SYNC_BITS.  All three tasks have reached the synchronisation"]
    #[doc = "      // point when all the ALL_SYNC_BITS are set.  Wait a maximum of 100ms"]
    #[doc = "      // for this to happen."]
    #[doc = "      uxReturn = xEventGroupSync( xEventBits, TASK_0_BIT, ALL_SYNC_BITS, xTicksToWait );"]
    #[doc = ""]
    #[doc = "      if( ( uxReturn & ALL_SYNC_BITS ) == ALL_SYNC_BITS )"]
    #[doc = "      {"]
    #[doc = "          // All three tasks reached the synchronisation point before the call"]
    #[doc = "          // to xEventGroupSync() timed out."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " void vTask1( void *pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "      // Perform task functionality here."]
    #[doc = ""]
    #[doc = "      // Set bit 1 in the event flag to note this task has reached the"]
    #[doc = "      // synchronisation point.  The other two tasks will set the other two"]
    #[doc = "      // bits defined by ALL_SYNC_BITS.  All three tasks have reached the"]
    #[doc = "      // synchronisation point when all the ALL_SYNC_BITS are set.  Wait"]
    #[doc = "      // indefinitely for this to happen."]
    #[doc = "      xEventGroupSync( xEventBits, TASK_1_BIT, ALL_SYNC_BITS, portMAX_DELAY );"]
    #[doc = ""]
    #[doc = "      // xEventGroupSync() was called with an indefinite block time, so"]
    #[doc = "      // this task will only reach here if the synchronisation was made by all"]
    #[doc = "      // three tasks, so there is no need to test the return value."]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " void vTask2( void *pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "      // Perform task functionality here."]
    #[doc = ""]
    #[doc = "      // Set bit 2 in the event flag to note this task has reached the"]
    #[doc = "      // synchronisation point.  The other two tasks will set the other two"]
    #[doc = "      // bits defined by ALL_SYNC_BITS.  All three tasks have reached the"]
    #[doc = "      // synchronisation point when all the ALL_SYNC_BITS are set.  Wait"]
    #[doc = "      // indefinitely for this to happen."]
    #[doc = "      xEventGroupSync( xEventBits, TASK_2_BIT, ALL_SYNC_BITS, portMAX_DELAY );"]
    #[doc = ""]
    #[doc = "      // xEventGroupSync() was called with an indefinite block time, so"]
    #[doc = "      // this task will only reach here if the synchronisation was made by all"]
    #[doc = "      // three tasks, so there is no need to test the return value."]
    #[doc = "  }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xEventGroupSync xEventGroupSync"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupSync(
        xEventGroup: EventGroupHandle_t,
        uxBitsToSet: EventBits_t,
        uxBitsToWaitFor: EventBits_t,
        xTicksToWait: TickType_t,
    ) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " <pre>"]
    #[doc = "  EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " A version of xEventGroupGetBits() that can be called from an ISR."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group being queried."]
    #[doc = ""]
    #[doc = " @return The event group bits at the time xEventGroupGetBitsFromISR() was called."]
    #[doc = ""]
    #[doc = " \\defgroup xEventGroupGetBitsFromISR xEventGroupGetBitsFromISR"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupGetBitsFromISR(xEventGroup: EventGroupHandle_t) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " <pre>"]
    #[doc = "  void xEventGroupDelete( EventGroupHandle_t xEventGroup );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Delete an event group that was previously created by a call to"]
    #[doc = " xEventGroupCreate().  Tasks that are blocked on the event group will be"]
    #[doc = " unblocked and obtain 0 as the event group's value."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group being deleted."]
    pub fn vEventGroupDelete(xEventGroup: EventGroupHandle_t);
}
extern "C" {
    pub fn vEventGroupSetBitsCallback(pvEventGroup: *mut chlorine::c_void, ulBitsToSet: u32);
}
extern "C" {
    pub fn vEventGroupClearBitsCallback(pvEventGroup: *mut chlorine::c_void, ulBitsToClear: u32);
}
extern "C" {
    #[doc = " Get the first frame of the current stack's backtrace"]
    #[doc = ""]
    #[doc = " Given the following function call flow (B -> A -> X -> esp_backtrace_get_start),"]
    #[doc = " this function will do the following."]
    #[doc = " - Flush CPU registers and window frames onto the current stack"]
    #[doc = " - Return PC and SP of function A (i.e. start of the stack's backtrace)"]
    #[doc = " - Return PC of function B (i.e. next_pc)"]
    #[doc = ""]
    #[doc = " @note This function is implemented in assembly"]
    #[doc = ""]
    #[doc = " @param[out] pc       PC of the first frame in the backtrace"]
    #[doc = " @param[out] sp       SP of the first frame in the backtrace"]
    #[doc = " @param[out] next_pc  PC of the first frame's caller"]
    pub fn esp_backtrace_get_start(pc: *mut u32, sp: *mut u32, next_pc: *mut u32);
}
